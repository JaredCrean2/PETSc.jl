#
# START OF PROLOGUE
#

using MPI
const MPI_Comm = MPI.MPI_Comm
const MPI_Datatype = MPI.MPI_Datatype
const MPI_File = MPI.MPI_File
const MPI_Aint = MPI.MPI_Aint
const MPI_Info = MPI.MPI_Info
const MPI_Win = MPI.MPI_Win
const MPI_Offset = MPI.MPI_Offset
const MPI_Op = MPI.MPI_Op
const MPI_UNSIGNED_SHORT = MPI.MPI_UNSIGNED_SHORT
const MPI_INT64_T = MPI.MPI_INT64_T
const MPI_FLOAT = MPI.MPI_FLOAT
const MPI_COMM_SELF = MPI.MPI_COMM_SELF
const MPI_DOUBLE = MPI.MPI_DOUBLE
const MPI_SUM = MPI.MPI_SUM
const MPI_MAX = MPI.MPI_MAX
const MPI_MIN = MPI.MPI_MIN
const MPI_REPLACE = MPI.MPI_REPLACE

# We know these will be Cvoid, so just set them to be that
const PetscOptions = Ptr{Cvoid}
const PetscViewer = Ptr{Cvoid}
const PetscObject = Ptr{Cvoid}
const Vec = Ptr{Cvoid}
const VecType = Cstring
const Mat = Ptr{Cvoid}
const MatType = Cstring
const KSP = Ptr{Cvoid}
const KSPType = Cstring
const SNES = Ptr{Cvoid}
const SNESType = Cstring
const DM = Ptr{Cvoid}
const DMType = Cstring

#
# END OF PROLOGUE
#


const __darwin_off_t = Int64

mutable struct ADIOI_FileD end

const off_t = __darwin_off_t

const PetscInt64 = Int64

function PetscMallocValidate(arg1, arg2, arg3)
    ccall((:PetscMallocValidate, $petsc_library), PetscErrorCode, (Cint, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3)
end

const PetscMPIInt = Cint

function PetscMPIErrorString(arg1, arg2)
    ccall((:PetscMPIErrorString, $petsc_library), Cvoid, (PetscMPIInt, Ptr{Cchar}), arg1, arg2)
end

function PetscSleep(arg1)
    ccall((:PetscSleep, $petsc_library), PetscErrorCode, (PetscReal,), arg1)
end

@enum PetscFPTrap::UInt32 begin
    PETSC_FP_TRAP_OFF = 0
    PETSC_FP_TRAP_INDIV = 1
    PETSC_FP_TRAP_FLTOPERR = 2
    PETSC_FP_TRAP_FLTOVF = 4
    PETSC_FP_TRAP_FLTUND = 8
    PETSC_FP_TRAP_FLTDIV = 16
    PETSC_FP_TRAP_FLTINEX = 32
end

const PetscClassId = Cint

# typedef void ( PetscVoidFn ) ( void )
const PetscVoidFn = Cvoid

mutable struct __JL__n_PetscOptionItem
end

function Base.unsafe_load(x::Ptr{__JL__n_PetscOptionItem})
    unsafe_load(Ptr{_n_PetscOptionItem}(x))
end

function Base.getproperty(x::Ptr{__JL__n_PetscOptionItem}, f::Symbol)
    getproperty(Ptr{_n_PetscOptionItem}(x), f)
end

function Base.setproperty!(x::Ptr{__JL__n_PetscOptionItem}, f::Symbol, v)
    setproperty!(Ptr{_n_PetscOptionItem}(x), f, v)
end

const PetscOptionItem = Ptr{__JL__n_PetscOptionItem}

function PetscMemzero(a, n)
    ccall((:PetscMemzero, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Csize_t), a, n)
end

@enum PetscEnum::UInt32 begin
    ENUM_DUMMY = 0
end

mutable struct _n_PetscFunctionList end

const PetscFunctionList = Ptr{_n_PetscFunctionList}

function PetscMemcmp(arg1, arg2, arg3, arg4)
    ccall((:PetscMemcmp, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}, Csize_t, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function PetscMemmove(a, b, n)
    ccall((:PetscMemmove, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}, Csize_t), a, b, n)
end

function PetscMemcpy(a, b, n)
    ccall((:PetscMemcpy, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}, Csize_t), a, b, n)
end

const PetscBT = Ptr{Cchar}

function PetscBTLookup(array, index)
    ccall((:PetscBTLookup, $petsc_library), Cchar, (PetscBT, PetscInt), array, index)
end

function PetscLogObjectParent(o, p)
    ccall((:PetscLogObjectParent, $petsc_library), PetscErrorCode, (PetscObject, PetscObject), o, p)
end

const PetscLogEvent = Cint

function PetscLogEventBegin_Internal(e, o1, o2, o3, o4)
    ccall((:PetscLogEventBegin_Internal, $petsc_library), PetscErrorCode, (PetscLogEvent, PetscObject, PetscObject, PetscObject, PetscObject), e, o1, o2, o3, o4)
end

function PetscLogEventEnd_Internal(e, o1, o2, o3, o4)
    ccall((:PetscLogEventEnd_Internal, $petsc_library), PetscErrorCode, (PetscLogEvent, PetscObject, PetscObject, PetscObject, PetscObject), e, o1, o2, o3, o4)
end

const PetscLogDouble = Cdouble

function PetscMPITypeSize(count, type, length, length_th)
    ccall((:PetscMPITypeSize, $petsc_library), PetscErrorCode, (PetscInt, MPI_Datatype, Ptr{PetscLogDouble}, Ptr{PetscLogDouble}), count, type, length, length_th)
end

function PetscMPIParallelComm(comm)
    ccall((:PetscMPIParallelComm, $petsc_library), Cint, (MPI_Comm,), comm)
end

function PetscMPITypeSizeComm(comm, counts, type, length, length_th)
    ccall((:PetscMPITypeSizeComm, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscMPIInt}, MPI_Datatype, Ptr{PetscLogDouble}, Ptr{PetscLogDouble}), comm, counts, type, length, length_th)
end

const PetscLogStage = Cint

function PetscOptionsGetBool(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscOptionsGetBool, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscLogStageGetId(arg1, arg2)
    ccall((:PetscLogStageGetId, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscLogStage}), arg1, arg2)
end

function PetscBarrier(arg1)
    ccall((:PetscBarrier, $petsc_library), PetscErrorCode, (PetscObject,), arg1)
end

function PetscLogStageRegister(arg1, arg2)
    ccall((:PetscLogStageRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscLogStage}), arg1, arg2)
end

function PetscLogStageSetActive(arg1, arg2)
    ccall((:PetscLogStageSetActive, $petsc_library), PetscErrorCode, (PetscLogStage, PetscBool), arg1, arg2)
end

function PetscLogStagePush(arg1)
    ccall((:PetscLogStagePush, $petsc_library), PetscErrorCode, (PetscLogStage,), arg1)
end

function PetscLogStagePop()
    ccall((:PetscLogStagePop, $petsc_library), PetscErrorCode, ())
end

mutable struct _p_PetscMatlabEngine end

const PetscMatlabEngine = Ptr{_p_PetscMatlabEngine}

function PETSC_MATLAB_ENGINE_(arg1)
    ccall((:PETSC_MATLAB_ENGINE_, $petsc_library), PetscMatlabEngine, (MPI_Comm,), arg1)
end

mutable struct _p_PetscDeviceContext end

const PetscDeviceContext = Ptr{_p_PetscDeviceContext}

@enum PetscMemType::UInt32 begin
    PETSC_MEMTYPE_HOST = 0
    PETSC_MEMTYPE_DEVICE = 1
    # PETSC_MEMTYPE_CUDA = 1
    PETSC_MEMTYPE_NVSHMEM = 17
    PETSC_MEMTYPE_HIP = 3
    PETSC_MEMTYPE_SYCL = 5
end

function PetscDeviceAllocate_Private(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDeviceAllocate_Private, $petsc_library), PetscErrorCode, (PetscDeviceContext, PetscBool, PetscMemType, Csize_t, Csize_t, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDeviceDeallocate_Private(arg1, arg2)
    ccall((:PetscDeviceDeallocate_Private, $petsc_library), PetscErrorCode, (PetscDeviceContext, Ptr{Cvoid}), arg1, arg2)
end

function PetscDeviceMemcpy(arg1, arg2, arg3, arg4)
    ccall((:PetscDeviceMemcpy, $petsc_library), PetscErrorCode, (PetscDeviceContext, Ptr{Cvoid}, Ptr{Cvoid}, Csize_t), arg1, arg2, arg3, arg4)
end

function PetscDeviceMemset(arg1, arg2, arg3, arg4)
    ccall((:PetscDeviceMemset, $petsc_library), PetscErrorCode, (PetscDeviceContext, Ptr{Cvoid}, PetscInt, Csize_t), arg1, arg2, arg3, arg4)
end

@enum PetscViewerFormat::UInt32 begin
    PETSC_VIEWER_DEFAULT = 0
    PETSC_VIEWER_ASCII_MATLAB = 1
    PETSC_VIEWER_ASCII_MATHEMATICA = 2
    PETSC_VIEWER_ASCII_IMPL = 3
    PETSC_VIEWER_ASCII_INFO = 4
    PETSC_VIEWER_ASCII_INFO_DETAIL = 5
    PETSC_VIEWER_ASCII_COMMON = 6
    PETSC_VIEWER_ASCII_SYMMODU = 7
    PETSC_VIEWER_ASCII_INDEX = 8
    PETSC_VIEWER_ASCII_DENSE = 9
    PETSC_VIEWER_ASCII_MATRIXMARKET = 10
    PETSC_VIEWER_ASCII_VTK_DEPRECATED = 11
    # PETSC_VIEWER_ASCII_VTK = 11
    PETSC_VIEWER_ASCII_VTK_CELL_DEPRECATED = 12
    # PETSC_VIEWER_ASCII_VTK_CELL = 12
    PETSC_VIEWER_ASCII_VTK_COORDS_DEPRECATED = 13
    # PETSC_VIEWER_ASCII_VTK_COORDS = 13
    PETSC_VIEWER_ASCII_PCICE = 14
    PETSC_VIEWER_ASCII_PYTHON = 15
    PETSC_VIEWER_ASCII_FACTOR_INFO = 16
    PETSC_VIEWER_ASCII_LATEX = 17
    PETSC_VIEWER_ASCII_XML = 18
    PETSC_VIEWER_ASCII_FLAMEGRAPH = 19
    PETSC_VIEWER_ASCII_GLVIS = 20
    PETSC_VIEWER_ASCII_CSV = 21
    PETSC_VIEWER_DRAW_BASIC = 22
    PETSC_VIEWER_DRAW_LG = 23
    PETSC_VIEWER_DRAW_LG_XRANGE = 24
    PETSC_VIEWER_DRAW_CONTOUR = 25
    PETSC_VIEWER_DRAW_PORTS = 26
    PETSC_VIEWER_VTK_VTS = 27
    PETSC_VIEWER_VTK_VTR = 28
    PETSC_VIEWER_VTK_VTU = 29
    PETSC_VIEWER_BINARY_MATLAB = 30
    PETSC_VIEWER_NATIVE = 31
    PETSC_VIEWER_HDF5_PETSC = 32
    PETSC_VIEWER_HDF5_VIZ = 33
    PETSC_VIEWER_HDF5_XDMF = 34
    PETSC_VIEWER_HDF5_MAT = 35
    PETSC_VIEWER_NOFORMAT = 36
    PETSC_VIEWER_LOAD_BALANCE = 37
    PETSC_VIEWER_FAILED = 38
    PETSC_VIEWER_ALL = 39
end

function PETSC_VIEWER_STDERR_(arg1)
    ccall((:PETSC_VIEWER_STDERR_, $petsc_library), PetscViewer, (MPI_Comm,), arg1)
end

function PETSC_VIEWER_STDOUT_(arg1)
    ccall((:PETSC_VIEWER_STDOUT_, $petsc_library), PetscViewer, (MPI_Comm,), arg1)
end

function PETSC_VIEWER_DRAW_(arg1)
    ccall((:PETSC_VIEWER_DRAW_, $petsc_library), PetscViewer, (MPI_Comm,), arg1)
end

function PETSC_VIEWER_SOCKET_(arg1)
    ccall((:PETSC_VIEWER_SOCKET_, $petsc_library), PetscViewer, (MPI_Comm,), arg1)
end

function PETSC_VIEWER_BINARY_(arg1)
    ccall((:PETSC_VIEWER_BINARY_, $petsc_library), PetscViewer, (MPI_Comm,), arg1)
end

function PETSC_VIEWER_MATLAB_(arg1)
    ccall((:PETSC_VIEWER_MATLAB_, $petsc_library), PetscViewer, (MPI_Comm,), arg1)
end

mutable struct _p_ISLocalToGlobalMapping end

const ISLocalToGlobalMapping = Ptr{_p_ISLocalToGlobalMapping}

function ISLocalToGlobalMappingApply(arg1, arg2, arg3, arg4)
    ccall((:ISLocalToGlobalMappingApply, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSortRemoveDupsInt(arg1, arg2)
    ccall((:PetscSortRemoveDupsInt, $petsc_library), PetscErrorCode, (Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2)
end

function ISLocalToGlobalMappingApplyBlock(arg1, arg2, arg3, arg4)
    ccall((:ISLocalToGlobalMappingApplyBlock, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

@enum InsertMode::UInt32 begin
    NOT_SET_VALUES = 0
    INSERT_VALUES = 1
    ADD_VALUES = 2
    MAX_VALUES = 3
    MIN_VALUES = 4
    INSERT_ALL_VALUES = 5
    ADD_ALL_VALUES = 6
    INSERT_BC_VALUES = 7
    ADD_BC_VALUES = 8
end

function MatSetValues(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatSetValues, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscObjectSetOptionsPrefix(arg1, arg2)
    ccall((:PetscObjectSetOptionsPrefix, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}), arg1, arg2)
end

@enum KSPConvergedReason::Int32 begin
    KSP_CONVERGED_RTOL_NORMAL = 1
    KSP_CONVERGED_ATOL_NORMAL = 9
    KSP_CONVERGED_RTOL = 2
    KSP_CONVERGED_ATOL = 3
    KSP_CONVERGED_ITS = 4
    KSP_CONVERGED_NEG_CURVE = 5
    # KSP_CONVERGED_CG_NEG_CURVE = 5
    KSP_CONVERGED_CG_CONSTRAINED = 6
    # KSP_CONVERGED_STEP_LENGTH = 6
    KSP_CONVERGED_HAPPY_BREAKDOWN = 7
    KSP_DIVERGED_NULL = -2
    KSP_DIVERGED_ITS = -3
    KSP_DIVERGED_DTOL = -4
    KSP_DIVERGED_BREAKDOWN = -5
    KSP_DIVERGED_BREAKDOWN_BICG = -6
    KSP_DIVERGED_NONSYMMETRIC = -7
    KSP_DIVERGED_INDEFINITE_PC = -8
    KSP_DIVERGED_NANORINF = -9
    KSP_DIVERGED_INDEFINITE_MAT = -10
    KSP_DIVERGED_PC_FAILED = -11
    # KSP_DIVERGED_PCSETUP_FAILED = -11
    KSP_CONVERGED_ITERATING = 0
end

function KSPConvergedDefault(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPConvergedDefault, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{KSPConvergedReason}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function KSPConvergedDefaultDestroy(arg1)
    ccall((:KSPConvergedDefaultDestroy, $petsc_library), PetscErrorCode, (Ptr{Cvoid},), arg1)
end

function KSPConvergedDefaultCreate(arg1)
    ccall((:KSPConvergedDefaultCreate, $petsc_library), PetscErrorCode, (Ptr{Ptr{Cvoid}},), arg1)
end

function KSPConvergedDefaultSetUIRNorm(arg1)
    ccall((:KSPConvergedDefaultSetUIRNorm, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPConvergedDefaultSetUMIRNorm(arg1)
    ccall((:KSPConvergedDefaultSetUMIRNorm, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPConvergedSkip(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPConvergedSkip, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{KSPConvergedReason}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

@enum SNESConvergedReason::Int32 begin
    SNES_CONVERGED_FNORM_ABS = 2
    SNES_CONVERGED_FNORM_RELATIVE = 3
    SNES_CONVERGED_SNORM_RELATIVE = 4
    SNES_CONVERGED_ITS = 5
    SNES_BREAKOUT_INNER_ITER = 6
    SNES_DIVERGED_FUNCTION_DOMAIN = -1
    SNES_DIVERGED_FUNCTION_COUNT = -2
    SNES_DIVERGED_LINEAR_SOLVE = -3
    SNES_DIVERGED_FNORM_NAN = -4
    SNES_DIVERGED_MAX_IT = -5
    SNES_DIVERGED_LINE_SEARCH = -6
    SNES_DIVERGED_INNER = -7
    SNES_DIVERGED_LOCAL_MIN = -8
    SNES_DIVERGED_DTOL = -9
    SNES_DIVERGED_JACOBIAN_DOMAIN = -10
    SNES_DIVERGED_TR_DELTA = -11
    # SNES_CONVERGED_TR_DELTA = -11
    SNES_CONVERGED_ITERATING = 0
end

function SNESConvergedSkip(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:SNESConvergedSkip, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, PetscReal, PetscReal, Ptr{SNESConvergedReason}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

@enum __JL_Ctag_1::Int32 begin
    PETSC_SUCCESS = 0
    PETSC_ERR_BOOLEAN_MACRO_FAILURE = 1
    PETSC_ERR_MIN_VALUE = 54
    PETSC_ERR_MEM = 55
    PETSC_ERR_SUP = 56
    PETSC_ERR_SUP_SYS = 57
    PETSC_ERR_ORDER = 58
    PETSC_ERR_SIG = 59
    PETSC_ERR_FP = 72
    PETSC_ERR_COR = 74
    PETSC_ERR_LIB = 76
    PETSC_ERR_PLIB = 77
    PETSC_ERR_MEMC = 78
    PETSC_ERR_CONV_FAILED = 82
    PETSC_ERR_USER = 83
    PETSC_ERR_SYS = 88
    PETSC_ERR_POINTER = 70
    PETSC_ERR_MPI_LIB_INCOMP = 87
    PETSC_ERR_ARG_SIZ = 60
    PETSC_ERR_ARG_IDN = 61
    PETSC_ERR_ARG_WRONG = 62
    PETSC_ERR_ARG_CORRUPT = 64
    PETSC_ERR_ARG_OUTOFRANGE = 63
    PETSC_ERR_ARG_BADPTR = 68
    PETSC_ERR_ARG_NOTSAMETYPE = 69
    PETSC_ERR_ARG_NOTSAMECOMM = 80
    PETSC_ERR_ARG_WRONGSTATE = 73
    PETSC_ERR_ARG_TYPENOTSET = 89
    PETSC_ERR_ARG_INCOMP = 75
    PETSC_ERR_ARG_NULL = 85
    PETSC_ERR_ARG_UNKNOWN_TYPE = 86
    PETSC_ERR_FILE_OPEN = 65
    PETSC_ERR_FILE_READ = 66
    PETSC_ERR_FILE_WRITE = 67
    PETSC_ERR_FILE_UNEXPECTED = 79
    PETSC_ERR_MAT_LU_ZRPVT = 71
    PETSC_ERR_MAT_CH_ZRPVT = 81
    PETSC_ERR_INT_OVERFLOW = 84
    PETSC_ERR_FLOP_COUNT = 90
    PETSC_ERR_NOT_CONVERGED = 91
    PETSC_ERR_MISSING_FACTOR = 92
    PETSC_ERR_OPT_OVERWRITE = 93
    PETSC_ERR_WRONG_MPI_SIZE = 94
    PETSC_ERR_USER_INPUT = 95
    PETSC_ERR_GPU_RESOURCE = 96
    PETSC_ERR_GPU = 97
    PETSC_ERR_MPI = 98
    PETSC_ERR_RETURN = 99
    PETSC_ERR_MEM_LEAK = 100
    PETSC_ERR_MAX_VALUE = 101
    PETSC_ERR_MIN_SIGNED_BOUND_DO_NOT_USE = -2147483648
    PETSC_ERR_MAX_SIGNED_BOUND_DO_NOT_USE = 2147483647
end

@enum __JL_Ctag_2::Int32 begin
    PETSC_MPI_INT_MIN = -2147483648
    PETSC_MPI_INT_MAX = 2147483647
end

const PetscSizeT = Csize_t

const PetscCount = Cptrdiff_t

const PetscShort = Cshort

const PetscChar = Cchar

const PetscInt32 = Int32

const PetscBLASInt = Cint

@enum __JL_Ctag_3::Int32 begin
    PETSC_BLAS_INT_MIN = -2147483648
    PETSC_BLAS_INT_MAX = 2147483647
end

const PetscCuBLASInt = Cint

@enum __JL_Ctag_4::Int32 begin
    PETSC_CUBLAS_INT_MIN = -2147483648
    PETSC_CUBLAS_INT_MAX = 2147483647
end

const PetscHipBLASInt = Cint

@enum __JL_Ctag_5::Int32 begin
    PETSC_HIPBLAS_INT_MIN = -2147483648
    PETSC_HIPBLAS_INT_MAX = 2147483647
end

@enum PetscBool3::Int32 begin
    PETSC_BOOL3_FALSE = 0
    PETSC_BOOL3_TRUE = 1
    PETSC_BOOL3_UNKNOWN = -1
end

@enum PetscCopyMode::UInt32 begin
    PETSC_COPY_VALUES = 0
    PETSC_OWN_POINTER = 1
    PETSC_USE_POINTER = 2
end

mutable struct _p_PetscToken end

const PetscToken = Ptr{_p_PetscToken}

const PetscObjectId = PetscInt64

const PetscObjectState = PetscInt64

@enum PetscFileMode::Int32 begin
    FILE_MODE_UNDEFINED = -1
    FILE_MODE_READ = 0
    FILE_MODE_WRITE = 1
    FILE_MODE_APPEND = 2
    FILE_MODE_UPDATE = 3
    FILE_MODE_APPEND_UPDATE = 4
end

const PetscDLHandle = Ptr{Cvoid}

@enum PetscDLMode::UInt32 begin
    PETSC_DL_DECIDE = 0
    PETSC_DL_NOW = 1
    PETSC_DL_LOCAL = 2
end

mutable struct _n_PetscObjectList end

const PetscObjectList = Ptr{_n_PetscObjectList}

mutable struct _n_PetscDLLibrary end

const PetscDLLibrary = Ptr{_n_PetscDLLibrary}

mutable struct _p_PetscContainer end

const PetscContainer = Ptr{_p_PetscContainer}

mutable struct _p_PetscRandom end

const PetscRandom = Ptr{_p_PetscRandom}

@enum PetscBinarySeekType::UInt32 begin
    PETSC_BINARY_SEEK_SET = 0
    PETSC_BINARY_SEEK_CUR = 1
    PETSC_BINARY_SEEK_END = 2
end

@enum PetscBuildTwoSidedType::Int32 begin
    PETSC_BUILDTWOSIDED_NOTSET = -1
    PETSC_BUILDTWOSIDED_ALLREDUCE = 0
    PETSC_BUILDTWOSIDED_IBARRIER = 1
    PETSC_BUILDTWOSIDED_REDSCATTER = 2
end

@enum PetscSubcommType::UInt32 begin
    PETSC_SUBCOMM_GENERAL = 0
    PETSC_SUBCOMM_CONTIGUOUS = 1
    PETSC_SUBCOMM_INTERLACED = 2
end

mutable struct _n_PetscSubcomm
    parent::MPI_Comm
    dupparent::MPI_Comm
    child::MPI_Comm
    n::PetscMPIInt
    color::PetscMPIInt
    subsize::Ptr{PetscMPIInt}
    type::PetscSubcommType
    subcommprefix::Ptr{Cchar}
    _n_PetscSubcomm() = new()
end

const PetscSubcomm = Ptr{_n_PetscSubcomm}

mutable struct _PetscHeap end

const PetscHeap = Ptr{_PetscHeap}

mutable struct _n_PetscShmComm end

const PetscShmComm = Ptr{_n_PetscShmComm}

mutable struct _n_PetscOmpCtrl end

const PetscOmpCtrl = Ptr{_n_PetscOmpCtrl}

mutable struct _n_PetscSegBuffer end

const PetscSegBuffer = Ptr{_n_PetscSegBuffer}

mutable struct _n_PetscOptionsHelpPrinted end

const PetscOptionsHelpPrinted = Ptr{_n_PetscOptionsHelpPrinted}

function PetscSignReal(a)
    ccall((:PetscSignReal, $petsc_library), PetscReal, (PetscReal,), a)
end

function PetscCMPLX(x, y)
    ccall((:PetscCMPLX, $petsc_library), PetscComplex, (PetscReal, PetscReal), x, y)
end

@enum PetscScalarPrecision::UInt32 begin
    PETSC_SCALAR_DOUBLE = 0
    PETSC_SCALAR_SINGLE = 1
    PETSC_SCALAR_LONG_DOUBLE = 2
    PETSC_SCALAR_HALF = 3
end

function PetscIsInfReal(arg1)
    ccall((:PetscIsInfReal, $petsc_library), PetscBool, (PetscReal,), arg1)
end

function PetscIsNanReal(arg1)
    ccall((:PetscIsNanReal, $petsc_library), PetscBool, (PetscReal,), arg1)
end

function PetscIsNormalReal(arg1)
    ccall((:PetscIsNormalReal, $petsc_library), PetscBool, (PetscReal,), arg1)
end

function PetscIsInfOrNanReal(v)
    ccall((:PetscIsInfOrNanReal, $petsc_library), PetscBool, (PetscReal,), v)
end

function PetscIsInfScalar(v)
    ccall((:PetscIsInfScalar, $petsc_library), PetscBool, (PetscScalar,), v)
end

function PetscIsNanScalar(v)
    ccall((:PetscIsNanScalar, $petsc_library), PetscBool, (PetscScalar,), v)
end

function PetscIsInfOrNanScalar(v)
    ccall((:PetscIsInfOrNanScalar, $petsc_library), PetscBool, (PetscScalar,), v)
end

function PetscIsNormalScalar(v)
    ccall((:PetscIsNormalScalar, $petsc_library), PetscBool, (PetscScalar,), v)
end

function PetscIsCloseAtTol(arg1, arg2, arg3, arg4)
    ccall((:PetscIsCloseAtTol, $petsc_library), PetscBool, (PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4)
end

function PetscEqualReal(arg1, arg2)
    ccall((:PetscEqualReal, $petsc_library), PetscBool, (PetscReal, PetscReal), arg1, arg2)
end

function PetscEqualScalar(arg1, arg2)
    ccall((:PetscEqualScalar, $petsc_library), PetscBool, (PetscScalar, PetscScalar), arg1, arg2)
end

function PetscIsCloseAtTolScalar(lhs, rhs, rtol, atol)
    ccall((:PetscIsCloseAtTolScalar, $petsc_library), PetscBool, (PetscScalar, PetscScalar, PetscReal, PetscReal), lhs, rhs, rtol, atol)
end

mutable struct petsc_mpiu_real_int
    v::PetscReal
    i::PetscInt
    petsc_mpiu_real_int() = new()
end

mutable struct petsc_mpiu_scalar_int
    v::PetscScalar
    i::PetscInt
    petsc_mpiu_scalar_int() = new()
end

function PetscPowInt(base, power)
    ccall((:PetscPowInt, $petsc_library), PetscInt, (PetscInt, PetscInt), base, power)
end

function PetscPowInt64(base, power)
    ccall((:PetscPowInt64, $petsc_library), PetscInt64, (PetscInt, PetscInt), base, power)
end

function PetscPowRealInt(base, power)
    ccall((:PetscPowRealInt, $petsc_library), PetscReal, (PetscReal, PetscInt), base, power)
end

function PetscPowScalarInt(base, power)
    ccall((:PetscPowScalarInt, $petsc_library), PetscScalar, (PetscScalar, PetscInt), base, power)
end

function PetscPowScalarReal(base, power)
    ccall((:PetscPowScalarReal, $petsc_library), PetscScalar, (PetscScalar, PetscReal), base, power)
end

function PetscLinearRegression(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscLinearRegression, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSetHelpVersionFunctions(arg1, arg2)
    ccall((:PetscSetHelpVersionFunctions, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2)
end

function PetscCommDuplicate(arg1, arg2, arg3)
    ccall((:PetscCommDuplicate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{MPI_Comm}, Ptr{Cint}), arg1, arg2, arg3)
end

function PetscCommDestroy(arg1)
    ccall((:PetscCommDestroy, $petsc_library), PetscErrorCode, (Ptr{MPI_Comm},), arg1)
end

function PetscCommGetComm(arg1, arg2)
    ccall((:PetscCommGetComm, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{MPI_Comm}), arg1, arg2)
end

function PetscCommRestoreComm(arg1, arg2)
    ccall((:PetscCommRestoreComm, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{MPI_Comm}), arg1, arg2)
end

function PetscMallocSetCoalesce(arg1)
    ccall((:PetscMallocSetCoalesce, $petsc_library), PetscErrorCode, (PetscBool,), arg1)
end

function PetscMallocSet(arg1, arg2, arg3)
    ccall((:PetscMallocSet, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PetscMallocClear()
    ccall((:PetscMallocClear, $petsc_library), PetscErrorCode, ())
end

function PetscMallocSetDRAM()
    ccall((:PetscMallocSetDRAM, $petsc_library), PetscErrorCode, ())
end

function PetscMallocResetDRAM()
    ccall((:PetscMallocResetDRAM, $petsc_library), PetscErrorCode, ())
end

function PetscMallocDump(arg1)
    ccall((:PetscMallocDump, $petsc_library), PetscErrorCode, (Ptr{Libc.FILE},), arg1)
end

function PetscMallocView(arg1)
    ccall((:PetscMallocView, $petsc_library), PetscErrorCode, (Ptr{Libc.FILE},), arg1)
end

function PetscMallocGetCurrentUsage(arg1)
    ccall((:PetscMallocGetCurrentUsage, $petsc_library), PetscErrorCode, (Ptr{PetscLogDouble},), arg1)
end

function PetscMallocGetMaximumUsage(arg1)
    ccall((:PetscMallocGetMaximumUsage, $petsc_library), PetscErrorCode, (Ptr{PetscLogDouble},), arg1)
end

function PetscMallocPushMaximumUsage(arg1)
    ccall((:PetscMallocPushMaximumUsage, $petsc_library), PetscErrorCode, (Cint,), arg1)
end

function PetscMallocPopMaximumUsage(arg1, arg2)
    ccall((:PetscMallocPopMaximumUsage, $petsc_library), PetscErrorCode, (Cint, Ptr{PetscLogDouble}), arg1, arg2)
end

function PetscMallocSetDebug(arg1, arg2)
    ccall((:PetscMallocSetDebug, $petsc_library), PetscErrorCode, (PetscBool, PetscBool), arg1, arg2)
end

function PetscMallocGetDebug(arg1, arg2, arg3)
    ccall((:PetscMallocGetDebug, $petsc_library), PetscErrorCode, (Ptr{PetscBool}, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscMallocViewSet(arg1)
    ccall((:PetscMallocViewSet, $petsc_library), PetscErrorCode, (PetscLogDouble,), arg1)
end

function PetscMallocViewGet(arg1)
    ccall((:PetscMallocViewGet, $petsc_library), PetscErrorCode, (Ptr{PetscBool},), arg1)
end

function PetscMallocLogRequestedSizeSet(arg1)
    ccall((:PetscMallocLogRequestedSizeSet, $petsc_library), PetscErrorCode, (PetscBool,), arg1)
end

function PetscMallocLogRequestedSizeGet(arg1)
    ccall((:PetscMallocLogRequestedSizeGet, $petsc_library), PetscErrorCode, (Ptr{PetscBool},), arg1)
end

function PetscDataTypeToMPIDataType(arg1, arg2)
    ccall((:PetscDataTypeToMPIDataType, $petsc_library), PetscErrorCode, (PetscDataType, Ptr{MPI_Datatype}), arg1, arg2)
end

function PetscMPIDataTypeToPetscDataType(arg1, arg2)
    ccall((:PetscMPIDataTypeToPetscDataType, $petsc_library), PetscErrorCode, (MPI_Datatype, Ptr{PetscDataType}), arg1, arg2)
end

function PetscDataTypeGetSize(arg1, arg2)
    ccall((:PetscDataTypeGetSize, $petsc_library), PetscErrorCode, (PetscDataType, Ptr{Csize_t}), arg1, arg2)
end

function PetscDataTypeFromString(arg1, arg2, arg3)
    ccall((:PetscDataTypeFromString, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscDataType}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscMaxSum(arg1, arg2, arg3, arg4)
    ccall((:PetscMaxSum, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function MPIULong_Send(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MPIULong_Send, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, PetscInt, MPI_Datatype, PetscMPIInt, PetscMPIInt, MPI_Comm), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MPIULong_Recv(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MPIULong_Recv, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, PetscInt, MPI_Datatype, PetscMPIInt, PetscMPIInt, MPI_Comm), arg1, arg2, arg3, arg4, arg5, arg6)
end

@enum PetscErrorType::UInt32 begin
    PETSC_ERROR_INITIAL = 0
    PETSC_ERROR_REPEAT = 1
    PETSC_ERROR_IN_CXX = 2
end

function PetscErrorPrintfInitialize()
    ccall((:PetscErrorPrintfInitialize, $petsc_library), PetscErrorCode, ())
end

function PetscErrorMessage(arg1, arg2, arg3)
    ccall((:PetscErrorMessage, $petsc_library), PetscErrorCode, (PetscErrorCode, Ptr{Ptr{Cchar}}, Ptr{Ptr{Cchar}}), arg1, arg2, arg3)
end

function PetscTraceBackErrorHandler(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscTraceBackErrorHandler, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, Ptr{Cchar}, Ptr{Cchar}, PetscErrorCode, PetscErrorType, Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscIgnoreErrorHandler(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscIgnoreErrorHandler, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, Ptr{Cchar}, Ptr{Cchar}, PetscErrorCode, PetscErrorType, Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscEmacsClientErrorHandler(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscEmacsClientErrorHandler, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, Ptr{Cchar}, Ptr{Cchar}, PetscErrorCode, PetscErrorType, Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscMPIAbortErrorHandler(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscMPIAbortErrorHandler, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, Ptr{Cchar}, Ptr{Cchar}, PetscErrorCode, PetscErrorType, Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscAbortErrorHandler(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscAbortErrorHandler, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, Ptr{Cchar}, Ptr{Cchar}, PetscErrorCode, PetscErrorType, Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscAttachDebuggerErrorHandler(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscAttachDebuggerErrorHandler, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, Ptr{Cchar}, Ptr{Cchar}, PetscErrorCode, PetscErrorType, Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscReturnErrorHandler(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscReturnErrorHandler, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, Ptr{Cchar}, Ptr{Cchar}, PetscErrorCode, PetscErrorType, Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscPushErrorHandler(handler, arg2)
    ccall((:PetscPushErrorHandler, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}), handler, arg2)
end

function PetscPopErrorHandler()
    ccall((:PetscPopErrorHandler, $petsc_library), PetscErrorCode, ())
end

function PetscSignalHandlerDefault(arg1, arg2)
    ccall((:PetscSignalHandlerDefault, $petsc_library), PetscErrorCode, (Cint, Ptr{Cvoid}), arg1, arg2)
end

function PetscPushSignalHandler(arg1, arg2)
    ccall((:PetscPushSignalHandler, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2)
end

function PetscPopSignalHandler()
    ccall((:PetscPopSignalHandler, $petsc_library), PetscErrorCode, ())
end

function PetscCheckPointerSetIntensity(arg1)
    ccall((:PetscCheckPointerSetIntensity, $petsc_library), PetscErrorCode, (PetscInt,), arg1)
end

function PetscSignalSegvCheckPointerOrMpi()
    ccall((:PetscSignalSegvCheckPointerOrMpi, $petsc_library), Cvoid, ())
end

function PetscSignalSegvCheckPointer()
    ccall((:PetscSignalSegvCheckPointer, $petsc_library), Cvoid, ())
end

function PetscSetFPTrap(arg1)
    ccall((:PetscSetFPTrap, $petsc_library), PetscErrorCode, (PetscFPTrap,), arg1)
end

function PetscFPTrapPush(arg1)
    ccall((:PetscFPTrapPush, $petsc_library), PetscErrorCode, (PetscFPTrap,), arg1)
end

function PetscFPTrapPop()
    ccall((:PetscFPTrapPop, $petsc_library), PetscErrorCode, ())
end

function PetscDetermineInitialFPTrap()
    ccall((:PetscDetermineInitialFPTrap, $petsc_library), PetscErrorCode, ())
end

mutable struct PetscStack
    _function::NTuple{64, Ptr{Cchar}}
    file::NTuple{64, Ptr{Cchar}}
    line::NTuple{64, Cint}
    petscroutine::NTuple{64, Cint}
    currentsize::Cint
    hotdepth::Cint
    check::PetscBool
    PetscStack() = new()
end

function PetscCIFilename(arg1)
    ccall((:PetscCIFilename, $petsc_library), Ptr{Cchar}, (Ptr{Cchar},), arg1)
end

function PetscCILinenumber(arg1)
    ccall((:PetscCILinenumber, $petsc_library), Cint, (Cint,), arg1)
end

function PetscClassIdRegister(arg1, arg2)
    ccall((:PetscClassIdRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscClassId}), arg1, arg2)
end

function PetscObjectGetId(arg1, arg2)
    ccall((:PetscObjectGetId, $petsc_library), PetscErrorCode, (PetscObject, Ptr{PetscObjectId}), arg1, arg2)
end

function PetscObjectCompareId(arg1, arg2, arg3)
    ccall((:PetscObjectCompareId, $petsc_library), PetscErrorCode, (PetscObject, PetscObjectId, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscMemoryGetCurrentUsage(arg1)
    ccall((:PetscMemoryGetCurrentUsage, $petsc_library), PetscErrorCode, (Ptr{PetscLogDouble},), arg1)
end

function PetscMemoryGetMaximumUsage(arg1)
    ccall((:PetscMemoryGetMaximumUsage, $petsc_library), PetscErrorCode, (Ptr{PetscLogDouble},), arg1)
end

function PetscMemorySetGetMaximumUsage()
    ccall((:PetscMemorySetGetMaximumUsage, $petsc_library), PetscErrorCode, ())
end

function PetscMemoryTrace(arg1)
    ccall((:PetscMemoryTrace, $petsc_library), PetscErrorCode, (Ptr{Cchar},), arg1)
end

function PetscInitialize(arg1, arg2, arg3, arg4)
    ccall((:PetscInitialize, $petsc_library), PetscErrorCode, (Ptr{Cint}, Ptr{Ptr{Ptr{Cchar}}}, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4)
end

function PetscInitializeNoPointers(arg1, arg2, arg3, arg4)
    ccall((:PetscInitializeNoPointers, $petsc_library), PetscErrorCode, (Cint, Ptr{Ptr{Cchar}}, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4)
end

function PetscInitializeNoArguments()
    ccall((:PetscInitializeNoArguments, $petsc_library), PetscErrorCode, ())
end

function PetscInitialized(arg1)
    ccall((:PetscInitialized, $petsc_library), PetscErrorCode, (Ptr{PetscBool},), arg1)
end

function PetscFinalized(arg1)
    ccall((:PetscFinalized, $petsc_library), PetscErrorCode, (Ptr{PetscBool},), arg1)
end

function PetscFinalize()
    ccall((:PetscFinalize, $petsc_library), PetscErrorCode, ())
end

function PetscInitializeFortran()
    ccall((:PetscInitializeFortran, $petsc_library), PetscErrorCode, ())
end

function PetscGetArgs(arg1, arg2)
    ccall((:PetscGetArgs, $petsc_library), PetscErrorCode, (Ptr{Cint}, Ptr{Ptr{Ptr{Cchar}}}), arg1, arg2)
end

function PetscGetArguments(arg1)
    ccall((:PetscGetArguments, $petsc_library), PetscErrorCode, (Ptr{Ptr{Ptr{Cchar}}},), arg1)
end

function PetscFreeArguments(arg1)
    ccall((:PetscFreeArguments, $petsc_library), PetscErrorCode, (Ptr{Ptr{Cchar}},), arg1)
end

function PetscEnd()
    ccall((:PetscEnd, $petsc_library), PetscErrorCode, ())
end

function PetscSysInitializePackage()
    ccall((:PetscSysInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscSysFinalizePackage()
    ccall((:PetscSysFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PetscPythonInitialize(arg1, arg2)
    ccall((:PetscPythonInitialize, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}), arg1, arg2)
end

function PetscPythonFinalize()
    ccall((:PetscPythonFinalize, $petsc_library), PetscErrorCode, ())
end

function PetscPythonPrintError()
    ccall((:PetscPythonPrintError, $petsc_library), PetscErrorCode, ())
end

function PetscPythonMonitorSet(arg1, arg2)
    ccall((:PetscPythonMonitorSet, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}), arg1, arg2)
end

function PetscMonitorCompare(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscMonitorCompare, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

const PetscVoidFunction = Ptr{PetscVoidFn}

const PetscVoidStarFunction = Ptr{Ptr{PetscVoidFn}}

# typedef PetscErrorCode ( PetscErrorCodeFn ) ( void )
const PetscErrorCodeFn = Cvoid

const PetscErrorCodeFunction = Ptr{PetscErrorCodeFn}

function PetscObjectDestroy(arg1)
    ccall((:PetscObjectDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscObject},), arg1)
end

function PetscObjectGetComm(arg1, arg2)
    ccall((:PetscObjectGetComm, $petsc_library), PetscErrorCode, (PetscObject, Ptr{MPI_Comm}), arg1, arg2)
end

function PetscObjectGetClassId(arg1, arg2)
    ccall((:PetscObjectGetClassId, $petsc_library), PetscErrorCode, (PetscObject, Ptr{PetscClassId}), arg1, arg2)
end

function PetscObjectGetClassName(arg1, arg2)
    ccall((:PetscObjectGetClassName, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscObjectGetType(arg1, arg2)
    ccall((:PetscObjectGetType, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscObjectSetName(arg1, arg2)
    ccall((:PetscObjectSetName, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}), arg1, arg2)
end

function PetscObjectGetName(arg1, arg2)
    ccall((:PetscObjectGetName, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscObjectSetTabLevel(arg1, arg2)
    ccall((:PetscObjectSetTabLevel, $petsc_library), PetscErrorCode, (PetscObject, PetscInt), arg1, arg2)
end

function PetscObjectGetTabLevel(arg1, arg2)
    ccall((:PetscObjectGetTabLevel, $petsc_library), PetscErrorCode, (PetscObject, Ptr{PetscInt}), arg1, arg2)
end

function PetscObjectIncrementTabLevel(arg1, arg2, arg3)
    ccall((:PetscObjectIncrementTabLevel, $petsc_library), PetscErrorCode, (PetscObject, PetscObject, PetscInt), arg1, arg2, arg3)
end

function PetscObjectReference(arg1)
    ccall((:PetscObjectReference, $petsc_library), PetscErrorCode, (PetscObject,), arg1)
end

function PetscObjectGetReference(arg1, arg2)
    ccall((:PetscObjectGetReference, $petsc_library), PetscErrorCode, (PetscObject, Ptr{PetscInt}), arg1, arg2)
end

function PetscObjectDereference(arg1)
    ccall((:PetscObjectDereference, $petsc_library), PetscErrorCode, (PetscObject,), arg1)
end

function PetscObjectGetNewTag(arg1, arg2)
    ccall((:PetscObjectGetNewTag, $petsc_library), PetscErrorCode, (PetscObject, Ptr{PetscMPIInt}), arg1, arg2)
end

function PetscObjectCompose(arg1, arg2, arg3)
    ccall((:PetscObjectCompose, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}, PetscObject), arg1, arg2, arg3)
end

function PetscObjectRemoveReference(arg1, arg2)
    ccall((:PetscObjectRemoveReference, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}), arg1, arg2)
end

function PetscObjectQuery(arg1, arg2, arg3)
    ccall((:PetscObjectQuery, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}, Ptr{PetscObject}), arg1, arg2, arg3)
end

function PetscObjectSetFromOptions(arg1)
    ccall((:PetscObjectSetFromOptions, $petsc_library), PetscErrorCode, (PetscObject,), arg1)
end

function PetscObjectSetUp(arg1)
    ccall((:PetscObjectSetUp, $petsc_library), PetscErrorCode, (PetscObject,), arg1)
end

function PetscObjectSetPrintedOptions(arg1)
    ccall((:PetscObjectSetPrintedOptions, $petsc_library), PetscErrorCode, (PetscObject,), arg1)
end

function PetscObjectInheritPrintedOptions(arg1, arg2)
    ccall((:PetscObjectInheritPrintedOptions, $petsc_library), PetscErrorCode, (PetscObject, PetscObject), arg1, arg2)
end

function PetscCommGetNewTag(arg1, arg2)
    ccall((:PetscCommGetNewTag, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscMPIInt}), arg1, arg2)
end

@enum PetscOptionSource::UInt32 begin
    PETSC_OPT_CODE = 0
    PETSC_OPT_COMMAND_LINE = 1
    PETSC_OPT_FILE = 2
    PETSC_OPT_ENVIRONMENT = 3
    NUM_PETSC_OPT_SOURCE = 4
end

function PetscOptionsCreate(arg1)
    ccall((:PetscOptionsCreate, $petsc_library), PetscErrorCode, (Ptr{PetscOptions},), arg1)
end

function PetscOptionsPush(arg1)
    ccall((:PetscOptionsPush, $petsc_library), PetscErrorCode, (PetscOptions,), arg1)
end

function PetscOptionsPop()
    ccall((:PetscOptionsPop, $petsc_library), PetscErrorCode, ())
end

function PetscOptionsDestroy(arg1)
    ccall((:PetscOptionsDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscOptions},), arg1)
end

function PetscOptionsCreateDefault()
    ccall((:PetscOptionsCreateDefault, $petsc_library), PetscErrorCode, ())
end

function PetscOptionsDestroyDefault()
    ccall((:PetscOptionsDestroyDefault, $petsc_library), PetscErrorCode, ())
end

function PetscOptionsHasHelp(arg1, arg2)
    ccall((:PetscOptionsHasHelp, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{PetscBool}), arg1, arg2)
end

function PetscOptionsHasName(arg1, arg2, arg3, arg4)
    ccall((:PetscOptionsHasName, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function PetscOptionsGetInt(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscOptionsGetInt, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscOptionsGetEnum(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscOptionsGetEnum, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Cchar}}, Ptr{PetscEnum}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscOptionsGetEList(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscOptionsGetEList, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Cchar}}, PetscInt, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscOptionsGetReal(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscOptionsGetReal, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscReal}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscOptionsGetScalar(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscOptionsGetScalar, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscScalar}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscOptionsGetString(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscOptionsGetString, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Csize_t, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscOptionsGetBoolArray(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscOptionsGetBoolArray, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscBool}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscOptionsGetEnumArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscOptionsGetEnumArray, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Cchar}}, Ptr{PetscEnum}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscOptionsGetIntArray(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscOptionsGetIntArray, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscOptionsGetRealArray(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscOptionsGetRealArray, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscReal}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscOptionsGetScalarArray(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscOptionsGetScalarArray, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscScalar}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscOptionsGetStringArray(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscOptionsGetStringArray, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Cchar}}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscOptionsValidKey(arg1, arg2)
    ccall((:PetscOptionsValidKey, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2)
end

function PetscOptionsSetAlias(arg1, arg2, arg3)
    ccall((:PetscOptionsSetAlias, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscOptionsSetValue(arg1, arg2, arg3)
    ccall((:PetscOptionsSetValue, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscOptionsClearValue(arg1, arg2)
    ccall((:PetscOptionsClearValue, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}), arg1, arg2)
end

function PetscOptionsFindPair(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscOptionsFindPair, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Cchar}}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscOptionsGetAll(arg1, arg2)
    ccall((:PetscOptionsGetAll, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscOptionsAllUsed(arg1, arg2)
    ccall((:PetscOptionsAllUsed, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{PetscInt}), arg1, arg2)
end

function PetscOptionsUsed(arg1, arg2, arg3)
    ccall((:PetscOptionsUsed, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscOptionsLeft(arg1)
    ccall((:PetscOptionsLeft, $petsc_library), PetscErrorCode, (PetscOptions,), arg1)
end

function PetscOptionsLeftGet(arg1, arg2, arg3, arg4)
    ccall((:PetscOptionsLeftGet, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cchar}}}, Ptr{Ptr{Ptr{Cchar}}}), arg1, arg2, arg3, arg4)
end

function PetscOptionsLeftRestore(arg1, arg2, arg3, arg4)
    ccall((:PetscOptionsLeftRestore, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cchar}}}, Ptr{Ptr{Ptr{Cchar}}}), arg1, arg2, arg3, arg4)
end

function PetscOptionsView(arg1, arg2)
    ccall((:PetscOptionsView, $petsc_library), PetscErrorCode, (PetscOptions, PetscViewer), arg1, arg2)
end

function PetscOptionsReject(arg1, arg2, arg3, arg4)
    ccall((:PetscOptionsReject, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4)
end

function PetscOptionsInsert(arg1, arg2, arg3, arg4)
    ccall((:PetscOptionsInsert, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cint}, Ptr{Ptr{Ptr{Cchar}}}, Ptr{Cchar}), arg1, arg2, arg3, arg4)
end

function PetscOptionsInsertFile(arg1, arg2, arg3, arg4)
    ccall((:PetscOptionsInsertFile, $petsc_library), PetscErrorCode, (MPI_Comm, PetscOptions, Ptr{Cchar}, PetscBool), arg1, arg2, arg3, arg4)
end

function PetscOptionsInsertFileYAML(arg1, arg2, arg3, arg4)
    ccall((:PetscOptionsInsertFileYAML, $petsc_library), PetscErrorCode, (MPI_Comm, PetscOptions, Ptr{Cchar}, PetscBool), arg1, arg2, arg3, arg4)
end

function PetscOptionsInsertString(arg1, arg2)
    ccall((:PetscOptionsInsertString, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}), arg1, arg2)
end

function PetscOptionsInsertStringYAML(arg1, arg2)
    ccall((:PetscOptionsInsertStringYAML, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}), arg1, arg2)
end

function PetscOptionsInsertArgs(arg1, arg2, arg3)
    ccall((:PetscOptionsInsertArgs, $petsc_library), PetscErrorCode, (PetscOptions, Cint, Ptr{Ptr{Cchar}}), arg1, arg2, arg3)
end

function PetscOptionsClear(arg1)
    ccall((:PetscOptionsClear, $petsc_library), PetscErrorCode, (PetscOptions,), arg1)
end

function PetscOptionsPrefixPush(arg1, arg2)
    ccall((:PetscOptionsPrefixPush, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}), arg1, arg2)
end

function PetscOptionsPrefixPop(arg1)
    ccall((:PetscOptionsPrefixPop, $petsc_library), PetscErrorCode, (PetscOptions,), arg1)
end

function PetscOptionsGetenv(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscOptionsGetenv, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Csize_t, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscOptionsStringToBool(arg1, arg2)
    ccall((:PetscOptionsStringToBool, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2)
end

function PetscOptionsStringToInt(arg1, arg2)
    ccall((:PetscOptionsStringToInt, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscInt}), arg1, arg2)
end

function PetscOptionsStringToReal(arg1, arg2)
    ccall((:PetscOptionsStringToReal, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscReal}), arg1, arg2)
end

function PetscOptionsStringToScalar(arg1, arg2)
    ccall((:PetscOptionsStringToScalar, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscScalar}), arg1, arg2)
end

function PetscOptionsMonitorSet(arg1, arg2, arg3)
    ccall((:PetscOptionsMonitorSet, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PetscOptionsMonitorDefault(arg1, arg2, arg3, arg4)
    ccall((:PetscOptionsMonitorDefault, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, PetscOptionSource, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscObjectSetOptions(arg1, arg2)
    ccall((:PetscObjectSetOptions, $petsc_library), PetscErrorCode, (PetscObject, PetscOptions), arg1, arg2)
end

function PetscObjectGetOptions(arg1, arg2)
    ccall((:PetscObjectGetOptions, $petsc_library), PetscErrorCode, (PetscObject, Ptr{PetscOptions}), arg1, arg2)
end

@enum PetscOptionType::UInt32 begin
    OPTION_INT = 0
    OPTION_BOOL = 1
    OPTION_REAL = 2
    OPTION_FLIST = 3
    OPTION_STRING = 4
    OPTION_REAL_ARRAY = 5
    OPTION_SCALAR_ARRAY = 6
    OPTION_HEAD = 7
    OPTION_INT_ARRAY = 8
    OPTION_ELIST = 9
    OPTION_BOOL_ARRAY = 10
    OPTION_STRING_ARRAY = 11
end

function PetscOptionsSAWsDestroy()
    ccall((:PetscOptionsSAWsDestroy, $petsc_library), PetscErrorCode, ())
end

function PetscObjectAddOptionsHandler(arg1, arg2, arg3, arg4)
    ccall((:PetscObjectAddOptionsHandler, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscObjectDestroyOptionsHandlers(arg1)
    ccall((:PetscObjectDestroyOptionsHandlers, $petsc_library), PetscErrorCode, (PetscObject,), arg1)
end

function PetscOptionsLeftError()
    ccall((:PetscOptionsLeftError, $petsc_library), PetscErrorCode, ())
end

function PetscMallocTraceSet(arg1, arg2, arg3)
    ccall((:PetscMallocTraceSet, $petsc_library), PetscErrorCode, (PetscViewer, PetscBool, PetscLogDouble), arg1, arg2, arg3)
end

function PetscMallocTraceGet(arg1)
    ccall((:PetscMallocTraceGet, $petsc_library), PetscErrorCode, (Ptr{PetscBool},), arg1)
end

function PetscObjectsListGetGlobalNumbering(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscObjectsListGetGlobalNumbering, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscObject}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function PetscMemoryView(arg1, arg2)
    ccall((:PetscMemoryView, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cchar}), arg1, arg2)
end

function PetscObjectPrintClassNamePrefixType(arg1, arg2)
    ccall((:PetscObjectPrintClassNamePrefixType, $petsc_library), PetscErrorCode, (PetscObject, PetscViewer), arg1, arg2)
end

function PetscObjectView(arg1, arg2)
    ccall((:PetscObjectView, $petsc_library), PetscErrorCode, (PetscObject, PetscViewer), arg1, arg2)
end

function PetscObjectAppendOptionsPrefix(arg1, arg2)
    ccall((:PetscObjectAppendOptionsPrefix, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}), arg1, arg2)
end

function PetscObjectPrependOptionsPrefix(arg1, arg2)
    ccall((:PetscObjectPrependOptionsPrefix, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}), arg1, arg2)
end

function PetscObjectGetOptionsPrefix(arg1, arg2)
    ccall((:PetscObjectGetOptionsPrefix, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscObjectChangeTypeName(arg1, arg2)
    ccall((:PetscObjectChangeTypeName, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}), arg1, arg2)
end

function PetscObjectRegisterDestroy(arg1)
    ccall((:PetscObjectRegisterDestroy, $petsc_library), PetscErrorCode, (PetscObject,), arg1)
end

function PetscObjectRegisterDestroyAll()
    ccall((:PetscObjectRegisterDestroyAll, $petsc_library), PetscErrorCode, ())
end

function PetscObjectViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscObjectViewFromOptions, $petsc_library), PetscErrorCode, (PetscObject, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscObjectName(arg1)
    ccall((:PetscObjectName, $petsc_library), PetscErrorCode, (PetscObject,), arg1)
end

function PetscObjectTypeCompare(arg1, arg2, arg3)
    ccall((:PetscObjectTypeCompare, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscObjectObjectTypeCompare(arg1, arg2, arg3)
    ccall((:PetscObjectObjectTypeCompare, $petsc_library), PetscErrorCode, (PetscObject, PetscObject, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscObjectBaseTypeCompare(arg1, arg2, arg3)
    ccall((:PetscObjectBaseTypeCompare, $petsc_library), PetscErrorCode, (PetscObject, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscRegisterFinalize(arg1)
    ccall((:PetscRegisterFinalize, $petsc_library), PetscErrorCode, (Ptr{Cvoid},), arg1)
end

function PetscRegisterFinalizeAll()
    ccall((:PetscRegisterFinalizeAll, $petsc_library), PetscErrorCode, ())
end

function PetscDLOpen(arg1, arg2, arg3)
    ccall((:PetscDLOpen, $petsc_library), PetscErrorCode, (Ptr{Cchar}, PetscDLMode, Ptr{PetscDLHandle}), arg1, arg2, arg3)
end

function PetscDLClose(arg1)
    ccall((:PetscDLClose, $petsc_library), PetscErrorCode, (Ptr{PetscDLHandle},), arg1)
end

function PetscDLSym(arg1, arg2, arg3)
    ccall((:PetscDLSym, $petsc_library), PetscErrorCode, (PetscDLHandle, Ptr{Cchar}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function PetscDLAddr(arg1, arg2)
    ccall((:PetscDLAddr, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscDemangleSymbol(arg1, arg2)
    ccall((:PetscDemangleSymbol, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscMallocGetStack(arg1, arg2)
    ccall((:PetscMallocGetStack, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Ptr{PetscStack}}), arg1, arg2)
end

function PetscObjectsDump(arg1, arg2)
    ccall((:PetscObjectsDump, $petsc_library), PetscErrorCode, (Ptr{Libc.FILE}, PetscBool), arg1, arg2)
end

function PetscObjectsView(arg1)
    ccall((:PetscObjectsView, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscObjectsGetObject(arg1, arg2, arg3)
    ccall((:PetscObjectsGetObject, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscObject}, Ptr{Ptr{Cchar}}), arg1, arg2, arg3)
end

function PetscObjectListDestroy(arg1)
    ccall((:PetscObjectListDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscObjectList},), arg1)
end

function PetscObjectListFind(arg1, arg2, arg3)
    ccall((:PetscObjectListFind, $petsc_library), PetscErrorCode, (PetscObjectList, Ptr{Cchar}, Ptr{PetscObject}), arg1, arg2, arg3)
end

function PetscObjectListReverseFind(arg1, arg2, arg3, arg4)
    ccall((:PetscObjectListReverseFind, $petsc_library), PetscErrorCode, (PetscObjectList, PetscObject, Ptr{Ptr{Cchar}}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function PetscObjectListAdd(arg1, arg2, arg3)
    ccall((:PetscObjectListAdd, $petsc_library), PetscErrorCode, (Ptr{PetscObjectList}, Ptr{Cchar}, PetscObject), arg1, arg2, arg3)
end

function PetscObjectListRemoveReference(arg1, arg2)
    ccall((:PetscObjectListRemoveReference, $petsc_library), PetscErrorCode, (Ptr{PetscObjectList}, Ptr{Cchar}), arg1, arg2)
end

function PetscObjectListDuplicate(arg1, arg2)
    ccall((:PetscObjectListDuplicate, $petsc_library), PetscErrorCode, (PetscObjectList, Ptr{PetscObjectList}), arg1, arg2)
end

function PetscFunctionListDestroy(arg1)
    ccall((:PetscFunctionListDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscFunctionList},), arg1)
end

function PetscFunctionListClear(arg1)
    ccall((:PetscFunctionListClear, $petsc_library), PetscErrorCode, (PetscFunctionList,), arg1)
end

function PetscFunctionListPrintTypes(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscFunctionListPrintTypes, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Libc.FILE}, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, PetscFunctionList, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscFunctionListDuplicate(arg1, arg2)
    ccall((:PetscFunctionListDuplicate, $petsc_library), PetscErrorCode, (PetscFunctionList, Ptr{PetscFunctionList}), arg1, arg2)
end

function PetscFunctionListView(arg1, arg2)
    ccall((:PetscFunctionListView, $petsc_library), PetscErrorCode, (PetscFunctionList, PetscViewer), arg1, arg2)
end

function PetscFunctionListGet(arg1, arg2, arg3)
    ccall((:PetscFunctionListGet, $petsc_library), PetscErrorCode, (PetscFunctionList, Ptr{Ptr{Ptr{Cchar}}}, Ptr{Cint}), arg1, arg2, arg3)
end

function PetscFunctionListPrintNonEmpty(arg1)
    ccall((:PetscFunctionListPrintNonEmpty, $petsc_library), PetscErrorCode, (PetscFunctionList,), arg1)
end

function PetscFunctionListPrintAll()
    ccall((:PetscFunctionListPrintAll, $petsc_library), PetscErrorCode, ())
end

function PetscDLLibraryAppend(arg1, arg2, arg3)
    ccall((:PetscDLLibraryAppend, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscDLLibrary}, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscDLLibraryPrepend(arg1, arg2, arg3)
    ccall((:PetscDLLibraryPrepend, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscDLLibrary}, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscDLLibrarySym(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDLLibrarySym, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscDLLibrary}, Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDLLibraryPrintPath(arg1)
    ccall((:PetscDLLibraryPrintPath, $petsc_library), PetscErrorCode, (PetscDLLibrary,), arg1)
end

function PetscDLLibraryRetrieve(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDLLibraryRetrieve, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Csize_t, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDLLibraryOpen(arg1, arg2, arg3)
    ccall((:PetscDLLibraryOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{PetscDLLibrary}), arg1, arg2, arg3)
end

function PetscDLLibraryClose(arg1)
    ccall((:PetscDLLibraryClose, $petsc_library), PetscErrorCode, (PetscDLLibrary,), arg1)
end

function PetscSplitOwnership(arg1, arg2, arg3)
    ccall((:PetscSplitOwnership, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSplitOwnershipBlock(arg1, arg2, arg3, arg4)
    ccall((:PetscSplitOwnershipBlock, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSplitOwnershipEqual(arg1, arg2, arg3)
    ccall((:PetscSplitOwnershipEqual, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSequentialPhaseBegin(arg1, arg2)
    ccall((:PetscSequentialPhaseBegin, $petsc_library), PetscErrorCode, (MPI_Comm, PetscMPIInt), arg1, arg2)
end

function PetscSequentialPhaseEnd(arg1, arg2)
    ccall((:PetscSequentialPhaseEnd, $petsc_library), PetscErrorCode, (MPI_Comm, PetscMPIInt), arg1, arg2)
end

function PetscMPIDump(arg1)
    ccall((:PetscMPIDump, $petsc_library), PetscErrorCode, (Ptr{Libc.FILE},), arg1)
end

function PetscGlobalMinMaxInt(arg1, arg2, arg3)
    ccall((:PetscGlobalMinMaxInt, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscGlobalMinMaxReal(arg1, arg2, arg3)
    ccall((:PetscGlobalMinMaxReal, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscGetCPUTime(arg1)
    ccall((:PetscGetCPUTime, $petsc_library), PetscErrorCode, (Ptr{PetscLogDouble},), arg1)
end

function PetscTime(v)
    ccall((:PetscTime, $petsc_library), PetscErrorCode, (Ptr{PetscLogDouble},), v)
end

function PetscTimeSubtract(v)
    ccall((:PetscTimeSubtract, $petsc_library), PetscErrorCode, (Ptr{PetscLogDouble},), v)
end

function PetscTimeAdd(v)
    ccall((:PetscTimeAdd, $petsc_library), PetscErrorCode, (Ptr{PetscLogDouble},), v)
end

function PetscStrToArray(arg1, arg2, arg3, arg4)
    ccall((:PetscStrToArray, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Cchar, Ptr{Cint}, Ptr{Ptr{Ptr{Cchar}}}), arg1, arg2, arg3, arg4)
end

function PetscStrToArrayDestroy(arg1, arg2)
    ccall((:PetscStrToArrayDestroy, $petsc_library), PetscErrorCode, (Cint, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscStrcasecmp(arg1, arg2, arg3)
    ccall((:PetscStrcasecmp, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscStrendswithwhich(arg1, arg2, arg3)
    ccall((:PetscStrendswithwhich, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Ptr{Cchar}}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscStrArrayallocpy(arg1, arg2)
    ccall((:PetscStrArrayallocpy, $petsc_library), PetscErrorCode, (Ptr{Ptr{Cchar}}, Ptr{Ptr{Ptr{Cchar}}}), arg1, arg2)
end

function PetscStrArrayDestroy(arg1)
    ccall((:PetscStrArrayDestroy, $petsc_library), PetscErrorCode, (Ptr{Ptr{Ptr{Cchar}}},), arg1)
end

function PetscStrNArrayallocpy(arg1, arg2, arg3)
    ccall((:PetscStrNArrayallocpy, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Ptr{Cchar}}, Ptr{Ptr{Ptr{Cchar}}}), arg1, arg2, arg3)
end

function PetscStrNArrayDestroy(arg1, arg2)
    ccall((:PetscStrNArrayDestroy, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Ptr{Ptr{Cchar}}}), arg1, arg2)
end

function PetscStrreplace(arg1, arg2, arg3, arg4)
    ccall((:PetscStrreplace, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Csize_t), arg1, arg2, arg3, arg4)
end

function PetscTokenCreate(arg1, arg2, arg3)
    ccall((:PetscTokenCreate, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Cchar, Ptr{PetscToken}), arg1, arg2, arg3)
end

function PetscTokenFind(arg1, arg2)
    ccall((:PetscTokenFind, $petsc_library), PetscErrorCode, (PetscToken, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscTokenDestroy(arg1)
    ccall((:PetscTokenDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscToken},), arg1)
end

function PetscStrInList(arg1, arg2, arg3, arg4)
    ccall((:PetscStrInList, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Cchar, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function PetscBasename(arg1)
    ccall((:PetscBasename, $petsc_library), Ptr{Cchar}, (Ptr{Cchar},), arg1)
end

function PetscEListFind(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscEListFind, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Ptr{Cchar}}, Ptr{Cchar}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscEnumFind(arg1, arg2, arg3, arg4)
    ccall((:PetscEnumFind, $petsc_library), PetscErrorCode, (Ptr{Ptr{Cchar}}, Ptr{Cchar}, Ptr{PetscEnum}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function PetscStrcat(arg1, arg2)
    ccall((:PetscStrcat, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}), arg1, arg2)
end

function PetscStrcpy(arg1, arg2)
    ccall((:PetscStrcpy, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}), arg1, arg2)
end

function PetscStrtolower(a)
    ccall((:PetscStrtolower, $petsc_library), PetscErrorCode, (Ptr{Cchar},), a)
end

function PetscStrtoupper(a)
    ccall((:PetscStrtoupper, $petsc_library), PetscErrorCode, (Ptr{Cchar},), a)
end

function PetscStrlen(s, len)
    ccall((:PetscStrlen, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Csize_t}), s, len)
end

function PetscStrallocpy(s, t)
    ccall((:PetscStrallocpy, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Ptr{Cchar}}), s, t)
end

function PetscStrcmpNoError(a, b, flg)
    ccall((:PetscStrcmpNoError, $petsc_library), Cvoid, (Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscBool}), a, b, flg)
end

function PetscStrcmp(a, b, flg)
    ccall((:PetscStrcmp, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscBool}), a, b, flg)
end

function PetscStrncpy(s, t, n)
    ccall((:PetscStrncpy, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Csize_t), s, t, n)
end

function PetscStrlcat(s, t, n)
    ccall((:PetscStrlcat, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Csize_t), s, t, n)
end

function PetscStrncmp(a, b, n, t)
    ccall((:PetscStrncmp, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Csize_t, Ptr{PetscBool}), a, b, n, t)
end

function PetscStrrstr(a, b, tmp)
    ccall((:PetscStrrstr, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Cchar}}), a, b, tmp)
end

function PetscStrstr(haystack, needle, tmp)
    ccall((:PetscStrstr, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Cchar}}), haystack, needle, tmp)
end

function PetscStrgrt(a, b, t)
    ccall((:PetscStrgrt, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscBool}), a, b, t)
end

function PetscStrchr(a, b, c)
    ccall((:PetscStrchr, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Cchar, Ptr{Ptr{Cchar}}), a, b, c)
end

function PetscStrrchr(a, b, c)
    ccall((:PetscStrrchr, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Cchar, Ptr{Ptr{Cchar}}), a, b, c)
end

function PetscStrendswith(a, b, flg)
    ccall((:PetscStrendswith, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscBool}), a, b, flg)
end

function PetscStrbeginswith(a, b, flg)
    ccall((:PetscStrbeginswith, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscBool}), a, b, flg)
end

function PetscBTIndex_Internal(index)
    ccall((:PetscBTIndex_Internal, $petsc_library), Csize_t, (PetscInt,), index)
end

function PetscBTMask_Internal(index)
    ccall((:PetscBTMask_Internal, $petsc_library), Cchar, (PetscInt,), index)
end

function PetscBTLength(m)
    ccall((:PetscBTLength, $petsc_library), Csize_t, (PetscInt,), m)
end

function PetscBTMemzero(m, array)
    ccall((:PetscBTMemzero, $petsc_library), PetscErrorCode, (PetscInt, PetscBT), m, array)
end

function PetscBTDestroy(array)
    ccall((:PetscBTDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscBT},), array)
end

function PetscBTCreate(m, array)
    ccall((:PetscBTCreate, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscBT}), m, array)
end

function PetscBTSet(array, index)
    ccall((:PetscBTSet, $petsc_library), PetscErrorCode, (PetscBT, PetscInt), array, index)
end

function PetscBTNegate(array, index)
    ccall((:PetscBTNegate, $petsc_library), PetscErrorCode, (PetscBT, PetscInt), array, index)
end

function PetscBTClear(array, index)
    ccall((:PetscBTClear, $petsc_library), PetscErrorCode, (PetscBT, PetscInt), array, index)
end

function PetscBTLookupSet(array, index)
    ccall((:PetscBTLookupSet, $petsc_library), Cchar, (PetscBT, PetscInt), array, index)
end

function PetscBTLookupClear(array, index)
    ccall((:PetscBTLookupClear, $petsc_library), Cchar, (PetscBT, PetscInt), array, index)
end

function PetscBTView(arg1, arg2, arg3)
    ccall((:PetscBTView, $petsc_library), PetscErrorCode, (PetscInt, PetscBT, PetscViewer), arg1, arg2, arg3)
end

struct PetscEventPerfInfo
    id::Cint
    active::PetscBool
    visible::PetscBool
    depth::Cint
    count::Cint
    flops::PetscLogDouble
    flops2::PetscLogDouble
    flopsTmp::PetscLogDouble
    time::PetscLogDouble
    time2::PetscLogDouble
    timeTmp::PetscLogDouble
    syncTime::PetscLogDouble
    dof::NTuple{8, PetscLogDouble}
    errors::NTuple{8, PetscLogDouble}
    numMessages::PetscLogDouble
    messageLength::PetscLogDouble
    numReductions::PetscLogDouble
    memIncrease::PetscLogDouble
    mallocIncrease::PetscLogDouble
    mallocSpace::PetscLogDouble
    mallocIncreaseEvent::PetscLogDouble
end

mutable struct _n_PetscIntStack end

const PetscIntStack = Ptr{_n_PetscIntStack}

const PetscLogClass = Cint

mutable struct _p_PetscLogHandler end

const PetscLogHandler = Ptr{_p_PetscLogHandler}

const PetscLogHandlerType = Ptr{Cchar}

mutable struct _n_PetscLogRegistry end

const PetscLogRegistry = Ptr{_n_PetscLogRegistry}

mutable struct _n_PetscLogState
    registry::PetscLogRegistry
    active::PetscBT
    stage_stack::PetscIntStack
    current_stage::Cint
    bt_num_stages::Cint
    bt_num_events::Cint
    refct::Cint
    _n_PetscLogState() = new()
end

const PetscLogState = Ptr{_n_PetscLogState}

mutable struct PetscLogEventInfo
    name::Ptr{Cchar}
    classid::PetscClassId
    collective::PetscBool
    PetscLogEventInfo() = new()
end

mutable struct PetscLogClassInfo
    name::Ptr{Cchar}
    classid::PetscClassId
    PetscLogClassInfo() = new()
end

mutable struct _PetscLogStageInfo
    name::Ptr{Cchar}
    _PetscLogStageInfo() = new()
end

const PetscLogStageInfo = _PetscLogStageInfo

@enum PetscInfoCommFlag::Int32 begin
    PETSC_INFO_COMM_ALL = -1
    PETSC_INFO_COMM_NO_SELF = 0
    PETSC_INFO_COMM_ONLY_SELF = 1
end

function PetscInfoDeactivateClass(arg1)
    ccall((:PetscInfoDeactivateClass, $petsc_library), PetscErrorCode, (PetscClassId,), arg1)
end

function PetscInfoActivateClass(arg1)
    ccall((:PetscInfoActivateClass, $petsc_library), PetscErrorCode, (PetscClassId,), arg1)
end

function PetscInfoEnabled(arg1, arg2)
    ccall((:PetscInfoEnabled, $petsc_library), PetscErrorCode, (PetscClassId, Ptr{PetscBool}), arg1, arg2)
end

function PetscInfoAllow(arg1)
    ccall((:PetscInfoAllow, $petsc_library), PetscErrorCode, (PetscBool,), arg1)
end

function PetscInfoSetFile(arg1, arg2)
    ccall((:PetscInfoSetFile, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}), arg1, arg2)
end

function PetscInfoGetFile(arg1, arg2)
    ccall((:PetscInfoGetFile, $petsc_library), PetscErrorCode, (Ptr{Ptr{Cchar}}, Ptr{Ptr{Libc.FILE}}), arg1, arg2)
end

function PetscInfoSetClasses(arg1, arg2, arg3)
    ccall((:PetscInfoSetClasses, $petsc_library), PetscErrorCode, (PetscBool, PetscInt, Ptr{Ptr{Cchar}}), arg1, arg2, arg3)
end

function PetscInfoGetClass(arg1, arg2)
    ccall((:PetscInfoGetClass, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2)
end

function PetscInfoGetInfo(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscInfoGetInfo, $petsc_library), PetscErrorCode, (Ptr{PetscBool}, Ptr{PetscBool}, Ptr{PetscBool}, Ptr{PetscBool}, Ptr{PetscInfoCommFlag}), arg1, arg2, arg3, arg4, arg5)
end

function PetscInfoProcessClass(arg1, arg2, arg3)
    ccall((:PetscInfoProcessClass, $petsc_library), PetscErrorCode, (Ptr{Cchar}, PetscInt, Ptr{PetscClassId}), arg1, arg2, arg3)
end

function PetscInfoSetFilterCommSelf(arg1)
    ccall((:PetscInfoSetFilterCommSelf, $petsc_library), PetscErrorCode, (PetscInfoCommFlag,), arg1)
end

function PetscInfoSetFromOptions(arg1)
    ccall((:PetscInfoSetFromOptions, $petsc_library), PetscErrorCode, (PetscOptions,), arg1)
end

function PetscInfoDestroy()
    ccall((:PetscInfoDestroy, $petsc_library), PetscErrorCode, ())
end

function PetscIntStackCreate(arg1)
    ccall((:PetscIntStackCreate, $petsc_library), PetscErrorCode, (Ptr{PetscIntStack},), arg1)
end

function PetscIntStackDestroy(arg1)
    ccall((:PetscIntStackDestroy, $petsc_library), PetscErrorCode, (PetscIntStack,), arg1)
end

function PetscIntStackPush(arg1, arg2)
    ccall((:PetscIntStackPush, $petsc_library), PetscErrorCode, (PetscIntStack, Cint), arg1, arg2)
end

function PetscIntStackPop(arg1, arg2)
    ccall((:PetscIntStackPop, $petsc_library), PetscErrorCode, (PetscIntStack, Ptr{Cint}), arg1, arg2)
end

function PetscIntStackTop(arg1, arg2)
    ccall((:PetscIntStackTop, $petsc_library), PetscErrorCode, (PetscIntStack, Ptr{Cint}), arg1, arg2)
end

function PetscIntStackEmpty(arg1, arg2)
    ccall((:PetscIntStackEmpty, $petsc_library), PetscErrorCode, (PetscIntStack, Ptr{PetscBool}), arg1, arg2)
end

function PetscLogStateCreate(arg1)
    ccall((:PetscLogStateCreate, $petsc_library), PetscErrorCode, (Ptr{PetscLogState},), arg1)
end

function PetscLogStateDestroy(arg1)
    ccall((:PetscLogStateDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscLogState},), arg1)
end

function PetscLogStateGetRegistry(arg1, arg2)
    ccall((:PetscLogStateGetRegistry, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{PetscLogRegistry}), arg1, arg2)
end

function PetscLogStateClassRegister(arg1, arg2, arg3, arg4)
    ccall((:PetscLogStateClassRegister, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{Cchar}, PetscClassId, Ptr{PetscLogStage}), arg1, arg2, arg3, arg4)
end

function PetscLogStateClassSetActive(arg1, arg2, arg3, arg4)
    ccall((:PetscLogStateClassSetActive, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogStage, PetscClassId, PetscBool), arg1, arg2, arg3, arg4)
end

function PetscLogStateClassSetActiveAll(arg1, arg2, arg3)
    ccall((:PetscLogStateClassSetActiveAll, $petsc_library), PetscErrorCode, (PetscLogState, PetscClassId, PetscBool), arg1, arg2, arg3)
end

function PetscLogStateStageRegister(arg1, arg2, arg3)
    ccall((:PetscLogStateStageRegister, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{Cchar}, Ptr{PetscLogStage}), arg1, arg2, arg3)
end

function PetscLogStateStagePush(arg1, arg2)
    ccall((:PetscLogStateStagePush, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogStage), arg1, arg2)
end

function PetscLogStateStagePop(arg1)
    ccall((:PetscLogStateStagePop, $petsc_library), PetscErrorCode, (PetscLogState,), arg1)
end

function PetscLogStateStageSetActive(arg1, arg2, arg3)
    ccall((:PetscLogStateStageSetActive, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogStage, PetscBool), arg1, arg2, arg3)
end

function PetscLogStateStageGetActive(arg1, arg2, arg3)
    ccall((:PetscLogStateStageGetActive, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogStage, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscLogStateGetCurrentStage(arg1, arg2)
    ccall((:PetscLogStateGetCurrentStage, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{PetscLogStage}), arg1, arg2)
end

function PetscLogStateEventRegister(arg1, arg2, arg3, arg4)
    ccall((:PetscLogStateEventRegister, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{Cchar}, PetscClassId, Ptr{PetscLogEvent}), arg1, arg2, arg3, arg4)
end

function PetscLogStateEventSetCollective(arg1, arg2, arg3)
    ccall((:PetscLogStateEventSetCollective, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogEvent, PetscBool), arg1, arg2, arg3)
end

function PetscLogStateEventSetActive(arg1, arg2, arg3, arg4)
    ccall((:PetscLogStateEventSetActive, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogStage, PetscLogEvent, PetscBool), arg1, arg2, arg3, arg4)
end

function PetscLogStateEventSetActiveAll(arg1, arg2, arg3)
    ccall((:PetscLogStateEventSetActiveAll, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogEvent, PetscBool), arg1, arg2, arg3)
end

function PetscLogStateEventGetActive(arg1, arg2, arg3, arg4)
    ccall((:PetscLogStateEventGetActive, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogStage, PetscLogEvent, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function PetscLogStateGetEventFromName(arg1, arg2, arg3)
    ccall((:PetscLogStateGetEventFromName, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{Cchar}, Ptr{PetscLogEvent}), arg1, arg2, arg3)
end

function PetscLogStateGetStageFromName(arg1, arg2, arg3)
    ccall((:PetscLogStateGetStageFromName, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{Cchar}, Ptr{PetscLogStage}), arg1, arg2, arg3)
end

function PetscLogStateGetClassFromName(arg1, arg2, arg3)
    ccall((:PetscLogStateGetClassFromName, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{Cchar}, Ptr{PetscLogClass}), arg1, arg2, arg3)
end

function PetscLogStateGetClassFromClassId(arg1, arg2, arg3)
    ccall((:PetscLogStateGetClassFromClassId, $petsc_library), PetscErrorCode, (PetscLogState, PetscClassId, Ptr{PetscLogClass}), arg1, arg2, arg3)
end

function PetscLogStateGetNumEvents(arg1, arg2)
    ccall((:PetscLogStateGetNumEvents, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{PetscInt}), arg1, arg2)
end

function PetscLogStateGetNumStages(arg1, arg2)
    ccall((:PetscLogStateGetNumStages, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{PetscInt}), arg1, arg2)
end

function PetscLogStateGetNumClasses(arg1, arg2)
    ccall((:PetscLogStateGetNumClasses, $petsc_library), PetscErrorCode, (PetscLogState, Ptr{PetscInt}), arg1, arg2)
end

function PetscLogStateEventGetInfo(arg1, arg2, arg3)
    ccall((:PetscLogStateEventGetInfo, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogEvent, Ptr{PetscLogEventInfo}), arg1, arg2, arg3)
end

function PetscLogStateStageGetInfo(arg1, arg2, arg3)
    ccall((:PetscLogStateStageGetInfo, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogStage, Ptr{PetscLogStageInfo}), arg1, arg2, arg3)
end

function PetscLogStateClassGetInfo(arg1, arg2, arg3)
    ccall((:PetscLogStateClassGetInfo, $petsc_library), PetscErrorCode, (PetscLogState, PetscLogClass, Ptr{PetscLogClassInfo}), arg1, arg2, arg3)
end

function PetscLogHandlerRegister(arg1, arg2)
    ccall((:PetscLogHandlerRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscLogHandlerCreate(arg1, arg2)
    ccall((:PetscLogHandlerCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscLogHandler}), arg1, arg2)
end

function PetscLogHandlerSetType(arg1, arg2)
    ccall((:PetscLogHandlerSetType, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogHandlerType), arg1, arg2)
end

function PetscLogHandlerGetType(arg1, arg2)
    ccall((:PetscLogHandlerGetType, $petsc_library), PetscErrorCode, (PetscLogHandler, Ptr{PetscLogHandlerType}), arg1, arg2)
end

function PetscLogHandlerDestroy(arg1)
    ccall((:PetscLogHandlerDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscLogHandler},), arg1)
end

function PetscLogHandlerSetState(arg1, arg2)
    ccall((:PetscLogHandlerSetState, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogState), arg1, arg2)
end

function PetscLogHandlerGetState(arg1, arg2)
    ccall((:PetscLogHandlerGetState, $petsc_library), PetscErrorCode, (PetscLogHandler, Ptr{PetscLogState}), arg1, arg2)
end

function PetscLogHandlerEventBegin(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscLogHandlerEventBegin, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogEvent, PetscObject, PetscObject, PetscObject, PetscObject), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscLogHandlerEventEnd(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscLogHandlerEventEnd, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogEvent, PetscObject, PetscObject, PetscObject, PetscObject), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscLogHandlerEventSync(arg1, arg2, arg3)
    ccall((:PetscLogHandlerEventSync, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogEvent, MPI_Comm), arg1, arg2, arg3)
end

function PetscLogHandlerObjectCreate(arg1, arg2)
    ccall((:PetscLogHandlerObjectCreate, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscObject), arg1, arg2)
end

function PetscLogHandlerObjectDestroy(arg1, arg2)
    ccall((:PetscLogHandlerObjectDestroy, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscObject), arg1, arg2)
end

function PetscLogHandlerStagePush(arg1, arg2)
    ccall((:PetscLogHandlerStagePush, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogStage), arg1, arg2)
end

function PetscLogHandlerStagePop(arg1, arg2)
    ccall((:PetscLogHandlerStagePop, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogStage), arg1, arg2)
end

function PetscLogHandlerView(arg1, arg2)
    ccall((:PetscLogHandlerView, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscViewer), arg1, arg2)
end

function PetscLogHandlerGetEventPerfInfo(arg1, arg2, arg3, arg4)
    ccall((:PetscLogHandlerGetEventPerfInfo, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogStage, PetscLogEvent, Ptr{Ptr{PetscEventPerfInfo}}), arg1, arg2, arg3, arg4)
end

function PetscLogHandlerGetStagePerfInfo(arg1, arg2, arg3)
    ccall((:PetscLogHandlerGetStagePerfInfo, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogStage, Ptr{Ptr{PetscEventPerfInfo}}), arg1, arg2, arg3)
end

function PetscLogHandlerSetLogActions(arg1, arg2)
    ccall((:PetscLogHandlerSetLogActions, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscBool), arg1, arg2)
end

function PetscLogHandlerSetLogObjects(arg1, arg2)
    ccall((:PetscLogHandlerSetLogObjects, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscBool), arg1, arg2)
end

function PetscLogHandlerGetNumObjects(arg1, arg2)
    ccall((:PetscLogHandlerGetNumObjects, $petsc_library), PetscErrorCode, (PetscLogHandler, Ptr{PetscInt}), arg1, arg2)
end

function PetscLogHandlerEventDeactivatePush(arg1, arg2, arg3)
    ccall((:PetscLogHandlerEventDeactivatePush, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogStage, PetscLogEvent), arg1, arg2, arg3)
end

function PetscLogHandlerEventDeactivatePop(arg1, arg2, arg3)
    ccall((:PetscLogHandlerEventDeactivatePop, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogStage, PetscLogEvent), arg1, arg2, arg3)
end

function PetscLogHandlerEventsPause(arg1)
    ccall((:PetscLogHandlerEventsPause, $petsc_library), PetscErrorCode, (PetscLogHandler,), arg1)
end

function PetscLogHandlerEventsResume(arg1)
    ccall((:PetscLogHandlerEventsResume, $petsc_library), PetscErrorCode, (PetscLogHandler,), arg1)
end

function PetscLogHandlerDump(arg1, arg2)
    ccall((:PetscLogHandlerDump, $petsc_library), PetscErrorCode, (PetscLogHandler, Ptr{Cchar}), arg1, arg2)
end

function PetscLogHandlerStageSetVisible(arg1, arg2, arg3)
    ccall((:PetscLogHandlerStageSetVisible, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogStage, PetscBool), arg1, arg2, arg3)
end

function PetscLogHandlerStageGetVisible(arg1, arg2, arg3)
    ccall((:PetscLogHandlerStageGetVisible, $petsc_library), PetscErrorCode, (PetscLogHandler, PetscLogStage, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscLogHandlerCreateTrace(arg1, arg2, arg3)
    ccall((:PetscLogHandlerCreateTrace, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Libc.FILE}, Ptr{PetscLogHandler}), arg1, arg2, arg3)
end

function PetscLogHandlerCreateLegacy(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscLogHandlerCreateLegacy, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{PetscLogHandler}), arg1, arg2, arg3, arg4, arg5, arg6)
end

mutable struct _n_PetscLogHandlerHot
    handler::PetscLogHandler
    eventBegin::Ptr{Cvoid}
    eventEnd::Ptr{Cvoid}
    eventSync::Ptr{Cvoid}
    objectCreate::Ptr{Cvoid}
    objectDestroy::Ptr{Cvoid}
    _n_PetscLogHandlerHot() = new()
end

const PetscLogHandlerHot = _n_PetscLogHandlerHot

function PetscLogObjectMemory(o, m)
    ccall((:PetscLogObjectMemory, $petsc_library), PetscErrorCode, (PetscObject, PetscLogDouble), o, m)
end

function PetscGetFlops(arg1)
    ccall((:PetscGetFlops, $petsc_library), PetscErrorCode, (Ptr{PetscLogDouble},), arg1)
end

function PetscLogDefaultBegin()
    ccall((:PetscLogDefaultBegin, $petsc_library), PetscErrorCode, ())
end

function PetscLogNestedBegin()
    ccall((:PetscLogNestedBegin, $petsc_library), PetscErrorCode, ())
end

function PetscLogTraceBegin(arg1)
    ccall((:PetscLogTraceBegin, $petsc_library), PetscErrorCode, (Ptr{Libc.FILE},), arg1)
end

function PetscLogMPEBegin()
    ccall((:PetscLogMPEBegin, $petsc_library), PetscErrorCode, ())
end

function PetscLogPerfstubsBegin()
    ccall((:PetscLogPerfstubsBegin, $petsc_library), PetscErrorCode, ())
end

function PetscLogLegacyCallbacksBegin(arg1, arg2, arg3, arg4)
    ccall((:PetscLogLegacyCallbacksBegin, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscLogActions(arg1)
    ccall((:PetscLogActions, $petsc_library), PetscErrorCode, (PetscBool,), arg1)
end

function PetscLogObjects(arg1)
    ccall((:PetscLogObjects, $petsc_library), PetscErrorCode, (PetscBool,), arg1)
end

function PetscLogSetThreshold(arg1, arg2)
    ccall((:PetscLogSetThreshold, $petsc_library), PetscErrorCode, (PetscLogDouble, Ptr{PetscLogDouble}), arg1, arg2)
end

function PetscLogView(arg1)
    ccall((:PetscLogView, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscLogViewFromOptions()
    ccall((:PetscLogViewFromOptions, $petsc_library), PetscErrorCode, ())
end

function PetscLogDump(arg1)
    ccall((:PetscLogDump, $petsc_library), PetscErrorCode, (Ptr{Cchar},), arg1)
end

function PetscLogMPEDump(arg1)
    ccall((:PetscLogMPEDump, $petsc_library), PetscErrorCode, (Ptr{Cchar},), arg1)
end

function PetscLogGetState(arg1)
    ccall((:PetscLogGetState, $petsc_library), PetscErrorCode, (Ptr{PetscLogState},), arg1)
end

function PetscLogGetDefaultHandler(arg1)
    ccall((:PetscLogGetDefaultHandler, $petsc_library), PetscErrorCode, (Ptr{PetscLogHandler},), arg1)
end

function PetscLogHandlerStart(arg1)
    ccall((:PetscLogHandlerStart, $petsc_library), PetscErrorCode, (PetscLogHandler,), arg1)
end

function PetscLogHandlerStop(arg1)
    ccall((:PetscLogHandlerStop, $petsc_library), PetscErrorCode, (PetscLogHandler,), arg1)
end

function PetscLogIsActive(arg1)
    ccall((:PetscLogIsActive, $petsc_library), PetscErrorCode, (Ptr{PetscBool},), arg1)
end

function PetscLogStageGetActive(arg1, arg2)
    ccall((:PetscLogStageGetActive, $petsc_library), PetscErrorCode, (PetscLogStage, Ptr{PetscBool}), arg1, arg2)
end

function PetscLogStageSetVisible(arg1, arg2)
    ccall((:PetscLogStageSetVisible, $petsc_library), PetscErrorCode, (PetscLogStage, PetscBool), arg1, arg2)
end

function PetscLogStageGetVisible(arg1, arg2)
    ccall((:PetscLogStageGetVisible, $petsc_library), PetscErrorCode, (PetscLogStage, Ptr{PetscBool}), arg1, arg2)
end

function PetscLogStageGetName(arg1, arg2)
    ccall((:PetscLogStageGetName, $petsc_library), PetscErrorCode, (PetscLogEvent, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscLogStageGetPerfInfo(arg1, arg2)
    ccall((:PetscLogStageGetPerfInfo, $petsc_library), PetscErrorCode, (PetscLogStage, Ptr{PetscEventPerfInfo}), arg1, arg2)
end

function PetscLogEventRegister(arg1, arg2, arg3)
    ccall((:PetscLogEventRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, PetscClassId, Ptr{PetscLogEvent}), arg1, arg2, arg3)
end

function PetscLogEventSetCollective(arg1, arg2)
    ccall((:PetscLogEventSetCollective, $petsc_library), PetscErrorCode, (PetscLogEvent, PetscBool), arg1, arg2)
end

function PetscLogEventIncludeClass(arg1)
    ccall((:PetscLogEventIncludeClass, $petsc_library), PetscErrorCode, (PetscClassId,), arg1)
end

function PetscLogEventExcludeClass(arg1)
    ccall((:PetscLogEventExcludeClass, $petsc_library), PetscErrorCode, (PetscClassId,), arg1)
end

function PetscLogEventActivate(arg1)
    ccall((:PetscLogEventActivate, $petsc_library), PetscErrorCode, (PetscLogEvent,), arg1)
end

function PetscLogEventDeactivate(arg1)
    ccall((:PetscLogEventDeactivate, $petsc_library), PetscErrorCode, (PetscLogEvent,), arg1)
end

function PetscLogEventDeactivatePush(arg1)
    ccall((:PetscLogEventDeactivatePush, $petsc_library), PetscErrorCode, (PetscLogEvent,), arg1)
end

function PetscLogEventDeactivatePop(arg1)
    ccall((:PetscLogEventDeactivatePop, $petsc_library), PetscErrorCode, (PetscLogEvent,), arg1)
end

function PetscLogEventSetActiveAll(arg1, arg2)
    ccall((:PetscLogEventSetActiveAll, $petsc_library), PetscErrorCode, (PetscLogEvent, PetscBool), arg1, arg2)
end

function PetscLogEventActivateClass(arg1)
    ccall((:PetscLogEventActivateClass, $petsc_library), PetscErrorCode, (PetscClassId,), arg1)
end

function PetscLogEventDeactivateClass(arg1)
    ccall((:PetscLogEventDeactivateClass, $petsc_library), PetscErrorCode, (PetscClassId,), arg1)
end

function PetscLogEventGetId(arg1, arg2)
    ccall((:PetscLogEventGetId, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscLogEvent}), arg1, arg2)
end

function PetscLogEventGetName(arg1, arg2)
    ccall((:PetscLogEventGetName, $petsc_library), PetscErrorCode, (PetscLogEvent, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscLogEventGetPerfInfo(arg1, arg2, arg3)
    ccall((:PetscLogEventGetPerfInfo, $petsc_library), PetscErrorCode, (PetscLogStage, PetscLogEvent, Ptr{PetscEventPerfInfo}), arg1, arg2, arg3)
end

function PetscLogEventSetDof(arg1, arg2, arg3)
    ccall((:PetscLogEventSetDof, $petsc_library), PetscErrorCode, (PetscLogEvent, PetscInt, PetscLogDouble), arg1, arg2, arg3)
end

function PetscLogEventSetError(arg1, arg2, arg3)
    ccall((:PetscLogEventSetError, $petsc_library), PetscErrorCode, (PetscLogEvent, PetscInt, PetscLogDouble), arg1, arg2, arg3)
end

function PetscLogEventsPause()
    ccall((:PetscLogEventsPause, $petsc_library), PetscErrorCode, ())
end

function PetscLogEventsResume()
    ccall((:PetscLogEventsResume, $petsc_library), PetscErrorCode, ())
end

function PetscLogClassGetClassId(arg1, arg2)
    ccall((:PetscLogClassGetClassId, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscClassId}), arg1, arg2)
end

function PetscLogClassIdGetName(arg1, arg2)
    ccall((:PetscLogClassIdGetName, $petsc_library), PetscErrorCode, (PetscClassId, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscLogEventSync(e, comm)
    ccall((:PetscLogEventSync, $petsc_library), PetscErrorCode, (PetscLogEvent, MPI_Comm), e, comm)
end

function PetscLogObjectCreate(o)
    ccall((:PetscLogObjectCreate, $petsc_library), PetscErrorCode, (PetscObject,), o)
end

function PetscLogObjectDestroy(o)
    ccall((:PetscLogObjectDestroy, $petsc_library), PetscErrorCode, (PetscObject,), o)
end

function PetscLogFlops(n)
    ccall((:PetscLogFlops, $petsc_library), PetscErrorCode, (PetscLogDouble,), n)
end

struct PetscClassRegInfo
    name::Ptr{Cchar}
    classid::PetscClassId
end

struct _n_PetscClassRegLog
    numClasses::Cint
    maxClasses::Cint
    classInfo::Ptr{PetscClassRegInfo}
end

const PetscClassRegLog = Ptr{_n_PetscClassRegLog}

struct PetscClassPerfInfo
    id::PetscClassId
    creations::Cint
    destructions::Cint
    mem::PetscLogDouble
    descMem::PetscLogDouble
end

struct _n_PetscClassPerfLog
    numClasses::Cint
    maxClasses::Cint
    classInfo::Ptr{PetscClassPerfInfo}
end

const PetscClassPerfLog = Ptr{_n_PetscClassPerfLog}

struct PetscEventRegInfo
    name::Ptr{Cchar}
    classid::PetscClassId
    collective::PetscBool
    timer::Ptr{Cvoid}
end

struct _n_PetscEventRegLog
    numEvents::Cint
    maxEvents::Cint
    eventInfo::Ptr{PetscEventRegInfo}
end

const PetscEventRegLog = Ptr{_n_PetscEventRegLog}

mutable struct _n_PetscEventPerfLog
    numEvents::Cint
    maxEvents::Cint
    eventInfo::Ptr{PetscEventPerfInfo}
    _n_PetscEventPerfLog() = new()
end

const PetscEventPerfLog = Ptr{_n_PetscEventPerfLog}

struct _PetscStageInfo
    name::Ptr{Cchar}
    used::PetscBool
    perfInfo::PetscEventPerfInfo
    classLog::PetscClassPerfLog
    timer::Ptr{Cvoid}
end

const PetscStageInfo = _PetscStageInfo

mutable struct _n_PetscStageLog
    numStages::Cint
    maxStages::Cint
    stack::PetscIntStack
    curStage::Cint
    stageInfo::Ptr{PetscStageInfo}
    eventLog::PetscEventRegLog
    classLog::PetscClassRegLog
    _n_PetscStageLog() = new()
end

const PetscStageLog = Ptr{_n_PetscStageLog}

function PetscLogGetStageLog(s)
    ccall((:PetscLogGetStageLog, $petsc_library), PetscErrorCode, (Ptr{PetscStageLog},), s)
end

function PetscStageLogGetCurrent(a, b)
    ccall((:PetscStageLogGetCurrent, $petsc_library), PetscErrorCode, (PetscStageLog, Ptr{Cint}), a, b)
end

function PetscStageLogGetEventPerfLog(a, b, c)
    ccall((:PetscStageLogGetEventPerfLog, $petsc_library), PetscErrorCode, (PetscStageLog, Cint, Ptr{PetscEventPerfLog}), a, b, c)
end

function PetscLogPushCurrentEvent_Internal(e)
    ccall((:PetscLogPushCurrentEvent_Internal, $petsc_library), PetscErrorCode, (PetscLogEvent,), e)
end

function PetscLogPopCurrentEvent_Internal()
    ccall((:PetscLogPopCurrentEvent_Internal, $petsc_library), PetscErrorCode, ())
end

function PetscLogAllBegin()
    ccall((:PetscLogAllBegin, $petsc_library), PetscErrorCode, ())
end

function PetscLogSet(a, b)
    ccall((:PetscLogSet, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{Cvoid}), a, b)
end

function PetscFixFilename(arg1, arg2)
    ccall((:PetscFixFilename, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}), arg1, arg2)
end

function PetscFOpen(arg1, arg2, arg3, arg4)
    ccall((:PetscFOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Libc.FILE}}), arg1, arg2, arg3, arg4)
end

function PetscFClose(arg1, arg2)
    ccall((:PetscFClose, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Libc.FILE}), arg1, arg2)
end

function PetscFFlush(arg1)
    ccall((:PetscFFlush, $petsc_library), PetscErrorCode, (Ptr{Libc.FILE},), arg1)
end

function PetscFormatRealArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscFormatRealArray, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Csize_t, Ptr{Cchar}, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscFormatConvertGetSize(arg1, arg2)
    ccall((:PetscFormatConvertGetSize, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Csize_t}), arg1, arg2)
end

function PetscFormatConvert(arg1, arg2)
    ccall((:PetscFormatConvert, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}), arg1, arg2)
end

function PetscPOpen(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscPOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Libc.FILE}}), arg1, arg2, arg3, arg4, arg5)
end

function PetscPClose(arg1, arg2)
    ccall((:PetscPClose, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Libc.FILE}), arg1, arg2)
end

function PetscPOpenSetMachine(arg1)
    ccall((:PetscPOpenSetMachine, $petsc_library), PetscErrorCode, (Ptr{Cchar},), arg1)
end

function PetscSynchronizedFlush(arg1, arg2)
    ccall((:PetscSynchronizedFlush, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Libc.FILE}), arg1, arg2)
end

function PetscSynchronizedFGets(arg1, arg2, arg3, arg4)
    ccall((:PetscSynchronizedFGets, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Libc.FILE}, Csize_t, Ptr{Cchar}), arg1, arg2, arg3, arg4)
end

function PetscStartMatlab(arg1, arg2, arg3, arg4)
    ccall((:PetscStartMatlab, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Ptr{Ptr{Libc.FILE}}), arg1, arg2, arg3, arg4)
end

function PetscGetPetscDir(arg1)
    ccall((:PetscGetPetscDir, $petsc_library), PetscErrorCode, (Ptr{Ptr{Cchar}},), arg1)
end

function PetscContainerGetPointer(arg1, arg2)
    ccall((:PetscContainerGetPointer, $petsc_library), PetscErrorCode, (PetscContainer, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function PetscContainerSetPointer(arg1, arg2)
    ccall((:PetscContainerSetPointer, $petsc_library), PetscErrorCode, (PetscContainer, Ptr{Cvoid}), arg1, arg2)
end

function PetscContainerDestroy(arg1)
    ccall((:PetscContainerDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscContainer},), arg1)
end

function PetscContainerCreate(arg1, arg2)
    ccall((:PetscContainerCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscContainer}), arg1, arg2)
end

function PetscContainerSetUserDestroy(arg1, arg2)
    ccall((:PetscContainerSetUserDestroy, $petsc_library), PetscErrorCode, (PetscContainer, Ptr{Cvoid}), arg1, arg2)
end

function PetscContainerUserDestroyDefault(arg1)
    ccall((:PetscContainerUserDestroyDefault, $petsc_library), PetscErrorCode, (Ptr{Cvoid},), arg1)
end

function PetscIntView(arg1, arg2, arg3)
    ccall((:PetscIntView, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, PetscViewer), arg1, arg2, arg3)
end

function PetscRealView(arg1, arg2, arg3)
    ccall((:PetscRealView, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, PetscViewer), arg1, arg2, arg3)
end

function PetscScalarView(arg1, arg2, arg3)
    ccall((:PetscScalarView, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscScalar}, PetscViewer), arg1, arg2, arg3)
end

function PetscIntCast(a, b)
    ccall((:PetscIntCast, $petsc_library), PetscErrorCode, (PetscInt64, Ptr{PetscInt}), a, b)
end

function PetscCountCast(a, b)
    ccall((:PetscCountCast, $petsc_library), PetscErrorCode, (PetscCount, Ptr{PetscInt}), a, b)
end

function PetscBLASIntCast(a, b)
    ccall((:PetscBLASIntCast, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscBLASInt}), a, b)
end

function PetscCuBLASIntCast(a, b)
    ccall((:PetscCuBLASIntCast, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscCuBLASInt}), a, b)
end

function PetscHipBLASIntCast(a, b)
    ccall((:PetscHipBLASIntCast, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscHipBLASInt}), a, b)
end

function PetscMPIIntCast(a, b)
    ccall((:PetscMPIIntCast, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscMPIInt}), a, b)
end

function PetscRealIntMultTruncate(a, b)
    ccall((:PetscRealIntMultTruncate, $petsc_library), PetscInt, (PetscReal, PetscInt), a, b)
end

function PetscIntMultTruncate(a, b)
    ccall((:PetscIntMultTruncate, $petsc_library), PetscInt, (PetscInt, PetscInt), a, b)
end

function PetscIntSumTruncate(a, b)
    ccall((:PetscIntSumTruncate, $petsc_library), PetscInt, (PetscInt, PetscInt), a, b)
end

function PetscIntMultError(a, b, result)
    ccall((:PetscIntMultError, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscInt}), a, b, result)
end

function PetscIntSumError(a, b, result)
    ccall((:PetscIntSumError, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscInt}), a, b, result)
end

function PetscGetArchType(arg1, arg2)
    ccall((:PetscGetArchType, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Csize_t), arg1, arg2)
end

function PetscGetHostName(arg1, arg2)
    ccall((:PetscGetHostName, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Csize_t), arg1, arg2)
end

function PetscGetUserName(arg1, arg2)
    ccall((:PetscGetUserName, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Csize_t), arg1, arg2)
end

function PetscGetProgramName(arg1, arg2)
    ccall((:PetscGetProgramName, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Csize_t), arg1, arg2)
end

function PetscSetProgramName(arg1)
    ccall((:PetscSetProgramName, $petsc_library), PetscErrorCode, (Ptr{Cchar},), arg1)
end

function PetscGetDate(arg1, arg2)
    ccall((:PetscGetDate, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Csize_t), arg1, arg2)
end

function PetscGetVersion(arg1, arg2)
    ccall((:PetscGetVersion, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Csize_t), arg1, arg2)
end

function PetscGetVersionNumber(arg1, arg2, arg3, arg4)
    ccall((:PetscGetVersionNumber, $petsc_library), PetscErrorCode, (Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSortedInt(arg1, arg2, arg3)
    ccall((:PetscSortedInt, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscSortedInt64(arg1, arg2, arg3)
    ccall((:PetscSortedInt64, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt64}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscSortedMPIInt(arg1, arg2, arg3)
    ccall((:PetscSortedMPIInt, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscMPIInt}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscSortedReal(arg1, arg2, arg3)
    ccall((:PetscSortedReal, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscSortInt(arg1, arg2)
    ccall((:PetscSortInt, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}), arg1, arg2)
end

function PetscSortInt64(arg1, arg2)
    ccall((:PetscSortInt64, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt64}), arg1, arg2)
end

function PetscSortCount(arg1, arg2)
    ccall((:PetscSortCount, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscCount}), arg1, arg2)
end

function PetscSortReverseInt(arg1, arg2)
    ccall((:PetscSortReverseInt, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}), arg1, arg2)
end

function PetscSortedRemoveDupsInt(arg1, arg2)
    ccall((:PetscSortedRemoveDupsInt, $petsc_library), PetscErrorCode, (Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2)
end

function PetscSortedCheckDupsInt(arg1, arg2, arg3)
    ccall((:PetscSortedCheckDupsInt, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscCheckDupsInt(arg1, arg2, arg3)
    ccall((:PetscCheckDupsInt, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscFindInt(arg1, arg2, arg3, arg4)
    ccall((:PetscFindInt, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscFindMPIInt(arg1, arg2, arg3, arg4)
    ccall((:PetscFindMPIInt, $petsc_library), PetscErrorCode, (PetscMPIInt, PetscInt, Ptr{PetscMPIInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSortIntWithPermutation(arg1, arg2, arg3)
    ccall((:PetscSortIntWithPermutation, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSortStrWithPermutation(arg1, arg2, arg3)
    ccall((:PetscSortStrWithPermutation, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Ptr{Cchar}}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSortIntWithArray(arg1, arg2, arg3)
    ccall((:PetscSortIntWithArray, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSortIntWithCountArray(arg1, arg2, arg3)
    ccall((:PetscSortIntWithCountArray, $petsc_library), PetscErrorCode, (PetscCount, Ptr{PetscInt}, Ptr{PetscCount}), arg1, arg2, arg3)
end

function PetscSortIntWithArrayPair(arg1, arg2, arg3, arg4)
    ccall((:PetscSortIntWithArrayPair, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSortIntWithIntCountArrayPair(arg1, arg2, arg3, arg4)
    ccall((:PetscSortIntWithIntCountArrayPair, $petsc_library), PetscErrorCode, (PetscCount, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscCount}), arg1, arg2, arg3, arg4)
end

function PetscSortMPIInt(arg1, arg2)
    ccall((:PetscSortMPIInt, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscMPIInt}), arg1, arg2)
end

function PetscSortRemoveDupsMPIInt(arg1, arg2)
    ccall((:PetscSortRemoveDupsMPIInt, $petsc_library), PetscErrorCode, (Ptr{PetscInt}, Ptr{PetscMPIInt}), arg1, arg2)
end

function PetscSortMPIIntWithArray(arg1, arg2, arg3)
    ccall((:PetscSortMPIIntWithArray, $petsc_library), PetscErrorCode, (PetscMPIInt, Ptr{PetscMPIInt}, Ptr{PetscMPIInt}), arg1, arg2, arg3)
end

function PetscSortMPIIntWithIntArray(arg1, arg2, arg3)
    ccall((:PetscSortMPIIntWithIntArray, $petsc_library), PetscErrorCode, (PetscMPIInt, Ptr{PetscMPIInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSortIntWithScalarArray(arg1, arg2, arg3)
    ccall((:PetscSortIntWithScalarArray, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function PetscSortIntWithDataArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSortIntWithDataArray, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Csize_t, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSortReal(arg1, arg2)
    ccall((:PetscSortReal, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}), arg1, arg2)
end

function PetscSortRealWithArrayInt(arg1, arg2, arg3)
    ccall((:PetscSortRealWithArrayInt, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSortRealWithPermutation(arg1, arg2, arg3)
    ccall((:PetscSortRealWithPermutation, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSortRemoveDupsReal(arg1, arg2)
    ccall((:PetscSortRemoveDupsReal, $petsc_library), PetscErrorCode, (Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2)
end

function PetscFindReal(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscFindReal, $petsc_library), PetscErrorCode, (PetscReal, PetscInt, Ptr{PetscReal}, PetscReal, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSortSplit(arg1, arg2, arg3, arg4)
    ccall((:PetscSortSplit, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSortSplitReal(arg1, arg2, arg3, arg4)
    ccall((:PetscSortSplitReal, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscProcessTree(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscProcessTree, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscBool}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscMergeIntArrayPair(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscMergeIntArrayPair, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscMergeIntArray(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscMergeIntArray, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscMergeMPIIntArray(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscMergeMPIIntArray, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscMPIInt}, PetscInt, Ptr{PetscMPIInt}, Ptr{PetscInt}, Ptr{Ptr{PetscMPIInt}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscParallelSortedInt(arg1, arg2, arg3, arg4)
    ccall((:PetscParallelSortedInt, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function PetscTimSort(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscTimSort, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Cvoid}, Csize_t, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function PetscIntSortSemiOrdered(arg1, arg2)
    ccall((:PetscIntSortSemiOrdered, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}), arg1, arg2)
end

function PetscMPIIntSortSemiOrdered(arg1, arg2)
    ccall((:PetscMPIIntSortSemiOrdered, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscMPIInt}), arg1, arg2)
end

function PetscRealSortSemiOrdered(arg1, arg2)
    ccall((:PetscRealSortSemiOrdered, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}), arg1, arg2)
end

function PetscTimSortWithArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscTimSortWithArray, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Cvoid}, Csize_t, Ptr{Cvoid}, Csize_t, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscIntSortSemiOrderedWithArray(arg1, arg2, arg3)
    ccall((:PetscIntSortSemiOrderedWithArray, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscMPIIntSortSemiOrderedWithArray(arg1, arg2, arg3)
    ccall((:PetscMPIIntSortSemiOrderedWithArray, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscMPIInt}, Ptr{PetscMPIInt}), arg1, arg2, arg3)
end

function PetscRealSortSemiOrderedWithArrayInt(arg1, arg2, arg3)
    ccall((:PetscRealSortSemiOrderedWithArrayInt, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSetDisplay()
    ccall((:PetscSetDisplay, $petsc_library), PetscErrorCode, ())
end

function PetscGetDisplay(arg1, arg2)
    ccall((:PetscGetDisplay, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Csize_t), arg1, arg2)
end

const PetscRandomType = Ptr{Cchar}

function PetscRandomInitializePackage()
    ccall((:PetscRandomInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscRandomFinalizePackage()
    ccall((:PetscRandomFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PetscRandomRegister(arg1, arg2)
    ccall((:PetscRandomRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscRandomSetType(arg1, arg2)
    ccall((:PetscRandomSetType, $petsc_library), PetscErrorCode, (PetscRandom, PetscRandomType), arg1, arg2)
end

function PetscRandomSetFromOptions(arg1)
    ccall((:PetscRandomSetFromOptions, $petsc_library), PetscErrorCode, (PetscRandom,), arg1)
end

function PetscRandomGetType(arg1, arg2)
    ccall((:PetscRandomGetType, $petsc_library), PetscErrorCode, (PetscRandom, Ptr{PetscRandomType}), arg1, arg2)
end

function PetscRandomViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscRandomViewFromOptions, $petsc_library), PetscErrorCode, (PetscRandom, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscRandomView(arg1, arg2)
    ccall((:PetscRandomView, $petsc_library), PetscErrorCode, (PetscRandom, PetscViewer), arg1, arg2)
end

function PetscRandomCreate(arg1, arg2)
    ccall((:PetscRandomCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscRandom}), arg1, arg2)
end

function PetscRandomGetValue(arg1, arg2)
    ccall((:PetscRandomGetValue, $petsc_library), PetscErrorCode, (PetscRandom, Ptr{PetscScalar}), arg1, arg2)
end

function PetscRandomGetValueReal(arg1, arg2)
    ccall((:PetscRandomGetValueReal, $petsc_library), PetscErrorCode, (PetscRandom, Ptr{PetscReal}), arg1, arg2)
end

function PetscRandomGetValues(arg1, arg2, arg3)
    ccall((:PetscRandomGetValues, $petsc_library), PetscErrorCode, (PetscRandom, PetscInt, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function PetscRandomGetValuesReal(arg1, arg2, arg3)
    ccall((:PetscRandomGetValuesReal, $petsc_library), PetscErrorCode, (PetscRandom, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscRandomGetInterval(arg1, arg2, arg3)
    ccall((:PetscRandomGetInterval, $petsc_library), PetscErrorCode, (PetscRandom, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function PetscRandomSetInterval(arg1, arg2, arg3)
    ccall((:PetscRandomSetInterval, $petsc_library), PetscErrorCode, (PetscRandom, PetscScalar, PetscScalar), arg1, arg2, arg3)
end

function PetscRandomSetSeed(arg1, arg2)
    ccall((:PetscRandomSetSeed, $petsc_library), PetscErrorCode, (PetscRandom, Culong), arg1, arg2)
end

function PetscRandomGetSeed(arg1, arg2)
    ccall((:PetscRandomGetSeed, $petsc_library), PetscErrorCode, (PetscRandom, Ptr{Culong}), arg1, arg2)
end

function PetscRandomSeed(arg1)
    ccall((:PetscRandomSeed, $petsc_library), PetscErrorCode, (PetscRandom,), arg1)
end

function PetscRandomDestroy(arg1)
    ccall((:PetscRandomDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscRandom},), arg1)
end

function PetscGetFullPath(arg1, arg2, arg3)
    ccall((:PetscGetFullPath, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Csize_t), arg1, arg2, arg3)
end

function PetscGetRelativePath(arg1, arg2, arg3)
    ccall((:PetscGetRelativePath, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Csize_t), arg1, arg2, arg3)
end

function PetscGetWorkingDirectory(arg1, arg2)
    ccall((:PetscGetWorkingDirectory, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Csize_t), arg1, arg2)
end

function PetscGetRealPath(arg1, arg2)
    ccall((:PetscGetRealPath, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}), arg1, arg2)
end

function PetscGetHomeDirectory(arg1, arg2)
    ccall((:PetscGetHomeDirectory, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Csize_t), arg1, arg2)
end

function PetscTestFile(arg1, arg2, arg3)
    ccall((:PetscTestFile, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Cchar, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscTestDirectory(arg1, arg2, arg3)
    ccall((:PetscTestDirectory, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Cchar, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscMkdir(arg1)
    ccall((:PetscMkdir, $petsc_library), PetscErrorCode, (Ptr{Cchar},), arg1)
end

function PetscMkdtemp(arg1)
    ccall((:PetscMkdtemp, $petsc_library), PetscErrorCode, (Ptr{Cchar},), arg1)
end

function PetscRMTree(arg1)
    ccall((:PetscRMTree, $petsc_library), PetscErrorCode, (Ptr{Cchar},), arg1)
end

function PetscBinaryBigEndian()
    ccall((:PetscBinaryBigEndian, $petsc_library), PetscBool, ())
end

function PetscBinaryRead(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBinaryRead, $petsc_library), PetscErrorCode, (Cint, Ptr{Cvoid}, PetscInt, Ptr{PetscInt}, PetscDataType), arg1, arg2, arg3, arg4, arg5)
end

function PetscBinarySynchronizedRead(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscBinarySynchronizedRead, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, Ptr{Cvoid}, PetscInt, Ptr{PetscInt}, PetscDataType), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscBinaryWrite(arg1, arg2, arg3, arg4)
    ccall((:PetscBinaryWrite, $petsc_library), PetscErrorCode, (Cint, Ptr{Cvoid}, PetscInt, PetscDataType), arg1, arg2, arg3, arg4)
end

function PetscBinarySynchronizedWrite(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBinarySynchronizedWrite, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, Ptr{Cvoid}, PetscInt, PetscDataType), arg1, arg2, arg3, arg4, arg5)
end

function PetscBinaryOpen(arg1, arg2, arg3)
    ccall((:PetscBinaryOpen, $petsc_library), PetscErrorCode, (Ptr{Cchar}, PetscFileMode, Ptr{Cint}), arg1, arg2, arg3)
end

function PetscBinaryClose(arg1)
    ccall((:PetscBinaryClose, $petsc_library), PetscErrorCode, (Cint,), arg1)
end

function PetscSharedTmp(arg1, arg2)
    ccall((:PetscSharedTmp, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscBool}), arg1, arg2)
end

function PetscSharedWorkingDirectory(arg1, arg2)
    ccall((:PetscSharedWorkingDirectory, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscBool}), arg1, arg2)
end

function PetscGetTmp(arg1, arg2, arg3)
    ccall((:PetscGetTmp, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Csize_t), arg1, arg2, arg3)
end

function PetscFileRetrieve(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscFileRetrieve, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Csize_t, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscLs(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscLs, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Csize_t, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscOpenSocket(arg1, arg2, arg3)
    ccall((:PetscOpenSocket, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Cint, Ptr{Cint}), arg1, arg2, arg3)
end

function PetscBinarySeek(arg1, arg2, arg3, arg4)
    ccall((:PetscBinarySeek, $petsc_library), PetscErrorCode, (Cint, off_t, PetscBinarySeekType, Ptr{off_t}), arg1, arg2, arg3, arg4)
end

function PetscBinarySynchronizedSeek(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBinarySynchronizedSeek, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, off_t, PetscBinarySeekType, Ptr{off_t}), arg1, arg2, arg3, arg4, arg5)
end

function PetscByteSwap(arg1, arg2, arg3)
    ccall((:PetscByteSwap, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, PetscDataType, PetscInt), arg1, arg2, arg3)
end

function PetscSetDebugTerminal(arg1)
    ccall((:PetscSetDebugTerminal, $petsc_library), PetscErrorCode, (Ptr{Cchar},), arg1)
end

function PetscSetDebugger(arg1, arg2)
    ccall((:PetscSetDebugger, $petsc_library), PetscErrorCode, (Ptr{Cchar}, PetscBool), arg1, arg2)
end

function PetscSetDefaultDebugger()
    ccall((:PetscSetDefaultDebugger, $petsc_library), PetscErrorCode, ())
end

function PetscSetDebuggerFromString(arg1)
    ccall((:PetscSetDebuggerFromString, $petsc_library), PetscErrorCode, (Ptr{Cchar},), arg1)
end

function PetscAttachDebugger()
    ccall((:PetscAttachDebugger, $petsc_library), PetscErrorCode, ())
end

function PetscStopForDebugger()
    ccall((:PetscStopForDebugger, $petsc_library), PetscErrorCode, ())
end

function PetscWaitOnError()
    ccall((:PetscWaitOnError, $petsc_library), PetscErrorCode, ())
end

function PetscGatherNumberOfMessages(arg1, arg2, arg3, arg4)
    ccall((:PetscGatherNumberOfMessages, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscMPIInt}, Ptr{PetscMPIInt}, Ptr{PetscMPIInt}), arg1, arg2, arg3, arg4)
end

function PetscGatherMessageLengths(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscGatherMessageLengths, $petsc_library), PetscErrorCode, (MPI_Comm, PetscMPIInt, PetscMPIInt, Ptr{PetscMPIInt}, Ptr{Ptr{PetscMPIInt}}, Ptr{Ptr{PetscMPIInt}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscGatherMessageLengths2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscGatherMessageLengths2, $petsc_library), PetscErrorCode, (MPI_Comm, PetscMPIInt, PetscMPIInt, Ptr{PetscMPIInt}, Ptr{PetscMPIInt}, Ptr{Ptr{PetscMPIInt}}, Ptr{Ptr{PetscMPIInt}}, Ptr{Ptr{PetscMPIInt}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscCommBuildTwoSided(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscCommBuildTwoSided, $petsc_library), PetscErrorCode, (MPI_Comm, PetscMPIInt, MPI_Datatype, PetscMPIInt, Ptr{PetscMPIInt}, Ptr{Cvoid}, Ptr{PetscMPIInt}, Ptr{Ptr{PetscMPIInt}}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscCommBuildTwoSidedF(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, send, recv, ctx)
    ccall((:PetscCommBuildTwoSidedF, $petsc_library), PetscErrorCode, (MPI_Comm, PetscMPIInt, MPI_Datatype, PetscMPIInt, Ptr{PetscMPIInt}, Ptr{Cvoid}, Ptr{PetscMPIInt}, Ptr{Ptr{PetscMPIInt}}, Ptr{Cvoid}, PetscMPIInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, send, recv, ctx)
end

function PetscCommBuildTwoSidedSetType(arg1, arg2)
    ccall((:PetscCommBuildTwoSidedSetType, $petsc_library), PetscErrorCode, (MPI_Comm, PetscBuildTwoSidedType), arg1, arg2)
end

function PetscCommBuildTwoSidedGetType(arg1, arg2)
    ccall((:PetscCommBuildTwoSidedGetType, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscBuildTwoSidedType}), arg1, arg2)
end

function PetscSSEIsEnabled(arg1, arg2, arg3)
    ccall((:PetscSSEIsEnabled, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscObjectComm(arg1)
    ccall((:PetscObjectComm, $petsc_library), MPI_Comm, (PetscObject,), arg1)
end

function PetscSubcommParent(scomm)
    ccall((:PetscSubcommParent, $petsc_library), MPI_Comm, (PetscSubcomm,), scomm)
end

function PetscSubcommChild(scomm)
    ccall((:PetscSubcommChild, $petsc_library), MPI_Comm, (PetscSubcomm,), scomm)
end

function PetscSubcommContiguousParent(scomm)
    ccall((:PetscSubcommContiguousParent, $petsc_library), MPI_Comm, (PetscSubcomm,), scomm)
end

function PetscSubcommCreate(arg1, arg2)
    ccall((:PetscSubcommCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscSubcomm}), arg1, arg2)
end

function PetscSubcommDestroy(arg1)
    ccall((:PetscSubcommDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscSubcomm},), arg1)
end

function PetscSubcommSetNumber(arg1, arg2)
    ccall((:PetscSubcommSetNumber, $petsc_library), PetscErrorCode, (PetscSubcomm, PetscInt), arg1, arg2)
end

function PetscSubcommSetType(arg1, arg2)
    ccall((:PetscSubcommSetType, $petsc_library), PetscErrorCode, (PetscSubcomm, PetscSubcommType), arg1, arg2)
end

function PetscSubcommSetTypeGeneral(arg1, arg2, arg3)
    ccall((:PetscSubcommSetTypeGeneral, $petsc_library), PetscErrorCode, (PetscSubcomm, PetscMPIInt, PetscMPIInt), arg1, arg2, arg3)
end

function PetscSubcommView(arg1, arg2)
    ccall((:PetscSubcommView, $petsc_library), PetscErrorCode, (PetscSubcomm, PetscViewer), arg1, arg2)
end

function PetscSubcommSetFromOptions(arg1)
    ccall((:PetscSubcommSetFromOptions, $petsc_library), PetscErrorCode, (PetscSubcomm,), arg1)
end

function PetscSubcommSetOptionsPrefix(arg1, arg2)
    ccall((:PetscSubcommSetOptionsPrefix, $petsc_library), PetscErrorCode, (PetscSubcomm, Ptr{Cchar}), arg1, arg2)
end

function PetscSubcommGetParent(arg1, arg2)
    ccall((:PetscSubcommGetParent, $petsc_library), PetscErrorCode, (PetscSubcomm, Ptr{MPI_Comm}), arg1, arg2)
end

function PetscSubcommGetContiguousParent(arg1, arg2)
    ccall((:PetscSubcommGetContiguousParent, $petsc_library), PetscErrorCode, (PetscSubcomm, Ptr{MPI_Comm}), arg1, arg2)
end

function PetscSubcommGetChild(arg1, arg2)
    ccall((:PetscSubcommGetChild, $petsc_library), PetscErrorCode, (PetscSubcomm, Ptr{MPI_Comm}), arg1, arg2)
end

function PetscHeapCreate(arg1, arg2)
    ccall((:PetscHeapCreate, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscHeap}), arg1, arg2)
end

function PetscHeapAdd(arg1, arg2, arg3)
    ccall((:PetscHeapAdd, $petsc_library), PetscErrorCode, (PetscHeap, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscHeapPop(arg1, arg2, arg3)
    ccall((:PetscHeapPop, $petsc_library), PetscErrorCode, (PetscHeap, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscHeapPeek(arg1, arg2, arg3)
    ccall((:PetscHeapPeek, $petsc_library), PetscErrorCode, (PetscHeap, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscHeapStash(arg1, arg2, arg3)
    ccall((:PetscHeapStash, $petsc_library), PetscErrorCode, (PetscHeap, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscHeapUnstash(arg1)
    ccall((:PetscHeapUnstash, $petsc_library), PetscErrorCode, (PetscHeap,), arg1)
end

function PetscHeapDestroy(arg1)
    ccall((:PetscHeapDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscHeap},), arg1)
end

function PetscHeapView(arg1, arg2)
    ccall((:PetscHeapView, $petsc_library), PetscErrorCode, (PetscHeap, PetscViewer), arg1, arg2)
end

function PetscProcessPlacementView(arg1)
    ccall((:PetscProcessPlacementView, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscShmCommGet(arg1, arg2)
    ccall((:PetscShmCommGet, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscShmComm}), arg1, arg2)
end

function PetscShmCommGlobalToLocal(arg1, arg2, arg3)
    ccall((:PetscShmCommGlobalToLocal, $petsc_library), PetscErrorCode, (PetscShmComm, PetscMPIInt, Ptr{PetscMPIInt}), arg1, arg2, arg3)
end

function PetscShmCommLocalToGlobal(arg1, arg2, arg3)
    ccall((:PetscShmCommLocalToGlobal, $petsc_library), PetscErrorCode, (PetscShmComm, PetscMPIInt, Ptr{PetscMPIInt}), arg1, arg2, arg3)
end

function PetscShmCommGetMpiShmComm(arg1, arg2)
    ccall((:PetscShmCommGetMpiShmComm, $petsc_library), PetscErrorCode, (PetscShmComm, Ptr{MPI_Comm}), arg1, arg2)
end

function PetscOmpCtrlCreate(arg1, arg2, arg3)
    ccall((:PetscOmpCtrlCreate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscOmpCtrl}), arg1, arg2, arg3)
end

function PetscOmpCtrlGetOmpComms(arg1, arg2, arg3, arg4)
    ccall((:PetscOmpCtrlGetOmpComms, $petsc_library), PetscErrorCode, (PetscOmpCtrl, Ptr{MPI_Comm}, Ptr{MPI_Comm}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function PetscOmpCtrlDestroy(arg1)
    ccall((:PetscOmpCtrlDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscOmpCtrl},), arg1)
end

function PetscOmpCtrlBarrier(arg1)
    ccall((:PetscOmpCtrlBarrier, $petsc_library), PetscErrorCode, (PetscOmpCtrl,), arg1)
end

function PetscOmpCtrlOmpRegionOnMasterBegin(arg1)
    ccall((:PetscOmpCtrlOmpRegionOnMasterBegin, $petsc_library), PetscErrorCode, (PetscOmpCtrl,), arg1)
end

function PetscOmpCtrlOmpRegionOnMasterEnd(arg1)
    ccall((:PetscOmpCtrlOmpRegionOnMasterEnd, $petsc_library), PetscErrorCode, (PetscOmpCtrl,), arg1)
end

function PetscSegBufferCreate(arg1, arg2, arg3)
    ccall((:PetscSegBufferCreate, $petsc_library), PetscErrorCode, (Csize_t, Csize_t, Ptr{PetscSegBuffer}), arg1, arg2, arg3)
end

function PetscSegBufferDestroy(arg1)
    ccall((:PetscSegBufferDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscSegBuffer},), arg1)
end

function PetscSegBufferGet(arg1, arg2, arg3)
    ccall((:PetscSegBufferGet, $petsc_library), PetscErrorCode, (PetscSegBuffer, Csize_t, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PetscSegBufferExtractAlloc(arg1, arg2)
    ccall((:PetscSegBufferExtractAlloc, $petsc_library), PetscErrorCode, (PetscSegBuffer, Ptr{Cvoid}), arg1, arg2)
end

function PetscSegBufferExtractTo(arg1, arg2)
    ccall((:PetscSegBufferExtractTo, $petsc_library), PetscErrorCode, (PetscSegBuffer, Ptr{Cvoid}), arg1, arg2)
end

function PetscSegBufferExtractInPlace(arg1, arg2)
    ccall((:PetscSegBufferExtractInPlace, $petsc_library), PetscErrorCode, (PetscSegBuffer, Ptr{Cvoid}), arg1, arg2)
end

function PetscSegBufferGetSize(arg1, arg2)
    ccall((:PetscSegBufferGetSize, $petsc_library), PetscErrorCode, (PetscSegBuffer, Ptr{Csize_t}), arg1, arg2)
end

function PetscSegBufferUnuse(arg1, arg2)
    ccall((:PetscSegBufferUnuse, $petsc_library), PetscErrorCode, (PetscSegBuffer, Csize_t), arg1, arg2)
end

function PetscSegBufferGetInts(seg, count, slot)
    ccall((:PetscSegBufferGetInts, $petsc_library), PetscErrorCode, (PetscSegBuffer, Csize_t, Ptr{Ptr{PetscInt}}), seg, count, slot)
end

function PetscOptionsHelpPrintedDestroy(arg1)
    ccall((:PetscOptionsHelpPrintedDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscOptionsHelpPrinted},), arg1)
end

function PetscOptionsHelpPrintedCreate(arg1)
    ccall((:PetscOptionsHelpPrintedCreate, $petsc_library), PetscErrorCode, (Ptr{PetscOptionsHelpPrinted},), arg1)
end

function PetscOptionsHelpPrintedCheck(arg1, arg2, arg3, arg4)
    ccall((:PetscOptionsHelpPrintedCheck, $petsc_library), PetscErrorCode, (PetscOptionsHelpPrinted, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function PetscCitationsRegister(cit, set)
    ccall((:PetscCitationsRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscBool}), cit, set)
end

function PetscGoogleDriveAuthorize(arg1, arg2, arg3, arg4)
    ccall((:PetscGoogleDriveAuthorize, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Csize_t), arg1, arg2, arg3, arg4)
end

function PetscGoogleDriveRefresh(arg1, arg2, arg3, arg4)
    ccall((:PetscGoogleDriveRefresh, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Csize_t), arg1, arg2, arg3, arg4)
end

function PetscGoogleDriveUpload(arg1, arg2, arg3)
    ccall((:PetscGoogleDriveUpload, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscBoxAuthorize(arg1, arg2, arg3, arg4)
    ccall((:PetscBoxAuthorize, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Csize_t), arg1, arg2, arg3, arg4)
end

function PetscBoxRefresh(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBoxRefresh, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Csize_t), arg1, arg2, arg3, arg4, arg5)
end

function PetscBoxUpload(arg1, arg2, arg3)
    ccall((:PetscBoxUpload, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscGlobusGetTransfers(arg1, arg2, arg3, arg4)
    ccall((:PetscGlobusGetTransfers, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Csize_t), arg1, arg2, arg3, arg4)
end

function PetscGlobusAuthorize(arg1, arg2, arg3)
    ccall((:PetscGlobusAuthorize, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Csize_t), arg1, arg2, arg3)
end

function PetscGlobusUpload(arg1, arg2, arg3)
    ccall((:PetscGlobusUpload, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscPullJSONValue(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscPullJSONValue, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Csize_t, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function PetscPushJSONValue(arg1, arg2, arg3, arg4)
    ccall((:PetscPushJSONValue, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Csize_t), arg1, arg2, arg3, arg4)
end

function MPIU_Win_allocate_shared(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MPIU_Win_allocate_shared, $petsc_library), PetscErrorCode, (MPI_Aint, PetscMPIInt, MPI_Info, MPI_Comm, Ptr{Cvoid}, Ptr{MPI_Win}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MPIU_Win_shared_query(arg1, arg2, arg3, arg4, arg5)
    ccall((:MPIU_Win_shared_query, $petsc_library), PetscErrorCode, (MPI_Win, PetscMPIInt, Ptr{MPI_Aint}, Ptr{PetscMPIInt}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function PetscHasExternalPackage(arg1, arg2)
    ccall((:PetscHasExternalPackage, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2)
end

function PCMPIServerBegin()
    ccall((:PCMPIServerBegin, $petsc_library), PetscErrorCode, ())
end

function PCMPIServerEnd()
    ccall((:PCMPIServerEnd, $petsc_library), PetscErrorCode, ())
end

function PCMPICommsDestroy()
    ccall((:PCMPICommsDestroy, $petsc_library), PetscErrorCode, ())
end

function PetscBLASSetNumThreads(arg1)
    ccall((:PetscBLASSetNumThreads, $petsc_library), PetscErrorCode, (PetscInt,), arg1)
end

function PetscBLASGetNumThreads(arg1)
    ccall((:PetscBLASGetNumThreads, $petsc_library), PetscErrorCode, (Ptr{PetscInt},), arg1)
end

mutable struct _n_PetscBag end

const PetscBag = Ptr{_n_PetscBag}

mutable struct _n_PetscBagItem end

const PetscBagItem = Ptr{_n_PetscBagItem}

function PetscBagCreate(arg1, arg2, arg3)
    ccall((:PetscBagCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Csize_t, Ptr{PetscBag}), arg1, arg2, arg3)
end

function PetscBagDestroy(arg1)
    ccall((:PetscBagDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscBag},), arg1)
end

function PetscBagGetData(arg1, arg2)
    ccall((:PetscBagGetData, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function PetscBagRegisterReal(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBagRegisterReal, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cvoid}, PetscReal, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscBagRegisterRealArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBagRegisterRealArray, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cvoid}, PetscInt, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscBagRegisterString(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscBagRegisterString, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cvoid}, PetscInt, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscBagRegisterScalar(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBagRegisterScalar, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cvoid}, PetscScalar, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscBagRegisterInt(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBagRegisterInt, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cvoid}, PetscInt, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscBagRegisterInt64(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBagRegisterInt64, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cvoid}, PetscInt64, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscBagRegisterIntArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBagRegisterIntArray, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cvoid}, PetscInt, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscBagRegisterEnum(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscBagRegisterEnum, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cvoid}, Ptr{Ptr{Cchar}}, PetscEnum, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscBagRegisterBool(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBagRegisterBool, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cvoid}, PetscBool, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscBagRegisterBoolArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscBagRegisterBoolArray, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cvoid}, PetscInt, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscBagGetNames(arg1, arg2)
    ccall((:PetscBagGetNames, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscBagSetFromOptions(arg1)
    ccall((:PetscBagSetFromOptions, $petsc_library), PetscErrorCode, (PetscBag,), arg1)
end

function PetscBagGetName(arg1, arg2)
    ccall((:PetscBagGetName, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscBagSetName(arg1, arg2, arg3)
    ccall((:PetscBagSetName, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscBagSetOptionsPrefix(arg1, arg2)
    ccall((:PetscBagSetOptionsPrefix, $petsc_library), PetscErrorCode, (PetscBag, Ptr{Cchar}), arg1, arg2)
end

function PetscBagView(arg1, arg2)
    ccall((:PetscBagView, $petsc_library), PetscErrorCode, (PetscBag, PetscViewer), arg1, arg2)
end

function PetscBagLoad(arg1, arg2)
    ccall((:PetscBagLoad, $petsc_library), PetscErrorCode, (PetscViewer, PetscBag), arg1, arg2)
end

function PetscBagViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscBagViewFromOptions, $petsc_library), PetscErrorCode, (PetscBag, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscMatlabEngineCreate(arg1, arg2, arg3)
    ccall((:PetscMatlabEngineCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{PetscMatlabEngine}), arg1, arg2, arg3)
end

function PetscMatlabEngineDestroy(arg1)
    ccall((:PetscMatlabEngineDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscMatlabEngine},), arg1)
end

function PetscMatlabEngineGetOutput(arg1, arg2)
    ccall((:PetscMatlabEngineGetOutput, $petsc_library), PetscErrorCode, (PetscMatlabEngine, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscMatlabEnginePrintOutput(arg1, arg2)
    ccall((:PetscMatlabEnginePrintOutput, $petsc_library), PetscErrorCode, (PetscMatlabEngine, Ptr{Libc.FILE}), arg1, arg2)
end

function PetscMatlabEnginePut(arg1, arg2)
    ccall((:PetscMatlabEnginePut, $petsc_library), PetscErrorCode, (PetscMatlabEngine, PetscObject), arg1, arg2)
end

function PetscMatlabEngineGet(arg1, arg2)
    ccall((:PetscMatlabEngineGet, $petsc_library), PetscErrorCode, (PetscMatlabEngine, PetscObject), arg1, arg2)
end

function PetscMatlabEnginePutArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscMatlabEnginePutArray, $petsc_library), PetscErrorCode, (PetscMatlabEngine, Cint, Cint, Ptr{PetscScalar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscMatlabEngineGetArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscMatlabEngineGetArray, $petsc_library), PetscErrorCode, (PetscMatlabEngine, Cint, Cint, Ptr{PetscScalar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

const PetscDrawType = Ptr{Cchar}

mutable struct _p_PetscDraw end

const PetscDraw = Ptr{_p_PetscDraw}

mutable struct _p_PetscDrawAxis end

const PetscDrawAxis = Ptr{_p_PetscDrawAxis}

mutable struct _p_PetscDrawLG end

const PetscDrawLG = Ptr{_p_PetscDrawLG}

mutable struct _p_PetscDrawSP end

const PetscDrawSP = Ptr{_p_PetscDrawSP}

mutable struct _p_PetscDrawHG end

const PetscDrawHG = Ptr{_p_PetscDrawHG}

mutable struct _p_PetscDrawBar end

const PetscDrawBar = Ptr{_p_PetscDrawBar}

function PetscDrawInitializePackage()
    ccall((:PetscDrawInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscDrawFinalizePackage()
    ccall((:PetscDrawFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PetscDrawRegister(arg1, arg2)
    ccall((:PetscDrawRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscDrawGetType(arg1, arg2)
    ccall((:PetscDrawGetType, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscDrawType}), arg1, arg2)
end

function PetscDrawSetType(arg1, arg2)
    ccall((:PetscDrawSetType, $petsc_library), PetscErrorCode, (PetscDraw, PetscDrawType), arg1, arg2)
end

function PetscDrawCreate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscDrawCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Cint, Cint, Cint, Cint, Ptr{PetscDraw}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscDrawSetOptionsPrefix(arg1, arg2)
    ccall((:PetscDrawSetOptionsPrefix, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{Cchar}), arg1, arg2)
end

function PetscDrawSetFromOptions(arg1)
    ccall((:PetscDrawSetFromOptions, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawSetSave(arg1, arg2)
    ccall((:PetscDrawSetSave, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{Cchar}), arg1, arg2)
end

function PetscDrawSetSaveMovie(arg1, arg2)
    ccall((:PetscDrawSetSaveMovie, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{Cchar}), arg1, arg2)
end

function PetscDrawSetSaveFinalImage(arg1, arg2)
    ccall((:PetscDrawSetSaveFinalImage, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{Cchar}), arg1, arg2)
end

function PetscDrawView(arg1, arg2)
    ccall((:PetscDrawView, $petsc_library), PetscErrorCode, (PetscDraw, PetscViewer), arg1, arg2)
end

function PetscDrawViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscDrawViewFromOptions, $petsc_library), PetscErrorCode, (PetscDraw, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscDrawRealToColor(value, min, max)
    ccall((:PetscDrawRealToColor, $petsc_library), Cint, (PetscReal, PetscReal, PetscReal), value, min, max)
end

function PetscDrawOpenX(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscDrawOpenX, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Cint, Cint, Cint, Cint, Ptr{PetscDraw}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscDrawOpenImage(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawOpenImage, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Cint, Cint, Ptr{PetscDraw}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawOpenNull(arg1, arg2)
    ccall((:PetscDrawOpenNull, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscDraw}), arg1, arg2)
end

function PetscDrawDestroy(arg1)
    ccall((:PetscDrawDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscDraw},), arg1)
end

function PetscDrawIsNull(arg1, arg2)
    ccall((:PetscDrawIsNull, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscBool}), arg1, arg2)
end

function PetscDrawGetPopup(arg1, arg2)
    ccall((:PetscDrawGetPopup, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscDraw}), arg1, arg2)
end

function PetscDrawScalePopup(arg1, arg2, arg3)
    ccall((:PetscDrawScalePopup, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal), arg1, arg2, arg3)
end

function PetscDrawCheckResizedWindow(arg1)
    ccall((:PetscDrawCheckResizedWindow, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawResizeWindow(arg1, arg2, arg3)
    ccall((:PetscDrawResizeWindow, $petsc_library), PetscErrorCode, (PetscDraw, Cint, Cint), arg1, arg2, arg3)
end

function PetscDrawGetWindowSize(arg1, arg2, arg3)
    ccall((:PetscDrawGetWindowSize, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{Cint}, Ptr{Cint}), arg1, arg2, arg3)
end

function PetscDrawPixelToCoordinate(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawPixelToCoordinate, $petsc_library), PetscErrorCode, (PetscDraw, Cint, Cint, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawCoordinateToPixel(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawCoordinateToPixel, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, Ptr{Cint}, Ptr{Cint}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawIndicatorFunction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscDrawIndicatorFunction, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, Cint, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscDrawLine(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDrawLine, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, Cint), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDrawArrow(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDrawArrow, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, Cint), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDrawLineSetWidth(arg1, arg2)
    ccall((:PetscDrawLineSetWidth, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal), arg1, arg2)
end

function PetscDrawLineGetWidth(arg1, arg2)
    ccall((:PetscDrawLineGetWidth, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscReal}), arg1, arg2)
end

@enum PetscDrawMarkerType::UInt32 begin
    PETSC_DRAW_MARKER_CROSS = 0
    PETSC_DRAW_MARKER_POINT = 1
    PETSC_DRAW_MARKER_PLUS = 2
    PETSC_DRAW_MARKER_CIRCLE = 3
end

function PetscDrawMarker(arg1, arg2, arg3, arg4)
    ccall((:PetscDrawMarker, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, Cint), arg1, arg2, arg3, arg4)
end

function PetscDrawSetMarkerType(arg1, arg2)
    ccall((:PetscDrawSetMarkerType, $petsc_library), PetscErrorCode, (PetscDraw, PetscDrawMarkerType), arg1, arg2)
end

function PetscDrawGetMarkerType(arg1, arg2)
    ccall((:PetscDrawGetMarkerType, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscDrawMarkerType}), arg1, arg2)
end

function PetscDrawPoint(arg1, arg2, arg3, arg4)
    ccall((:PetscDrawPoint, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, Cint), arg1, arg2, arg3, arg4)
end

function PetscDrawPointPixel(arg1, arg2, arg3, arg4)
    ccall((:PetscDrawPointPixel, $petsc_library), PetscErrorCode, (PetscDraw, Cint, Cint, Cint), arg1, arg2, arg3, arg4)
end

function PetscDrawPointSetSize(arg1, arg2)
    ccall((:PetscDrawPointSetSize, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal), arg1, arg2)
end

function PetscDrawRectangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscDrawRectangle, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, Cint, Cint, Cint, Cint), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscDrawTriangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:PetscDrawTriangle, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, Cint, Cint, Cint), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function PetscDrawEllipse(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDrawEllipse, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal, Cint), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDrawTensorContourPatch(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscDrawTensorContourPatch, $petsc_library), PetscErrorCode, (PetscDraw, Cint, Cint, Ptr{PetscReal}, Ptr{PetscReal}, PetscReal, PetscReal, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscDrawTensorContour(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDrawTensorContour, $petsc_library), PetscErrorCode, (PetscDraw, Cint, Cint, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDrawString(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawString, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, Cint, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawStringCentered(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawStringCentered, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, Cint, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawStringBoxed(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscDrawStringBoxed, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, Cint, Cint, Ptr{Cchar}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscDrawStringVertical(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawStringVertical, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, Cint, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawStringSetSize(arg1, arg2, arg3)
    ccall((:PetscDrawStringSetSize, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal), arg1, arg2, arg3)
end

function PetscDrawStringGetSize(arg1, arg2, arg3)
    ccall((:PetscDrawStringGetSize, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscDrawSetViewPort(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawSetViewPort, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawGetViewPort(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawGetViewPort, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawSplitViewPort(arg1)
    ccall((:PetscDrawSplitViewPort, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawSetCoordinates(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawSetCoordinates, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawGetCoordinates(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawGetCoordinates, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawSetTitle(arg1, arg2)
    ccall((:PetscDrawSetTitle, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{Cchar}), arg1, arg2)
end

function PetscDrawAppendTitle(arg1, arg2)
    ccall((:PetscDrawAppendTitle, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{Cchar}), arg1, arg2)
end

function PetscDrawGetTitle(arg1, arg2)
    ccall((:PetscDrawGetTitle, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscDrawSetPause(arg1, arg2)
    ccall((:PetscDrawSetPause, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal), arg1, arg2)
end

function PetscDrawGetPause(arg1, arg2)
    ccall((:PetscDrawGetPause, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscReal}), arg1, arg2)
end

function PetscDrawPause(arg1)
    ccall((:PetscDrawPause, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawSetDoubleBuffer(arg1)
    ccall((:PetscDrawSetDoubleBuffer, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawClear(arg1)
    ccall((:PetscDrawClear, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawFlush(arg1)
    ccall((:PetscDrawFlush, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawSave(arg1)
    ccall((:PetscDrawSave, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawSaveMovie(arg1)
    ccall((:PetscDrawSaveMovie, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawBOP(arg1)
    ccall((:PetscDrawBOP, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawEOP(arg1)
    ccall((:PetscDrawEOP, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawSetDisplay(arg1, arg2)
    ccall((:PetscDrawSetDisplay, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{Cchar}), arg1, arg2)
end

function PetscDrawGetSingleton(arg1, arg2)
    ccall((:PetscDrawGetSingleton, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscDraw}), arg1, arg2)
end

function PetscDrawRestoreSingleton(arg1, arg2)
    ccall((:PetscDrawRestoreSingleton, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscDraw}), arg1, arg2)
end

function PetscDrawGetCurrentPoint(arg1, arg2, arg3)
    ccall((:PetscDrawGetCurrentPoint, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscDrawSetCurrentPoint(arg1, arg2, arg3)
    ccall((:PetscDrawSetCurrentPoint, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal), arg1, arg2, arg3)
end

function PetscDrawPushCurrentPoint(arg1, arg2, arg3)
    ccall((:PetscDrawPushCurrentPoint, $petsc_library), PetscErrorCode, (PetscDraw, PetscReal, PetscReal), arg1, arg2, arg3)
end

function PetscDrawPopCurrentPoint(arg1)
    ccall((:PetscDrawPopCurrentPoint, $petsc_library), PetscErrorCode, (PetscDraw,), arg1)
end

function PetscDrawGetBoundingBox(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawGetBoundingBox, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawSetVisible(arg1, arg2)
    ccall((:PetscDrawSetVisible, $petsc_library), PetscErrorCode, (PetscDraw, PetscBool), arg1, arg2)
end

@enum PetscDrawButton::UInt32 begin
    PETSC_BUTTON_NONE = 0
    PETSC_BUTTON_LEFT = 1
    PETSC_BUTTON_CENTER = 2
    PETSC_BUTTON_RIGHT = 3
    PETSC_BUTTON_WHEEL_UP = 4
    PETSC_BUTTON_WHEEL_DOWN = 5
    PETSC_BUTTON_LEFT_SHIFT = 6
    PETSC_BUTTON_CENTER_SHIFT = 7
    PETSC_BUTTON_RIGHT_SHIFT = 8
end

function PetscDrawGetMouseButton(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDrawGetMouseButton, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscDrawButton}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDrawZoom(arg1, arg2, arg3)
    ccall((:PetscDrawZoom, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PetscDrawAxisCreate(arg1, arg2)
    ccall((:PetscDrawAxisCreate, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscDrawAxis}), arg1, arg2)
end

function PetscDrawAxisDestroy(arg1)
    ccall((:PetscDrawAxisDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscDrawAxis},), arg1)
end

function PetscDrawAxisDraw(arg1)
    ccall((:PetscDrawAxisDraw, $petsc_library), PetscErrorCode, (PetscDrawAxis,), arg1)
end

function PetscDrawAxisSetLimits(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawAxisSetLimits, $petsc_library), PetscErrorCode, (PetscDrawAxis, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawAxisGetLimits(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawAxisGetLimits, $petsc_library), PetscErrorCode, (PetscDrawAxis, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawAxisSetHoldLimits(arg1, arg2)
    ccall((:PetscDrawAxisSetHoldLimits, $petsc_library), PetscErrorCode, (PetscDrawAxis, PetscBool), arg1, arg2)
end

function PetscDrawAxisSetColors(arg1, arg2, arg3, arg4)
    ccall((:PetscDrawAxisSetColors, $petsc_library), PetscErrorCode, (PetscDrawAxis, Cint, Cint, Cint), arg1, arg2, arg3, arg4)
end

function PetscDrawAxisSetLabels(arg1, arg2, arg3, arg4)
    ccall((:PetscDrawAxisSetLabels, $petsc_library), PetscErrorCode, (PetscDrawAxis, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3, arg4)
end

function PetscDrawLGCreate(arg1, arg2, arg3)
    ccall((:PetscDrawLGCreate, $petsc_library), PetscErrorCode, (PetscDraw, PetscInt, Ptr{PetscDrawLG}), arg1, arg2, arg3)
end

function PetscDrawLGDestroy(arg1)
    ccall((:PetscDrawLGDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscDrawLG},), arg1)
end

function PetscDrawLGAddPoint(arg1, arg2, arg3)
    ccall((:PetscDrawLGAddPoint, $petsc_library), PetscErrorCode, (PetscDrawLG, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscDrawLGAddCommonPoint(arg1, arg2, arg3)
    ccall((:PetscDrawLGAddCommonPoint, $petsc_library), PetscErrorCode, (PetscDrawLG, PetscReal, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscDrawLGAddPoints(arg1, arg2, arg3, arg4)
    ccall((:PetscDrawLGAddPoints, $petsc_library), PetscErrorCode, (PetscDrawLG, PetscInt, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}), arg1, arg2, arg3, arg4)
end

function PetscDrawLGDraw(arg1)
    ccall((:PetscDrawLGDraw, $petsc_library), PetscErrorCode, (PetscDrawLG,), arg1)
end

function PetscDrawLGSave(arg1)
    ccall((:PetscDrawLGSave, $petsc_library), PetscErrorCode, (PetscDrawLG,), arg1)
end

function PetscDrawLGView(arg1, arg2)
    ccall((:PetscDrawLGView, $petsc_library), PetscErrorCode, (PetscDrawLG, PetscViewer), arg1, arg2)
end

function PetscDrawLGReset(arg1)
    ccall((:PetscDrawLGReset, $petsc_library), PetscErrorCode, (PetscDrawLG,), arg1)
end

function PetscDrawLGSetDimension(arg1, arg2)
    ccall((:PetscDrawLGSetDimension, $petsc_library), PetscErrorCode, (PetscDrawLG, PetscInt), arg1, arg2)
end

function PetscDrawLGGetDimension(arg1, arg2)
    ccall((:PetscDrawLGGetDimension, $petsc_library), PetscErrorCode, (PetscDrawLG, Ptr{PetscInt}), arg1, arg2)
end

function PetscDrawLGSetLegend(arg1, arg2)
    ccall((:PetscDrawLGSetLegend, $petsc_library), PetscErrorCode, (PetscDrawLG, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscDrawLGGetAxis(arg1, arg2)
    ccall((:PetscDrawLGGetAxis, $petsc_library), PetscErrorCode, (PetscDrawLG, Ptr{PetscDrawAxis}), arg1, arg2)
end

function PetscDrawLGGetDraw(arg1, arg2)
    ccall((:PetscDrawLGGetDraw, $petsc_library), PetscErrorCode, (PetscDrawLG, Ptr{PetscDraw}), arg1, arg2)
end

function PetscDrawLGSetUseMarkers(arg1, arg2)
    ccall((:PetscDrawLGSetUseMarkers, $petsc_library), PetscErrorCode, (PetscDrawLG, PetscBool), arg1, arg2)
end

function PetscDrawLGSetLimits(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawLGSetLimits, $petsc_library), PetscErrorCode, (PetscDrawLG, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawLGSetColors(arg1, arg2)
    ccall((:PetscDrawLGSetColors, $petsc_library), PetscErrorCode, (PetscDrawLG, Ptr{Cint}), arg1, arg2)
end

function PetscDrawLGSetOptionsPrefix(arg1, arg2)
    ccall((:PetscDrawLGSetOptionsPrefix, $petsc_library), PetscErrorCode, (PetscDrawLG, Ptr{Cchar}), arg1, arg2)
end

function PetscDrawLGSetFromOptions(arg1)
    ccall((:PetscDrawLGSetFromOptions, $petsc_library), PetscErrorCode, (PetscDrawLG,), arg1)
end

function PetscDrawSPCreate(arg1, arg2, arg3)
    ccall((:PetscDrawSPCreate, $petsc_library), PetscErrorCode, (PetscDraw, Cint, Ptr{PetscDrawSP}), arg1, arg2, arg3)
end

function PetscDrawSPDestroy(arg1)
    ccall((:PetscDrawSPDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscDrawSP},), arg1)
end

function PetscDrawSPAddPoint(arg1, arg2, arg3)
    ccall((:PetscDrawSPAddPoint, $petsc_library), PetscErrorCode, (PetscDrawSP, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscDrawSPAddPoints(arg1, arg2, arg3, arg4)
    ccall((:PetscDrawSPAddPoints, $petsc_library), PetscErrorCode, (PetscDrawSP, Cint, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}), arg1, arg2, arg3, arg4)
end

function PetscDrawSPDraw(arg1, arg2)
    ccall((:PetscDrawSPDraw, $petsc_library), PetscErrorCode, (PetscDrawSP, PetscBool), arg1, arg2)
end

function PetscDrawSPSave(arg1)
    ccall((:PetscDrawSPSave, $petsc_library), PetscErrorCode, (PetscDrawSP,), arg1)
end

function PetscDrawSPReset(arg1)
    ccall((:PetscDrawSPReset, $petsc_library), PetscErrorCode, (PetscDrawSP,), arg1)
end

function PetscDrawSPGetDimension(arg1, arg2)
    ccall((:PetscDrawSPGetDimension, $petsc_library), PetscErrorCode, (PetscDrawSP, Ptr{Cint}), arg1, arg2)
end

function PetscDrawSPSetDimension(arg1, arg2)
    ccall((:PetscDrawSPSetDimension, $petsc_library), PetscErrorCode, (PetscDrawSP, Cint), arg1, arg2)
end

function PetscDrawSPGetAxis(arg1, arg2)
    ccall((:PetscDrawSPGetAxis, $petsc_library), PetscErrorCode, (PetscDrawSP, Ptr{PetscDrawAxis}), arg1, arg2)
end

function PetscDrawSPGetDraw(arg1, arg2)
    ccall((:PetscDrawSPGetDraw, $petsc_library), PetscErrorCode, (PetscDrawSP, Ptr{PetscDraw}), arg1, arg2)
end

function PetscDrawSPSetLimits(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawSPSetLimits, $petsc_library), PetscErrorCode, (PetscDrawSP, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawLGSPDraw(arg1, arg2)
    ccall((:PetscDrawLGSPDraw, $petsc_library), PetscErrorCode, (PetscDrawLG, PetscDrawSP), arg1, arg2)
end

function PetscDrawSPAddPointColorized(arg1, arg2, arg3, arg4)
    ccall((:PetscDrawSPAddPointColorized, $petsc_library), PetscErrorCode, (PetscDrawSP, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function PetscDrawHGCreate(arg1, arg2, arg3)
    ccall((:PetscDrawHGCreate, $petsc_library), PetscErrorCode, (PetscDraw, Cint, Ptr{PetscDrawHG}), arg1, arg2, arg3)
end

function PetscDrawHGDestroy(arg1)
    ccall((:PetscDrawHGDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscDrawHG},), arg1)
end

function PetscDrawHGAddValue(arg1, arg2)
    ccall((:PetscDrawHGAddValue, $petsc_library), PetscErrorCode, (PetscDrawHG, PetscReal), arg1, arg2)
end

function PetscDrawHGDraw(arg1)
    ccall((:PetscDrawHGDraw, $petsc_library), PetscErrorCode, (PetscDrawHG,), arg1)
end

function PetscDrawHGSave(arg1)
    ccall((:PetscDrawHGSave, $petsc_library), PetscErrorCode, (PetscDrawHG,), arg1)
end

function PetscDrawHGView(arg1, arg2)
    ccall((:PetscDrawHGView, $petsc_library), PetscErrorCode, (PetscDrawHG, PetscViewer), arg1, arg2)
end

function PetscDrawHGReset(arg1)
    ccall((:PetscDrawHGReset, $petsc_library), PetscErrorCode, (PetscDrawHG,), arg1)
end

function PetscDrawHGGetAxis(arg1, arg2)
    ccall((:PetscDrawHGGetAxis, $petsc_library), PetscErrorCode, (PetscDrawHG, Ptr{PetscDrawAxis}), arg1, arg2)
end

function PetscDrawHGGetDraw(arg1, arg2)
    ccall((:PetscDrawHGGetDraw, $petsc_library), PetscErrorCode, (PetscDrawHG, Ptr{PetscDraw}), arg1, arg2)
end

function PetscDrawHGSetLimits(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawHGSetLimits, $petsc_library), PetscErrorCode, (PetscDrawHG, PetscReal, PetscReal, Cint, Cint), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawHGSetNumberBins(arg1, arg2)
    ccall((:PetscDrawHGSetNumberBins, $petsc_library), PetscErrorCode, (PetscDrawHG, Cint), arg1, arg2)
end

function PetscDrawHGSetColor(arg1, arg2)
    ccall((:PetscDrawHGSetColor, $petsc_library), PetscErrorCode, (PetscDrawHG, Cint), arg1, arg2)
end

function PetscDrawHGCalcStats(arg1, arg2)
    ccall((:PetscDrawHGCalcStats, $petsc_library), PetscErrorCode, (PetscDrawHG, PetscBool), arg1, arg2)
end

function PetscDrawHGIntegerBins(arg1, arg2)
    ccall((:PetscDrawHGIntegerBins, $petsc_library), PetscErrorCode, (PetscDrawHG, PetscBool), arg1, arg2)
end

function PetscDrawBarCreate(arg1, arg2)
    ccall((:PetscDrawBarCreate, $petsc_library), PetscErrorCode, (PetscDraw, Ptr{PetscDrawBar}), arg1, arg2)
end

function PetscDrawBarSetData(arg1, arg2, arg3, arg4)
    ccall((:PetscDrawBarSetData, $petsc_library), PetscErrorCode, (PetscDrawBar, PetscInt, Ptr{PetscReal}, Ptr{Ptr{Cchar}}), arg1, arg2, arg3, arg4)
end

function PetscDrawBarDestroy(arg1)
    ccall((:PetscDrawBarDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscDrawBar},), arg1)
end

function PetscDrawBarDraw(arg1)
    ccall((:PetscDrawBarDraw, $petsc_library), PetscErrorCode, (PetscDrawBar,), arg1)
end

function PetscDrawBarSave(arg1)
    ccall((:PetscDrawBarSave, $petsc_library), PetscErrorCode, (PetscDrawBar,), arg1)
end

function PetscDrawBarSetColor(arg1, arg2)
    ccall((:PetscDrawBarSetColor, $petsc_library), PetscErrorCode, (PetscDrawBar, Cint), arg1, arg2)
end

function PetscDrawBarSetLimits(arg1, arg2, arg3)
    ccall((:PetscDrawBarSetLimits, $petsc_library), PetscErrorCode, (PetscDrawBar, PetscReal, PetscReal), arg1, arg2, arg3)
end

function PetscDrawBarSort(arg1, arg2, arg3)
    ccall((:PetscDrawBarSort, $petsc_library), PetscErrorCode, (PetscDrawBar, PetscBool, PetscReal), arg1, arg2, arg3)
end

function PetscDrawBarSetFromOptions(arg1)
    ccall((:PetscDrawBarSetFromOptions, $petsc_library), PetscErrorCode, (PetscDrawBar,), arg1)
end

function PetscDrawBarGetAxis(arg1, arg2)
    ccall((:PetscDrawBarGetAxis, $petsc_library), PetscErrorCode, (PetscDrawBar, Ptr{PetscDrawAxis}), arg1, arg2)
end

function PetscDrawBarGetDraw(arg1, arg2)
    ccall((:PetscDrawBarGetDraw, $petsc_library), PetscErrorCode, (PetscDrawBar, Ptr{PetscDraw}), arg1, arg2)
end

function PetscDrawUtilitySetCmap(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDrawUtilitySetCmap, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Cint, Ptr{Cuchar}, Ptr{Cuchar}, Ptr{Cuchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDrawUtilitySetGamma(arg1)
    ccall((:PetscDrawUtilitySetGamma, $petsc_library), PetscErrorCode, (PetscReal,), arg1)
end

function PetscMemTypeToString(mtype)
    ccall((:PetscMemTypeToString, $petsc_library), Ptr{Cchar}, (PetscMemType,), mtype)
end

@enum PetscOffloadMask::UInt32 begin
    PETSC_OFFLOAD_UNALLOCATED = 0
    PETSC_OFFLOAD_CPU = 1
    PETSC_OFFLOAD_GPU = 2
    PETSC_OFFLOAD_BOTH = 3
    PETSC_OFFLOAD_VECKOKKOS = 256
    # PETSC_OFFLOAD_KOKKOS = 256
end

function PetscOffloadMaskToString(mask)
    ccall((:PetscOffloadMaskToString, $petsc_library), Ptr{Cchar}, (PetscOffloadMask,), mask)
end

function PetscOffloadMaskToMemType(mask)
    ccall((:PetscOffloadMaskToMemType, $petsc_library), PetscMemType, (PetscOffloadMask,), mask)
end

@enum PetscDeviceInitType::UInt32 begin
    PETSC_DEVICE_INIT_NONE = 0
    PETSC_DEVICE_INIT_LAZY = 1
    PETSC_DEVICE_INIT_EAGER = 2
end

@enum PetscDeviceType::UInt32 begin
    PETSC_DEVICE_HOST = 0
    PETSC_DEVICE_CUDA = 1
    PETSC_DEVICE_HIP = 2
    PETSC_DEVICE_SYCL = 3
    PETSC_DEVICE_MAX = 4
end

@enum PetscDeviceAttribute::UInt32 begin
    PETSC_DEVICE_ATTR_SIZE_T_SHARED_MEM_PER_BLOCK = 0
    PETSC_DEVICE_ATTR_MAX = 1
end

mutable struct _n_PetscDevice end

const PetscDevice = Ptr{_n_PetscDevice}

@enum PetscStreamType::UInt32 begin
    PETSC_STREAM_DEFAULT = 0
    PETSC_STREAM_NONBLOCKING = 1
    PETSC_STREAM_DEFAULT_WITH_BARRIER = 2
    PETSC_STREAM_NONBLOCKING_WITH_BARRIER = 3
    PETSC_STREAM_MAX = 4
end

@enum PetscDeviceContextJoinMode::UInt32 begin
    PETSC_DEVICE_CONTEXT_JOIN_DESTROY = 0
    PETSC_DEVICE_CONTEXT_JOIN_SYNC = 1
    PETSC_DEVICE_CONTEXT_JOIN_NO_SYNC = 2
end

@enum PetscDeviceCopyMode::UInt32 begin
    PETSC_DEVICE_COPY_HTOH = 0
    PETSC_DEVICE_COPY_DTOH = 1
    PETSC_DEVICE_COPY_HTOD = 2
    PETSC_DEVICE_COPY_DTOD = 3
    PETSC_DEVICE_COPY_AUTO = 4
end

function PetscOffloadMaskToDeviceCopyMode(dest, src)
    ccall((:PetscOffloadMaskToDeviceCopyMode, $petsc_library), PetscDeviceCopyMode, (PetscOffloadMask, PetscOffloadMask), dest, src)
end

function PetscMemTypeToDeviceCopyMode(dest, src)
    ccall((:PetscMemTypeToDeviceCopyMode, $petsc_library), PetscDeviceCopyMode, (PetscMemType, PetscMemType), dest, src)
end

@enum PetscMemoryAccessMode::UInt32 begin
    PETSC_MEMORY_ACCESS_READ = 1
    PETSC_MEMORY_ACCESS_WRITE = 2
    PETSC_MEMORY_ACCESS_READ_WRITE = 3
end

function PetscMemoryAccessModeToString(mode)
    ccall((:PetscMemoryAccessModeToString, $petsc_library), Ptr{Cchar}, (PetscMemoryAccessMode,), mode)
end

function PetscDeviceInitializePackage()
    ccall((:PetscDeviceInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscDeviceFinalizePackage()
    ccall((:PetscDeviceFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PetscGetMemType(arg1, arg2)
    ccall((:PetscGetMemType, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Ptr{PetscMemType}), arg1, arg2)
end

function PetscDeviceCreate(arg1, arg2, arg3)
    ccall((:PetscDeviceCreate, $petsc_library), PetscErrorCode, (PetscDeviceType, PetscInt, Ptr{PetscDevice}), arg1, arg2, arg3)
end

function PetscDeviceDestroy(arg1)
    ccall((:PetscDeviceDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscDevice},), arg1)
end

function PetscDeviceConfigure(arg1)
    ccall((:PetscDeviceConfigure, $petsc_library), PetscErrorCode, (PetscDevice,), arg1)
end

function PetscDeviceView(arg1, arg2)
    ccall((:PetscDeviceView, $petsc_library), PetscErrorCode, (PetscDevice, PetscViewer), arg1, arg2)
end

function PetscDeviceGetType(arg1, arg2)
    ccall((:PetscDeviceGetType, $petsc_library), PetscErrorCode, (PetscDevice, Ptr{PetscDeviceType}), arg1, arg2)
end

function PetscDeviceGetDeviceId(arg1, arg2)
    ccall((:PetscDeviceGetDeviceId, $petsc_library), PetscErrorCode, (PetscDevice, Ptr{PetscInt}), arg1, arg2)
end

function PETSC_DEVICE_DEFAULT()
    ccall((:PETSC_DEVICE_DEFAULT, $petsc_library), PetscDeviceType, ())
end

function PetscDeviceSetDefaultDeviceType(arg1)
    ccall((:PetscDeviceSetDefaultDeviceType, $petsc_library), PetscErrorCode, (PetscDeviceType,), arg1)
end

function PetscDeviceInitialize(arg1)
    ccall((:PetscDeviceInitialize, $petsc_library), PetscErrorCode, (PetscDeviceType,), arg1)
end

function PetscDeviceInitialized(arg1)
    ccall((:PetscDeviceInitialized, $petsc_library), PetscBool, (PetscDeviceType,), arg1)
end

function PetscDeviceContextCreate(arg1)
    ccall((:PetscDeviceContextCreate, $petsc_library), PetscErrorCode, (Ptr{PetscDeviceContext},), arg1)
end

function PetscDeviceContextDestroy(arg1)
    ccall((:PetscDeviceContextDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscDeviceContext},), arg1)
end

function PetscDeviceContextSetStreamType(arg1, arg2)
    ccall((:PetscDeviceContextSetStreamType, $petsc_library), PetscErrorCode, (PetscDeviceContext, PetscStreamType), arg1, arg2)
end

function PetscDeviceContextGetStreamType(arg1, arg2)
    ccall((:PetscDeviceContextGetStreamType, $petsc_library), PetscErrorCode, (PetscDeviceContext, Ptr{PetscStreamType}), arg1, arg2)
end

function PetscDeviceContextSetDevice(arg1, arg2)
    ccall((:PetscDeviceContextSetDevice, $petsc_library), PetscErrorCode, (PetscDeviceContext, PetscDevice), arg1, arg2)
end

function PetscDeviceContextGetDevice(arg1, arg2)
    ccall((:PetscDeviceContextGetDevice, $petsc_library), PetscErrorCode, (PetscDeviceContext, Ptr{PetscDevice}), arg1, arg2)
end

function PetscDeviceContextGetDeviceType(arg1, arg2)
    ccall((:PetscDeviceContextGetDeviceType, $petsc_library), PetscErrorCode, (PetscDeviceContext, Ptr{PetscDeviceType}), arg1, arg2)
end

function PetscDeviceContextSetUp(arg1)
    ccall((:PetscDeviceContextSetUp, $petsc_library), PetscErrorCode, (PetscDeviceContext,), arg1)
end

function PetscDeviceContextDuplicate(arg1, arg2)
    ccall((:PetscDeviceContextDuplicate, $petsc_library), PetscErrorCode, (PetscDeviceContext, Ptr{PetscDeviceContext}), arg1, arg2)
end

function PetscDeviceContextQueryIdle(arg1, arg2)
    ccall((:PetscDeviceContextQueryIdle, $petsc_library), PetscErrorCode, (PetscDeviceContext, Ptr{PetscBool}), arg1, arg2)
end

function PetscDeviceContextWaitForContext(arg1, arg2)
    ccall((:PetscDeviceContextWaitForContext, $petsc_library), PetscErrorCode, (PetscDeviceContext, PetscDeviceContext), arg1, arg2)
end

function PetscDeviceContextForkWithStreamType(arg1, arg2, arg3, arg4)
    ccall((:PetscDeviceContextForkWithStreamType, $petsc_library), PetscErrorCode, (PetscDeviceContext, PetscStreamType, PetscInt, Ptr{Ptr{PetscDeviceContext}}), arg1, arg2, arg3, arg4)
end

function PetscDeviceContextFork(arg1, arg2, arg3)
    ccall((:PetscDeviceContextFork, $petsc_library), PetscErrorCode, (PetscDeviceContext, PetscInt, Ptr{Ptr{PetscDeviceContext}}), arg1, arg2, arg3)
end

function PetscDeviceContextJoin(arg1, arg2, arg3, arg4)
    ccall((:PetscDeviceContextJoin, $petsc_library), PetscErrorCode, (PetscDeviceContext, PetscInt, PetscDeviceContextJoinMode, Ptr{Ptr{PetscDeviceContext}}), arg1, arg2, arg3, arg4)
end

function PetscDeviceContextSynchronize(arg1)
    ccall((:PetscDeviceContextSynchronize, $petsc_library), PetscErrorCode, (PetscDeviceContext,), arg1)
end

function PetscDeviceContextSetFromOptions(arg1, arg2)
    ccall((:PetscDeviceContextSetFromOptions, $petsc_library), PetscErrorCode, (MPI_Comm, PetscDeviceContext), arg1, arg2)
end

function PetscDeviceContextView(arg1, arg2)
    ccall((:PetscDeviceContextView, $petsc_library), PetscErrorCode, (PetscDeviceContext, PetscViewer), arg1, arg2)
end

function PetscDeviceContextViewFromOptions(arg1, arg2, name)
    ccall((:PetscDeviceContextViewFromOptions, $petsc_library), PetscErrorCode, (PetscDeviceContext, PetscObject, Ptr{Cchar}), arg1, arg2, name)
end

function PetscDeviceContextGetCurrentContext(arg1)
    ccall((:PetscDeviceContextGetCurrentContext, $petsc_library), PetscErrorCode, (Ptr{PetscDeviceContext},), arg1)
end

function PetscDeviceContextSetCurrentContext(arg1)
    ccall((:PetscDeviceContextSetCurrentContext, $petsc_library), PetscErrorCode, (PetscDeviceContext,), arg1)
end

function PetscDeviceContextGetStreamHandle(arg1, arg2)
    ccall((:PetscDeviceContextGetStreamHandle, $petsc_library), PetscErrorCode, (PetscDeviceContext, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

mutable struct _p_PetscSF end

const PetscSF = Ptr{_p_PetscSF}

const PetscSFType = Ptr{Cchar}

const VecScatter = PetscSF

const VecScatterType = PetscSFType

mutable struct _p_PetscSection end

const PetscSection = Ptr{_p_PetscSection}

mutable struct _p_PetscSectionSym end

const PetscSectionSym = Ptr{_p_PetscSectionSym}

const PetscSectionSymType = Ptr{Cchar}

mutable struct _p_IS end

const IS = Ptr{_p_IS}

mutable struct _n_ISColoring end

const ISColoring = Ptr{_n_ISColoring}

function ISInitializePackage()
    ccall((:ISInitializePackage, $petsc_library), PetscErrorCode, ())
end

function ISFinalizePackage()
    ccall((:ISFinalizePackage, $petsc_library), PetscErrorCode, ())
end

const ISType = Ptr{Cchar}

function ISSetType(arg1, arg2)
    ccall((:ISSetType, $petsc_library), PetscErrorCode, (IS, ISType), arg1, arg2)
end

function ISGetType(arg1, arg2)
    ccall((:ISGetType, $petsc_library), PetscErrorCode, (IS, Ptr{ISType}), arg1, arg2)
end

function ISRegister(arg1, arg2)
    ccall((:ISRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function ISRegisterAll()
    ccall((:ISRegisterAll, $petsc_library), PetscErrorCode, ())
end

function ISCreate(arg1, arg2)
    ccall((:ISCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{IS}), arg1, arg2)
end

function ISDestroy(arg1)
    ccall((:ISDestroy, $petsc_library), PetscErrorCode, (Ptr{IS},), arg1)
end

function ISSetPermutation(arg1)
    ccall((:ISSetPermutation, $petsc_library), PetscErrorCode, (IS,), arg1)
end

function ISPermutation(arg1, arg2)
    ccall((:ISPermutation, $petsc_library), PetscErrorCode, (IS, Ptr{PetscBool}), arg1, arg2)
end

function ISSetIdentity(arg1)
    ccall((:ISSetIdentity, $petsc_library), PetscErrorCode, (IS,), arg1)
end

function ISIdentity(arg1, arg2)
    ccall((:ISIdentity, $petsc_library), PetscErrorCode, (IS, Ptr{PetscBool}), arg1, arg2)
end

function ISContiguousLocal(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISContiguousLocal, $petsc_library), PetscErrorCode, (IS, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

@enum ISInfo::Int32 begin
    IS_INFO_MIN = -1
    IS_SORTED = 0
    IS_UNIQUE = 1
    IS_PERMUTATION = 2
    IS_INTERVAL = 3
    IS_IDENTITY = 4
    IS_INFO_MAX = 5
end

@enum ISInfoType::UInt32 begin
    IS_LOCAL = 0
    IS_GLOBAL = 1
end

function ISSetInfo(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISSetInfo, $petsc_library), PetscErrorCode, (IS, ISInfo, ISInfoType, PetscBool, PetscBool), arg1, arg2, arg3, arg4, arg5)
end

function ISGetInfo(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISGetInfo, $petsc_library), PetscErrorCode, (IS, ISInfo, ISInfoType, PetscBool, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function ISClearInfoCache(arg1, arg2)
    ccall((:ISClearInfoCache, $petsc_library), PetscErrorCode, (IS, PetscBool), arg1, arg2)
end

function ISGetIndices(arg1, arg2)
    ccall((:ISGetIndices, $petsc_library), PetscErrorCode, (IS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISRestoreIndices(arg1, arg2)
    ccall((:ISRestoreIndices, $petsc_library), PetscErrorCode, (IS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISGetTotalIndices(arg1, arg2)
    ccall((:ISGetTotalIndices, $petsc_library), PetscErrorCode, (IS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISRestoreTotalIndices(arg1, arg2)
    ccall((:ISRestoreTotalIndices, $petsc_library), PetscErrorCode, (IS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISGetNonlocalIndices(arg1, arg2)
    ccall((:ISGetNonlocalIndices, $petsc_library), PetscErrorCode, (IS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISRestoreNonlocalIndices(arg1, arg2)
    ccall((:ISRestoreNonlocalIndices, $petsc_library), PetscErrorCode, (IS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISGetNonlocalIS(arg1, arg2)
    ccall((:ISGetNonlocalIS, $petsc_library), PetscErrorCode, (IS, Ptr{IS}), arg1, arg2)
end

function ISRestoreNonlocalIS(arg1, arg2)
    ccall((:ISRestoreNonlocalIS, $petsc_library), PetscErrorCode, (IS, Ptr{IS}), arg1, arg2)
end

function ISGetSize(arg1, arg2)
    ccall((:ISGetSize, $petsc_library), PetscErrorCode, (IS, Ptr{PetscInt}), arg1, arg2)
end

function ISGetLocalSize(arg1, arg2)
    ccall((:ISGetLocalSize, $petsc_library), PetscErrorCode, (IS, Ptr{PetscInt}), arg1, arg2)
end

function ISInvertPermutation(arg1, arg2, arg3)
    ccall((:ISInvertPermutation, $petsc_library), PetscErrorCode, (IS, PetscInt, Ptr{IS}), arg1, arg2, arg3)
end

function ISView(arg1, arg2)
    ccall((:ISView, $petsc_library), PetscErrorCode, (IS, PetscViewer), arg1, arg2)
end

function ISViewFromOptions(arg1, arg2, arg3)
    ccall((:ISViewFromOptions, $petsc_library), PetscErrorCode, (IS, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function ISLoad(arg1, arg2)
    ccall((:ISLoad, $petsc_library), PetscErrorCode, (IS, PetscViewer), arg1, arg2)
end

function ISEqual(arg1, arg2, arg3)
    ccall((:ISEqual, $petsc_library), PetscErrorCode, (IS, IS, Ptr{PetscBool}), arg1, arg2, arg3)
end

function ISEqualUnsorted(arg1, arg2, arg3)
    ccall((:ISEqualUnsorted, $petsc_library), PetscErrorCode, (IS, IS, Ptr{PetscBool}), arg1, arg2, arg3)
end

function ISSort(arg1)
    ccall((:ISSort, $petsc_library), PetscErrorCode, (IS,), arg1)
end

function ISSortRemoveDups(arg1)
    ccall((:ISSortRemoveDups, $petsc_library), PetscErrorCode, (IS,), arg1)
end

function ISSorted(arg1, arg2)
    ccall((:ISSorted, $petsc_library), PetscErrorCode, (IS, Ptr{PetscBool}), arg1, arg2)
end

function ISDifference(arg1, arg2, arg3)
    ccall((:ISDifference, $petsc_library), PetscErrorCode, (IS, IS, Ptr{IS}), arg1, arg2, arg3)
end

function ISSum(arg1, arg2, arg3)
    ccall((:ISSum, $petsc_library), PetscErrorCode, (IS, IS, Ptr{IS}), arg1, arg2, arg3)
end

function ISExpand(arg1, arg2, arg3)
    ccall((:ISExpand, $petsc_library), PetscErrorCode, (IS, IS, Ptr{IS}), arg1, arg2, arg3)
end

function ISIntersect(arg1, arg2, arg3)
    ccall((:ISIntersect, $petsc_library), PetscErrorCode, (IS, IS, Ptr{IS}), arg1, arg2, arg3)
end

function ISGetMinMax(arg1, arg2, arg3)
    ccall((:ISGetMinMax, $petsc_library), PetscErrorCode, (IS, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function ISLocate(arg1, arg2, arg3)
    ccall((:ISLocate, $petsc_library), PetscErrorCode, (IS, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function ISGetPointRange(arg1, arg2, arg3, arg4)
    ccall((:ISGetPointRange, $petsc_library), PetscErrorCode, (IS, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function ISRestorePointRange(arg1, arg2, arg3, arg4)
    ccall((:ISRestorePointRange, $petsc_library), PetscErrorCode, (IS, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function ISGetPointSubrange(arg1, arg2, arg3, arg4)
    ccall((:ISGetPointSubrange, $petsc_library), PetscErrorCode, (IS, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function ISGetBlockSize(arg1, arg2)
    ccall((:ISGetBlockSize, $petsc_library), PetscErrorCode, (IS, Ptr{PetscInt}), arg1, arg2)
end

function ISSetBlockSize(arg1, arg2)
    ccall((:ISSetBlockSize, $petsc_library), PetscErrorCode, (IS, PetscInt), arg1, arg2)
end

function ISToGeneral(arg1)
    ccall((:ISToGeneral, $petsc_library), PetscErrorCode, (IS,), arg1)
end

function ISDuplicate(arg1, arg2)
    ccall((:ISDuplicate, $petsc_library), PetscErrorCode, (IS, Ptr{IS}), arg1, arg2)
end

function ISCopy(arg1, arg2)
    ccall((:ISCopy, $petsc_library), PetscErrorCode, (IS, IS), arg1, arg2)
end

function ISShift(arg1, arg2, arg3)
    ccall((:ISShift, $petsc_library), PetscErrorCode, (IS, PetscInt, IS), arg1, arg2, arg3)
end

function ISAllGather(arg1, arg2)
    ccall((:ISAllGather, $petsc_library), PetscErrorCode, (IS, Ptr{IS}), arg1, arg2)
end

function ISComplement(arg1, arg2, arg3, arg4)
    ccall((:ISComplement, $petsc_library), PetscErrorCode, (IS, PetscInt, PetscInt, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function ISConcatenate(arg1, arg2, arg3, arg4)
    ccall((:ISConcatenate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function ISListToPair(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISListToPair, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{IS}, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3, arg4, arg5)
end

function ISPairToList(arg1, arg2, arg3, arg4)
    ccall((:ISPairToList, $petsc_library), PetscErrorCode, (IS, IS, Ptr{PetscInt}, Ptr{Ptr{IS}}), arg1, arg2, arg3, arg4)
end

function ISEmbed(arg1, arg2, arg3, arg4)
    ccall((:ISEmbed, $petsc_library), PetscErrorCode, (IS, IS, PetscBool, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function ISSortPermutation(arg1, arg2, arg3)
    ccall((:ISSortPermutation, $petsc_library), PetscErrorCode, (IS, PetscBool, Ptr{IS}), arg1, arg2, arg3)
end

function ISOnComm(arg1, arg2, arg3, arg4)
    ccall((:ISOnComm, $petsc_library), PetscErrorCode, (IS, MPI_Comm, PetscCopyMode, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function ISRenumber(arg1, arg2, arg3, arg4)
    ccall((:ISRenumber, $petsc_library), PetscErrorCode, (IS, IS, Ptr{PetscInt}, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function ISCreateSubIS(arg1, arg2, arg3)
    ccall((:ISCreateSubIS, $petsc_library), PetscErrorCode, (IS, IS, Ptr{IS}), arg1, arg2, arg3)
end

function ISCreateGeneral(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISCreateGeneral, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscInt}, PetscCopyMode, Ptr{IS}), arg1, arg2, arg3, arg4, arg5)
end

function ISGeneralSetIndices(arg1, arg2, arg3, arg4)
    ccall((:ISGeneralSetIndices, $petsc_library), PetscErrorCode, (IS, PetscInt, Ptr{PetscInt}, PetscCopyMode), arg1, arg2, arg3, arg4)
end

function ISGeneralSetIndicesFromMask(arg1, arg2, arg3, arg4)
    ccall((:ISGeneralSetIndicesFromMask, $petsc_library), PetscErrorCode, (IS, PetscInt, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function ISGeneralFilter(arg1, arg2, arg3)
    ccall((:ISGeneralFilter, $petsc_library), PetscErrorCode, (IS, PetscInt, PetscInt), arg1, arg2, arg3)
end

function ISCreateBlock(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:ISCreateBlock, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscInt}, PetscCopyMode, Ptr{IS}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function ISBlockSetIndices(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISBlockSetIndices, $petsc_library), PetscErrorCode, (IS, PetscInt, PetscInt, Ptr{PetscInt}, PetscCopyMode), arg1, arg2, arg3, arg4, arg5)
end

function ISBlockGetIndices(arg1, arg2)
    ccall((:ISBlockGetIndices, $petsc_library), PetscErrorCode, (IS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISBlockRestoreIndices(arg1, arg2)
    ccall((:ISBlockRestoreIndices, $petsc_library), PetscErrorCode, (IS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISBlockGetLocalSize(arg1, arg2)
    ccall((:ISBlockGetLocalSize, $petsc_library), PetscErrorCode, (IS, Ptr{PetscInt}), arg1, arg2)
end

function ISBlockGetSize(arg1, arg2)
    ccall((:ISBlockGetSize, $petsc_library), PetscErrorCode, (IS, Ptr{PetscInt}), arg1, arg2)
end

function ISCreateStride(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISCreateStride, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{IS}), arg1, arg2, arg3, arg4, arg5)
end

function ISStrideSetStride(arg1, arg2, arg3, arg4)
    ccall((:ISStrideSetStride, $petsc_library), PetscErrorCode, (IS, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function ISStrideGetInfo(arg1, arg2, arg3)
    ccall((:ISStrideGetInfo, $petsc_library), PetscErrorCode, (IS, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

@enum ISGlobalToLocalMappingMode::UInt32 begin
    IS_GTOLM_MASK = 0
    IS_GTOLM_DROP = 1
end

const ISLocalToGlobalMappingType = Ptr{Cchar}

function ISLocalToGlobalMappingSetType(arg1, arg2)
    ccall((:ISLocalToGlobalMappingSetType, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, ISLocalToGlobalMappingType), arg1, arg2)
end

function ISLocalToGlobalMappingGetType(arg1, arg2)
    ccall((:ISLocalToGlobalMappingGetType, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{ISLocalToGlobalMappingType}), arg1, arg2)
end

function ISLocalToGlobalMappingRegister(arg1, arg2)
    ccall((:ISLocalToGlobalMappingRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function ISLocalToGlobalMappingRegisterAll()
    ccall((:ISLocalToGlobalMappingRegisterAll, $petsc_library), PetscErrorCode, ())
end

function ISLocalToGlobalMappingCreate(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:ISLocalToGlobalMappingCreate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscInt}, PetscCopyMode, Ptr{ISLocalToGlobalMapping}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function ISLocalToGlobalMappingCreateIS(arg1, arg2)
    ccall((:ISLocalToGlobalMappingCreateIS, $petsc_library), PetscErrorCode, (IS, Ptr{ISLocalToGlobalMapping}), arg1, arg2)
end

function ISLocalToGlobalMappingCreateSF(arg1, arg2, arg3)
    ccall((:ISLocalToGlobalMappingCreateSF, $petsc_library), PetscErrorCode, (PetscSF, PetscInt, Ptr{ISLocalToGlobalMapping}), arg1, arg2, arg3)
end

function ISLocalToGlobalMappingSetFromOptions(arg1)
    ccall((:ISLocalToGlobalMappingSetFromOptions, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping,), arg1)
end

function ISLocalToGlobalMappingSetUp(arg1)
    ccall((:ISLocalToGlobalMappingSetUp, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping,), arg1)
end

function ISLocalToGlobalMappingView(arg1, arg2)
    ccall((:ISLocalToGlobalMappingView, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, PetscViewer), arg1, arg2)
end

function ISLocalToGlobalMappingLoad(arg1, arg2)
    ccall((:ISLocalToGlobalMappingLoad, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, PetscViewer), arg1, arg2)
end

function ISLocalToGlobalMappingViewFromOptions(arg1, arg2, arg3)
    ccall((:ISLocalToGlobalMappingViewFromOptions, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function ISLocalToGlobalMappingConcatenate(arg1, arg2, arg3, arg4)
    ccall((:ISLocalToGlobalMappingConcatenate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{ISLocalToGlobalMapping}, Ptr{ISLocalToGlobalMapping}), arg1, arg2, arg3, arg4)
end

function ISLocalToGlobalMappingDuplicate(arg1, arg2)
    ccall((:ISLocalToGlobalMappingDuplicate, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{ISLocalToGlobalMapping}), arg1, arg2)
end

function ISLocalToGlobalMappingDestroy(arg1)
    ccall((:ISLocalToGlobalMappingDestroy, $petsc_library), PetscErrorCode, (Ptr{ISLocalToGlobalMapping},), arg1)
end

function ISLocalToGlobalMappingGetSize(arg1, arg2)
    ccall((:ISLocalToGlobalMappingGetSize, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscInt}), arg1, arg2)
end

function ISLocalToGlobalMappingGetIndices(arg1, arg2)
    ccall((:ISLocalToGlobalMappingGetIndices, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISLocalToGlobalMappingRestoreIndices(arg1, arg2)
    ccall((:ISLocalToGlobalMappingRestoreIndices, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISLocalToGlobalMappingGetBlockIndices(arg1, arg2)
    ccall((:ISLocalToGlobalMappingGetBlockIndices, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISLocalToGlobalMappingRestoreBlockIndices(arg1, arg2)
    ccall((:ISLocalToGlobalMappingRestoreBlockIndices, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function ISLocalToGlobalMappingGetBlockSize(arg1, arg2)
    ccall((:ISLocalToGlobalMappingGetBlockSize, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscInt}), arg1, arg2)
end

function ISLocalToGlobalMappingSetBlockSize(arg1, arg2)
    ccall((:ISLocalToGlobalMappingSetBlockSize, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, PetscInt), arg1, arg2)
end

function ISLocalToGlobalMappingApplyIS(arg1, arg2, arg3)
    ccall((:ISLocalToGlobalMappingApplyIS, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, IS, Ptr{IS}), arg1, arg2, arg3)
end

function ISGlobalToLocalMappingApply(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:ISGlobalToLocalMappingApply, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, ISGlobalToLocalMappingMode, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function ISGlobalToLocalMappingApplyBlock(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:ISGlobalToLocalMappingApplyBlock, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, ISGlobalToLocalMappingMode, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function ISGlobalToLocalMappingApplyIS(arg1, arg2, arg3, arg4)
    ccall((:ISGlobalToLocalMappingApplyIS, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, ISGlobalToLocalMappingMode, IS, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function ISLocalToGlobalMappingGetNodeInfo(arg1, arg2, arg3, arg4)
    ccall((:ISLocalToGlobalMappingGetNodeInfo, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{Ptr{PetscInt}}}), arg1, arg2, arg3, arg4)
end

function ISLocalToGlobalMappingRestoreNodeInfo(arg1, arg2, arg3, arg4)
    ccall((:ISLocalToGlobalMappingRestoreNodeInfo, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{Ptr{PetscInt}}}), arg1, arg2, arg3, arg4)
end

function ISLocalToGlobalMappingGetInfo(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISLocalToGlobalMappingGetInfo, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{Ptr{PetscInt}}}), arg1, arg2, arg3, arg4, arg5)
end

function ISLocalToGlobalMappingRestoreInfo(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISLocalToGlobalMappingRestoreInfo, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{Ptr{PetscInt}}}), arg1, arg2, arg3, arg4, arg5)
end

function ISLocalToGlobalMappingGetBlockNodeInfo(arg1, arg2, arg3, arg4)
    ccall((:ISLocalToGlobalMappingGetBlockNodeInfo, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{Ptr{PetscInt}}}), arg1, arg2, arg3, arg4)
end

function ISLocalToGlobalMappingRestoreBlockNodeInfo(arg1, arg2, arg3, arg4)
    ccall((:ISLocalToGlobalMappingRestoreBlockNodeInfo, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{Ptr{PetscInt}}}), arg1, arg2, arg3, arg4)
end

function ISLocalToGlobalMappingGetBlockInfo(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISLocalToGlobalMappingGetBlockInfo, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{Ptr{PetscInt}}}), arg1, arg2, arg3, arg4, arg5)
end

function ISLocalToGlobalMappingRestoreBlockInfo(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISLocalToGlobalMappingRestoreBlockInfo, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{Ptr{PetscInt}}}), arg1, arg2, arg3, arg4, arg5)
end

function ISLocalToGlobalMappingGetBlockMultiLeavesSF(arg1, arg2)
    ccall((:ISLocalToGlobalMappingGetBlockMultiLeavesSF, $petsc_library), PetscErrorCode, (ISLocalToGlobalMapping, Ptr{PetscSF}), arg1, arg2)
end

@enum ISColoringType::UInt32 begin
    IS_COLORING_GLOBAL = 0
    IS_COLORING_LOCAL = 1
end

const ISColoringValue = Cushort

function ISAllGatherColors(arg1, arg2, arg3, arg4, arg5)
    ccall((:ISAllGatherColors, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{ISColoringValue}, Ptr{PetscInt}, Ptr{Ptr{ISColoringValue}}), arg1, arg2, arg3, arg4, arg5)
end

function ISColoringCreate(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:ISColoringCreate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{ISColoringValue}, PetscCopyMode, Ptr{ISColoring}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function ISColoringDestroy(arg1)
    ccall((:ISColoringDestroy, $petsc_library), PetscErrorCode, (Ptr{ISColoring},), arg1)
end

function ISColoringView(arg1, arg2)
    ccall((:ISColoringView, $petsc_library), PetscErrorCode, (ISColoring, PetscViewer), arg1, arg2)
end

function ISColoringViewFromOptions(arg1, arg2, arg3)
    ccall((:ISColoringViewFromOptions, $petsc_library), PetscErrorCode, (ISColoring, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function ISColoringGetIS(arg1, arg2, arg3, arg4)
    ccall((:ISColoringGetIS, $petsc_library), PetscErrorCode, (ISColoring, PetscCopyMode, Ptr{PetscInt}, Ptr{Ptr{IS}}), arg1, arg2, arg3, arg4)
end

function ISColoringRestoreIS(arg1, arg2, arg3)
    ccall((:ISColoringRestoreIS, $petsc_library), PetscErrorCode, (ISColoring, PetscCopyMode, Ptr{Ptr{IS}}), arg1, arg2, arg3)
end

function ISColoringReference(arg1)
    ccall((:ISColoringReference, $petsc_library), PetscErrorCode, (ISColoring,), arg1)
end

function ISColoringSetType(arg1, arg2)
    ccall((:ISColoringSetType, $petsc_library), PetscErrorCode, (ISColoring, ISColoringType), arg1, arg2)
end

function ISColoringGetType(arg1, arg2)
    ccall((:ISColoringGetType, $petsc_library), PetscErrorCode, (ISColoring, Ptr{ISColoringType}), arg1, arg2)
end

function ISColoringGetColors(arg1, arg2, arg3, arg4)
    ccall((:ISColoringGetColors, $petsc_library), PetscErrorCode, (ISColoring, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{ISColoringValue}}), arg1, arg2, arg3, arg4)
end

function ISBuildTwoSided(arg1, arg2, arg3)
    ccall((:ISBuildTwoSided, $petsc_library), PetscErrorCode, (IS, IS, Ptr{IS}), arg1, arg2, arg3)
end

function ISPartitioningToNumbering(arg1, arg2)
    ccall((:ISPartitioningToNumbering, $petsc_library), PetscErrorCode, (IS, Ptr{IS}), arg1, arg2)
end

function ISPartitioningCount(arg1, arg2, arg3)
    ccall((:ISPartitioningCount, $petsc_library), PetscErrorCode, (IS, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function ISCompressIndicesGeneral(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:ISCompressIndicesGeneral, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, PetscInt, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function ISCompressIndicesSorted(n, bs, imax, is_in, is_out)
    ccall((:ISCompressIndicesSorted, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, Ptr{IS}, Ptr{IS}), n, bs, imax, is_in, is_out)
end

function ISExpandIndicesGeneral(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:ISExpandIndicesGeneral, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, PetscInt, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function ISSetLayout(arg1, arg2)
    ccall((:ISSetLayout, $petsc_library), PetscErrorCode, (IS, PetscLayout), arg1, arg2)
end

const PetscViewerType = Ptr{Cchar}

function PetscViewerInitializePackage()
    ccall((:PetscViewerInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscViewerFinalizePackage()
    ccall((:PetscViewerFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PetscViewerRegister(arg1, arg2)
    ccall((:PetscViewerRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscViewerCreate(arg1, arg2)
    ccall((:PetscViewerCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscViewer}), arg1, arg2)
end

function PetscViewerSetFromOptions(arg1)
    ccall((:PetscViewerSetFromOptions, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerASCIIOpenWithFILE(arg1, arg2, arg3)
    ccall((:PetscViewerASCIIOpenWithFILE, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Libc.FILE}, Ptr{PetscViewer}), arg1, arg2, arg3)
end

function PetscViewerASCIIOpen(arg1, arg2, arg3)
    ccall((:PetscViewerASCIIOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{PetscViewer}), arg1, arg2, arg3)
end

function PetscViewerASCIISetFILE(arg1, arg2)
    ccall((:PetscViewerASCIISetFILE, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Libc.FILE}), arg1, arg2)
end

function PetscViewerBinaryOpen(arg1, arg2, arg3, arg4)
    ccall((:PetscViewerBinaryOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscFileMode, Ptr{PetscViewer}), arg1, arg2, arg3, arg4)
end

function PetscViewerADIOSOpen(arg1, arg2, arg3, arg4)
    ccall((:PetscViewerADIOSOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscFileMode, Ptr{PetscViewer}), arg1, arg2, arg3, arg4)
end

function PetscViewerBinaryGetFlowControl(arg1, arg2)
    ccall((:PetscViewerBinaryGetFlowControl, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscInt}), arg1, arg2)
end

function PetscViewerBinarySetFlowControl(arg1, arg2)
    ccall((:PetscViewerBinarySetFlowControl, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt), arg1, arg2)
end

function PetscViewerBinarySetUseMPIIO(arg1, arg2)
    ccall((:PetscViewerBinarySetUseMPIIO, $petsc_library), PetscErrorCode, (PetscViewer, PetscBool), arg1, arg2)
end

function PetscViewerBinaryGetUseMPIIO(arg1, arg2)
    ccall((:PetscViewerBinaryGetUseMPIIO, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscBool}), arg1, arg2)
end

function PetscViewerBinaryGetMPIIODescriptor(arg1, arg2)
    ccall((:PetscViewerBinaryGetMPIIODescriptor, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{MPI_File}), arg1, arg2)
end

function PetscViewerBinaryGetMPIIOOffset(arg1, arg2)
    ccall((:PetscViewerBinaryGetMPIIOOffset, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{MPI_Offset}), arg1, arg2)
end

function PetscViewerBinaryAddMPIIOOffset(arg1, arg2)
    ccall((:PetscViewerBinaryAddMPIIOOffset, $petsc_library), PetscErrorCode, (PetscViewer, MPI_Offset), arg1, arg2)
end

function PetscViewerSocketOpen(arg1, arg2, arg3, arg4)
    ccall((:PetscViewerSocketOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Cint, Ptr{PetscViewer}), arg1, arg2, arg3, arg4)
end

function PetscViewerStringOpen(arg1, arg2, arg3, arg4)
    ccall((:PetscViewerStringOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Csize_t, Ptr{PetscViewer}), arg1, arg2, arg3, arg4)
end

function PetscViewerDrawOpen(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscViewerDrawOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Cint, Cint, Cint, Cint, Ptr{PetscViewer}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscViewerDrawSetDrawType(arg1, arg2)
    ccall((:PetscViewerDrawSetDrawType, $petsc_library), PetscErrorCode, (PetscViewer, PetscDrawType), arg1, arg2)
end

function PetscViewerDrawGetDrawType(arg1, arg2)
    ccall((:PetscViewerDrawGetDrawType, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscDrawType}), arg1, arg2)
end

function PetscViewerDrawSetTitle(arg1, arg2)
    ccall((:PetscViewerDrawSetTitle, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cchar}), arg1, arg2)
end

function PetscViewerDrawGetTitle(arg1, arg2)
    ccall((:PetscViewerDrawGetTitle, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscViewerDrawGetDraw(arg1, arg2, arg3)
    ccall((:PetscViewerDrawGetDraw, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt, Ptr{PetscDraw}), arg1, arg2, arg3)
end

function PetscViewerDrawBaseAdd(arg1, arg2)
    ccall((:PetscViewerDrawBaseAdd, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt), arg1, arg2)
end

function PetscViewerDrawBaseSet(arg1, arg2)
    ccall((:PetscViewerDrawBaseSet, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt), arg1, arg2)
end

function PetscViewerDrawGetDrawLG(arg1, arg2, arg3)
    ccall((:PetscViewerDrawGetDrawLG, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt, Ptr{PetscDrawLG}), arg1, arg2, arg3)
end

function PetscViewerDrawGetDrawAxis(arg1, arg2, arg3)
    ccall((:PetscViewerDrawGetDrawAxis, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt, Ptr{PetscDrawAxis}), arg1, arg2, arg3)
end

function PetscViewerMathematicaOpen(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscViewerMathematicaOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Cint, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscViewer}), arg1, arg2, arg3, arg4, arg5)
end

function PetscViewerSiloOpen(arg1, arg2, arg3)
    ccall((:PetscViewerSiloOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{PetscViewer}), arg1, arg2, arg3)
end

function PetscViewerMatlabOpen(arg1, arg2, arg3, arg4)
    ccall((:PetscViewerMatlabOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscFileMode, Ptr{PetscViewer}), arg1, arg2, arg3, arg4)
end

@enum PetscViewerGLVisType::UInt32 begin
    PETSC_VIEWER_GLVIS_DUMP = 0
    PETSC_VIEWER_GLVIS_SOCKET = 1
end

function PetscViewerGLVisOpen(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscViewerGLVisOpen, $petsc_library), PetscErrorCode, (MPI_Comm, PetscViewerGLVisType, Ptr{Cchar}, PetscInt, Ptr{PetscViewer}), arg1, arg2, arg3, arg4, arg5)
end

function PetscViewerGLVisSetPrecision(arg1, arg2)
    ccall((:PetscViewerGLVisSetPrecision, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt), arg1, arg2)
end

function PetscViewerGLVisSetSnapId(arg1, arg2)
    ccall((:PetscViewerGLVisSetSnapId, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt), arg1, arg2)
end

function PetscViewerGLVisSetFields(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscViewerGLVisSetFields, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt, Ptr{Ptr{Cchar}}, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{PetscObject}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscViewerGetType(arg1, arg2)
    ccall((:PetscViewerGetType, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscViewerType}), arg1, arg2)
end

function PetscViewerSetType(arg1, arg2)
    ccall((:PetscViewerSetType, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerType), arg1, arg2)
end

function PetscViewerDestroy(arg1)
    ccall((:PetscViewerDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscViewer},), arg1)
end

function PetscViewerGetSubViewer(arg1, arg2, arg3)
    ccall((:PetscViewerGetSubViewer, $petsc_library), PetscErrorCode, (PetscViewer, MPI_Comm, Ptr{PetscViewer}), arg1, arg2, arg3)
end

function PetscViewerRestoreSubViewer(arg1, arg2, arg3)
    ccall((:PetscViewerRestoreSubViewer, $petsc_library), PetscErrorCode, (PetscViewer, MPI_Comm, Ptr{PetscViewer}), arg1, arg2, arg3)
end

function PetscViewerSetUp(arg1)
    ccall((:PetscViewerSetUp, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerView(arg1, arg2)
    ccall((:PetscViewerView, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewer), arg1, arg2)
end

function PetscViewerViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscViewerViewFromOptions, $petsc_library), PetscErrorCode, (PetscViewer, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscViewerSetOptionsPrefix(arg1, arg2)
    ccall((:PetscViewerSetOptionsPrefix, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cchar}), arg1, arg2)
end

function PetscViewerAppendOptionsPrefix(arg1, arg2)
    ccall((:PetscViewerAppendOptionsPrefix, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cchar}), arg1, arg2)
end

function PetscViewerGetOptionsPrefix(arg1, arg2)
    ccall((:PetscViewerGetOptionsPrefix, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscViewerReadable(arg1, arg2)
    ccall((:PetscViewerReadable, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscBool}), arg1, arg2)
end

function PetscViewerWritable(arg1, arg2)
    ccall((:PetscViewerWritable, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscBool}), arg1, arg2)
end

function PetscViewerCheckReadable(arg1)
    ccall((:PetscViewerCheckReadable, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerCheckWritable(arg1)
    ccall((:PetscViewerCheckWritable, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerSetFormat(arg1, arg2)
    ccall((:PetscViewerSetFormat, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerFormat), arg1, arg2)
end

function PetscViewerPushFormat(arg1, arg2)
    ccall((:PetscViewerPushFormat, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerFormat), arg1, arg2)
end

function PetscViewerPopFormat(arg1)
    ccall((:PetscViewerPopFormat, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerGetFormat(arg1, arg2)
    ccall((:PetscViewerGetFormat, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscViewerFormat}), arg1, arg2)
end

function PetscViewerFlush(arg1)
    ccall((:PetscViewerFlush, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscOptionsPushGetViewerOff(arg1)
    ccall((:PetscOptionsPushGetViewerOff, $petsc_library), PetscErrorCode, (PetscBool,), arg1)
end

function PetscOptionsPopGetViewerOff()
    ccall((:PetscOptionsPopGetViewerOff, $petsc_library), PetscErrorCode, ())
end

function PetscOptionsGetViewerOff(arg1)
    ccall((:PetscOptionsGetViewerOff, $petsc_library), PetscErrorCode, (Ptr{PetscBool},), arg1)
end

function PetscOptionsGetViewer(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscOptionsGetViewer, $petsc_library), PetscErrorCode, (MPI_Comm, PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscViewer}, Ptr{PetscViewerFormat}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscOptionsGetViewers(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscOptionsGetViewers, $petsc_library), PetscErrorCode, (MPI_Comm, PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscInt}, Ptr{PetscViewer}, Ptr{PetscViewerFormat}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscOptionsRestoreViewer(arg1)
    ccall((:PetscOptionsRestoreViewer, $petsc_library), PetscErrorCode, (Ptr{PetscViewer},), arg1)
end

mutable struct PetscViewerAndFormat
    viewer::PetscViewer
    format::PetscViewerFormat
    lg::PetscDrawLG
    view_interval::PetscInt
    data::Ptr{Cvoid}
    PetscViewerAndFormat() = new()
end

function PetscViewerAndFormatCreate(arg1, arg2, arg3)
    ccall((:PetscViewerAndFormatCreate, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerFormat, Ptr{Ptr{PetscViewerAndFormat}}), arg1, arg2, arg3)
end

function PetscViewerAndFormatDestroy(arg1)
    ccall((:PetscViewerAndFormatDestroy, $petsc_library), PetscErrorCode, (Ptr{Ptr{PetscViewerAndFormat}},), arg1)
end

function PetscViewerASCIIGetPointer(arg1, arg2)
    ccall((:PetscViewerASCIIGetPointer, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Ptr{Libc.FILE}}), arg1, arg2)
end

function PetscViewerFileGetMode(arg1, arg2)
    ccall((:PetscViewerFileGetMode, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscFileMode}), arg1, arg2)
end

function PetscViewerFileSetMode(arg1, arg2)
    ccall((:PetscViewerFileSetMode, $petsc_library), PetscErrorCode, (PetscViewer, PetscFileMode), arg1, arg2)
end

function PetscViewerRead(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscViewerRead, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cvoid}, PetscInt, Ptr{PetscInt}, PetscDataType), arg1, arg2, arg3, arg4, arg5)
end

function PetscViewerASCIIPushSynchronized(arg1)
    ccall((:PetscViewerASCIIPushSynchronized, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerASCIIPopSynchronized(arg1)
    ccall((:PetscViewerASCIIPopSynchronized, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerASCIIPushTab(arg1)
    ccall((:PetscViewerASCIIPushTab, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerASCIIPopTab(arg1)
    ccall((:PetscViewerASCIIPopTab, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerASCIIUseTabs(arg1, arg2)
    ccall((:PetscViewerASCIIUseTabs, $petsc_library), PetscErrorCode, (PetscViewer, PetscBool), arg1, arg2)
end

function PetscViewerASCIISetTab(arg1, arg2)
    ccall((:PetscViewerASCIISetTab, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt), arg1, arg2)
end

function PetscViewerASCIIGetTab(arg1, arg2)
    ccall((:PetscViewerASCIIGetTab, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscInt}), arg1, arg2)
end

function PetscViewerASCIIAddTab(arg1, arg2)
    ccall((:PetscViewerASCIIAddTab, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt), arg1, arg2)
end

function PetscViewerASCIISubtractTab(arg1, arg2)
    ccall((:PetscViewerASCIISubtractTab, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt), arg1, arg2)
end

function PetscViewerASCIIRead(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscViewerASCIIRead, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cvoid}, PetscInt, Ptr{PetscInt}, PetscDataType), arg1, arg2, arg3, arg4, arg5)
end

function PetscViewerBinaryGetDescriptor(arg1, arg2)
    ccall((:PetscViewerBinaryGetDescriptor, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cint}), arg1, arg2)
end

function PetscViewerBinaryGetInfoPointer(arg1, arg2)
    ccall((:PetscViewerBinaryGetInfoPointer, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Ptr{Libc.FILE}}), arg1, arg2)
end

function PetscViewerBinaryRead(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscViewerBinaryRead, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cvoid}, PetscInt, Ptr{PetscInt}, PetscDataType), arg1, arg2, arg3, arg4, arg5)
end

function PetscViewerBinaryWrite(arg1, arg2, arg3, arg4)
    ccall((:PetscViewerBinaryWrite, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cvoid}, PetscInt, PetscDataType), arg1, arg2, arg3, arg4)
end

function PetscViewerBinaryReadAll(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscViewerBinaryReadAll, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cvoid}, PetscInt, PetscInt64, PetscInt64, PetscDataType), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscViewerBinaryWriteAll(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscViewerBinaryWriteAll, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cvoid}, PetscInt, PetscInt64, PetscInt64, PetscDataType), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscViewerStringSetString(arg1, arg2, arg3)
    ccall((:PetscViewerStringSetString, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cchar}, Csize_t), arg1, arg2, arg3)
end

function PetscViewerStringGetStringRead(arg1, arg2, arg3)
    ccall((:PetscViewerStringGetStringRead, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Ptr{Cchar}}, Ptr{Csize_t}), arg1, arg2, arg3)
end

function PetscViewerStringSetOwnString(arg1)
    ccall((:PetscViewerStringSetOwnString, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerDrawClear(arg1)
    ccall((:PetscViewerDrawClear, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerDrawSetHold(arg1, arg2)
    ccall((:PetscViewerDrawSetHold, $petsc_library), PetscErrorCode, (PetscViewer, PetscBool), arg1, arg2)
end

function PetscViewerDrawGetHold(arg1, arg2)
    ccall((:PetscViewerDrawGetHold, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscBool}), arg1, arg2)
end

function PetscViewerDrawSetPause(arg1, arg2)
    ccall((:PetscViewerDrawSetPause, $petsc_library), PetscErrorCode, (PetscViewer, PetscReal), arg1, arg2)
end

function PetscViewerDrawGetPause(arg1, arg2)
    ccall((:PetscViewerDrawGetPause, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscReal}), arg1, arg2)
end

function PetscViewerDrawSetInfo(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscViewerDrawSetInfo, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cchar}, Ptr{Cchar}, Cint, Cint, Cint, Cint), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscViewerDrawResize(arg1, arg2, arg3)
    ccall((:PetscViewerDrawResize, $petsc_library), PetscErrorCode, (PetscViewer, Cint, Cint), arg1, arg2, arg3)
end

function PetscViewerDrawSetBounds(arg1, arg2, arg3)
    ccall((:PetscViewerDrawSetBounds, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscViewerDrawGetBounds(arg1, arg2, arg3)
    ccall((:PetscViewerDrawGetBounds, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscInt}, Ptr{Ptr{PetscReal}}), arg1, arg2, arg3)
end

function PetscViewerSocketSetConnection(arg1, arg2, arg3)
    ccall((:PetscViewerSocketSetConnection, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cchar}, Cint), arg1, arg2, arg3)
end

function PetscViewerBinarySkipInfo(arg1)
    ccall((:PetscViewerBinarySkipInfo, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerBinarySetSkipInfo(arg1, arg2)
    ccall((:PetscViewerBinarySetSkipInfo, $petsc_library), PetscErrorCode, (PetscViewer, PetscBool), arg1, arg2)
end

function PetscViewerBinaryGetSkipInfo(arg1, arg2)
    ccall((:PetscViewerBinaryGetSkipInfo, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscBool}), arg1, arg2)
end

function PetscViewerBinarySetSkipOptions(arg1, arg2)
    ccall((:PetscViewerBinarySetSkipOptions, $petsc_library), PetscErrorCode, (PetscViewer, PetscBool), arg1, arg2)
end

function PetscViewerBinaryGetSkipOptions(arg1, arg2)
    ccall((:PetscViewerBinaryGetSkipOptions, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscBool}), arg1, arg2)
end

function PetscViewerBinarySetSkipHeader(arg1, arg2)
    ccall((:PetscViewerBinarySetSkipHeader, $petsc_library), PetscErrorCode, (PetscViewer, PetscBool), arg1, arg2)
end

function PetscViewerBinaryGetSkipHeader(arg1, arg2)
    ccall((:PetscViewerBinaryGetSkipHeader, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscBool}), arg1, arg2)
end

function PetscViewerBinaryReadStringArray(arg1, arg2)
    ccall((:PetscViewerBinaryReadStringArray, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Ptr{Ptr{Cchar}}}), arg1, arg2)
end

function PetscViewerBinaryWriteStringArray(arg1, arg2)
    ccall((:PetscViewerBinaryWriteStringArray, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscViewerFileSetName(arg1, arg2)
    ccall((:PetscViewerFileSetName, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cchar}), arg1, arg2)
end

function PetscViewerFileGetName(arg1, arg2)
    ccall((:PetscViewerFileGetName, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscViewerVUGetPointer(arg1, arg2)
    ccall((:PetscViewerVUGetPointer, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Ptr{Libc.FILE}}), arg1, arg2)
end

function PetscViewerVUSetVecSeen(arg1, arg2)
    ccall((:PetscViewerVUSetVecSeen, $petsc_library), PetscErrorCode, (PetscViewer, PetscBool), arg1, arg2)
end

function PetscViewerVUGetVecSeen(arg1, arg2)
    ccall((:PetscViewerVUGetVecSeen, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscBool}), arg1, arg2)
end

function PetscViewerVUFlushDeferred(arg1)
    ccall((:PetscViewerVUFlushDeferred, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerVUSetMode(viewer, mode)
    ccall((:PetscViewerVUSetMode, $petsc_library), PetscErrorCode, (PetscViewer, PetscFileMode), viewer, mode)
end

function PetscViewerMathematicaInitializePackage()
    ccall((:PetscViewerMathematicaInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscViewerMathematicaFinalizePackage()
    ccall((:PetscViewerMathematicaFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PetscViewerMathematicaGetName(arg1, arg2)
    ccall((:PetscViewerMathematicaGetName, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PetscViewerMathematicaSetName(arg1, arg2)
    ccall((:PetscViewerMathematicaSetName, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cchar}), arg1, arg2)
end

function PetscViewerMathematicaClearName(arg1)
    ccall((:PetscViewerMathematicaClearName, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerMathematicaSkipPackets(arg1, arg2)
    ccall((:PetscViewerMathematicaSkipPackets, $petsc_library), PetscErrorCode, (PetscViewer, Cint), arg1, arg2)
end

function PetscViewerSiloClearName(arg1)
    ccall((:PetscViewerSiloClearName, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

function PetscViewerSiloClearMeshName(arg1)
    ccall((:PetscViewerSiloClearMeshName, $petsc_library), PetscErrorCode, (PetscViewer,), arg1)
end

@enum PetscViewerVTKFieldType::UInt32 begin
    PETSC_VTK_INVALID = 0
    PETSC_VTK_POINT_FIELD = 1
    PETSC_VTK_POINT_VECTOR_FIELD = 2
    PETSC_VTK_CELL_FIELD = 3
    PETSC_VTK_CELL_VECTOR_FIELD = 4
end

function PetscViewerVTKAddField(arg1, arg2, PetscViewerVTKWriteFunction, arg4, arg5, arg6, arg7)
    ccall((:PetscViewerVTKAddField, $petsc_library), PetscErrorCode, (PetscViewer, PetscObject, Ptr{Cvoid}, PetscInt, PetscViewerVTKFieldType, PetscBool, PetscObject), arg1, arg2, PetscViewerVTKWriteFunction, arg4, arg5, arg6, arg7)
end

function PetscViewerVTKGetDM(arg1, arg2)
    ccall((:PetscViewerVTKGetDM, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscObject}), arg1, arg2)
end

function PetscViewerVTKOpen(arg1, arg2, arg3, arg4)
    ccall((:PetscViewerVTKOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscFileMode, Ptr{PetscViewer}), arg1, arg2, arg3, arg4)
end

function PetscViewerASCIIGetStdout(arg1, arg2)
    ccall((:PetscViewerASCIIGetStdout, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscViewer}), arg1, arg2)
end

function PetscViewerASCIIGetStderr(arg1, arg2)
    ccall((:PetscViewerASCIIGetStderr, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscViewer}), arg1, arg2)
end

function PETSC_VIEWER_HDF5_(arg1)
    ccall((:PETSC_VIEWER_HDF5_, $petsc_library), PetscViewer, (MPI_Comm,), arg1)
end

function PETSC_VIEWER_GLVIS_(arg1)
    ccall((:PETSC_VIEWER_GLVIS_, $petsc_library), PetscViewer, (MPI_Comm,), arg1)
end

function PETSC_VIEWER_EXODUSII_(arg1)
    ccall((:PETSC_VIEWER_EXODUSII_, $petsc_library), PetscViewer, (MPI_Comm,), arg1)
end

function PetscViewerFlowControlStart(arg1, arg2, arg3)
    ccall((:PetscViewerFlowControlStart, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscViewerFlowControlStepMain(arg1, arg2, arg3, arg4)
    ccall((:PetscViewerFlowControlStepMain, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt, Ptr{PetscInt}, PetscInt), arg1, arg2, arg3, arg4)
end

function PetscViewerFlowControlEndMain(arg1, arg2)
    ccall((:PetscViewerFlowControlEndMain, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscInt}), arg1, arg2)
end

function PetscViewerFlowControlStepWorker(arg1, arg2, arg3)
    ccall((:PetscViewerFlowControlStepWorker, $petsc_library), PetscErrorCode, (PetscViewer, PetscMPIInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscViewerFlowControlEndWorker(arg1, arg2)
    ccall((:PetscViewerFlowControlEndWorker, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscInt}), arg1, arg2)
end

function PetscViewerFlowControlStepMaster(viewer, i, mcnt, cnt)
    ccall((:PetscViewerFlowControlStepMaster, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt, Ptr{PetscInt}, PetscInt), viewer, i, mcnt, cnt)
end

function PetscViewerFlowControlEndMaster(viewer, mcnt)
    ccall((:PetscViewerFlowControlEndMaster, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscInt}), viewer, mcnt)
end

function PetscViewerMatlabPutArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscViewerMatlabPutArray, $petsc_library), PetscErrorCode, (PetscViewer, Cint, Cint, Ptr{PetscScalar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscViewerMatlabGetArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscViewerMatlabGetArray, $petsc_library), PetscErrorCode, (PetscViewer, Cint, Cint, Ptr{PetscScalar}, Ptr{Cchar}), arg1, arg2, arg3, arg4, arg5)
end

function PetscViewerMatlabPutVariable(arg1, arg2, arg3)
    ccall((:PetscViewerMatlabPutVariable, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2, arg3)
end

mutable struct _n_PetscViewers end

const PetscViewers = Ptr{_n_PetscViewers}

function PetscViewersCreate(arg1, arg2)
    ccall((:PetscViewersCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscViewers}), arg1, arg2)
end

function PetscViewersDestroy(arg1)
    ccall((:PetscViewersDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscViewers},), arg1)
end

function PetscViewersGetViewer(arg1, arg2, arg3)
    ccall((:PetscViewersGetViewer, $petsc_library), PetscErrorCode, (PetscViewers, PetscInt, Ptr{PetscViewer}), arg1, arg2, arg3)
end

@enum ScatterMode::UInt32 begin
    SCATTER_FORWARD = 0
    SCATTER_REVERSE = 1
    SCATTER_FORWARD_LOCAL = 2
    SCATTER_REVERSE_LOCAL = 3
end

function VecScatterSetType(arg1, arg2)
    ccall((:VecScatterSetType, $petsc_library), PetscErrorCode, (VecScatter, VecScatterType), arg1, arg2)
end

function VecScatterGetType(arg1, arg2)
    ccall((:VecScatterGetType, $petsc_library), PetscErrorCode, (VecScatter, Ptr{VecScatterType}), arg1, arg2)
end

function VecScatterSetFromOptions(arg1)
    ccall((:VecScatterSetFromOptions, $petsc_library), PetscErrorCode, (VecScatter,), arg1)
end

function VecScatterRegister(arg1, arg2)
    ccall((:VecScatterRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function VecScatterCreate(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecScatterCreate, $petsc_library), PetscErrorCode, (Vec, IS, Vec, IS, Ptr{VecScatter}), arg1, arg2, arg3, arg4, arg5)
end

function VecInitializePackage()
    ccall((:VecInitializePackage, $petsc_library), PetscErrorCode, ())
end

function VecFinalizePackage()
    ccall((:VecFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function VecCreate(arg1, arg2)
    ccall((:VecCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Vec}), arg1, arg2)
end

function VecCreateFromOptions(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecCreateFromOptions, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscInt, PetscInt, PetscInt, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecCreateSeq(arg1, arg2, arg3)
    ccall((:VecCreateSeq, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function VecCreateMPI(arg1, arg2, arg3, arg4)
    ccall((:VecCreateMPI, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function VecCreateSeqWithArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecCreateSeqWithArray, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function VecCreateMPIWithArray(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecCreateMPIWithArray, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecCreateShared(arg1, arg2, arg3, arg4)
    ccall((:VecCreateShared, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function VecSetFromOptions(arg1)
    ccall((:VecSetFromOptions, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecViewFromOptions(arg1, arg2, arg3)
    ccall((:VecViewFromOptions, $petsc_library), PetscErrorCode, (Vec, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function VecSetUp(arg1)
    ccall((:VecSetUp, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecDestroy(arg1)
    ccall((:VecDestroy, $petsc_library), PetscErrorCode, (Ptr{Vec},), arg1)
end

function VecZeroEntries(arg1)
    ccall((:VecZeroEntries, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecSetOptionsPrefix(arg1, arg2)
    ccall((:VecSetOptionsPrefix, $petsc_library), PetscErrorCode, (Vec, Ptr{Cchar}), arg1, arg2)
end

function VecAppendOptionsPrefix(arg1, arg2)
    ccall((:VecAppendOptionsPrefix, $petsc_library), PetscErrorCode, (Vec, Ptr{Cchar}), arg1, arg2)
end

function VecGetOptionsPrefix(arg1, arg2)
    ccall((:VecGetOptionsPrefix, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function VecSetSizes(arg1, arg2, arg3)
    ccall((:VecSetSizes, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt), arg1, arg2, arg3)
end

function VecDotNorm2(arg1, arg2, arg3, arg4)
    ccall((:VecDotNorm2, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscScalar}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function VecDot(arg1, arg2, arg3)
    ccall((:VecDot, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function VecDotRealPart(arg1, arg2, arg3)
    ccall((:VecDotRealPart, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecTDot(arg1, arg2, arg3)
    ccall((:VecTDot, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function VecMDot(arg1, arg2, arg3, arg4)
    ccall((:VecMDot, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{Vec}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function VecMTDot(arg1, arg2, arg3, arg4)
    ccall((:VecMTDot, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{Vec}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function VecGetSubVector(arg1, arg2, arg3)
    ccall((:VecGetSubVector, $petsc_library), PetscErrorCode, (Vec, IS, Ptr{Vec}), arg1, arg2, arg3)
end

function VecRestoreSubVector(arg1, arg2, arg3)
    ccall((:VecRestoreSubVector, $petsc_library), PetscErrorCode, (Vec, IS, Ptr{Vec}), arg1, arg2, arg3)
end

function VecConcatenate(arg1, arg2, arg3, arg4)
    ccall((:VecConcatenate, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Vec}, Ptr{Vec}, Ptr{Ptr{IS}}), arg1, arg2, arg3, arg4)
end

@enum NormType::UInt32 begin
    NORM_1 = 0
    NORM_2 = 1
    NORM_FROBENIUS = 2
    NORM_INFINITY = 3
    NORM_1_AND_2 = 4
end

@enum ReductionType::UInt32 begin
    REDUCTION_SUM_REALPART = 10
    REDUCTION_MEAN_REALPART = 11
    REDUCTION_SUM_IMAGINARYPART = 12
    REDUCTION_MEAN_IMAGINARYPART = 13
end

function VecNorm(arg1, arg2, arg3)
    ccall((:VecNorm, $petsc_library), PetscErrorCode, (Vec, NormType, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecNormAvailable(arg1, arg2, arg3, arg4)
    ccall((:VecNormAvailable, $petsc_library), PetscErrorCode, (Vec, NormType, Ptr{PetscBool}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function VecNormalize(arg1, arg2)
    ccall((:VecNormalize, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscReal}), arg1, arg2)
end

function VecSum(arg1, arg2)
    ccall((:VecSum, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}), arg1, arg2)
end

function VecMean(arg1, arg2)
    ccall((:VecMean, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}), arg1, arg2)
end

function VecMax(arg1, arg2, arg3)
    ccall((:VecMax, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecMin(arg1, arg2, arg3)
    ccall((:VecMin, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecScale(arg1, arg2)
    ccall((:VecScale, $petsc_library), PetscErrorCode, (Vec, PetscScalar), arg1, arg2)
end

function VecCopy(arg1, arg2)
    ccall((:VecCopy, $petsc_library), PetscErrorCode, (Vec, Vec), arg1, arg2)
end

function VecSetRandom(arg1, arg2)
    ccall((:VecSetRandom, $petsc_library), PetscErrorCode, (Vec, PetscRandom), arg1, arg2)
end

function VecSet(arg1, arg2)
    ccall((:VecSet, $petsc_library), PetscErrorCode, (Vec, PetscScalar), arg1, arg2)
end

function VecSetInf(arg1)
    ccall((:VecSetInf, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecSwap(arg1, arg2)
    ccall((:VecSwap, $petsc_library), PetscErrorCode, (Vec, Vec), arg1, arg2)
end

function VecAXPY(arg1, arg2, arg3)
    ccall((:VecAXPY, $petsc_library), PetscErrorCode, (Vec, PetscScalar, Vec), arg1, arg2, arg3)
end

function VecAXPBY(arg1, arg2, arg3, arg4)
    ccall((:VecAXPBY, $petsc_library), PetscErrorCode, (Vec, PetscScalar, PetscScalar, Vec), arg1, arg2, arg3, arg4)
end

function VecMAXPY(arg1, arg2, arg3, arg4)
    ccall((:VecMAXPY, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscScalar}, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function VecMAXPBY(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecMAXPBY, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscScalar}, PetscScalar, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function VecAYPX(arg1, arg2, arg3)
    ccall((:VecAYPX, $petsc_library), PetscErrorCode, (Vec, PetscScalar, Vec), arg1, arg2, arg3)
end

function VecWAXPY(arg1, arg2, arg3, arg4)
    ccall((:VecWAXPY, $petsc_library), PetscErrorCode, (Vec, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4)
end

function VecAXPBYPCZ(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecAXPBYPCZ, $petsc_library), PetscErrorCode, (Vec, PetscScalar, PetscScalar, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecPointwiseMax(arg1, arg2, arg3)
    ccall((:VecPointwiseMax, $petsc_library), PetscErrorCode, (Vec, Vec, Vec), arg1, arg2, arg3)
end

function VecPointwiseMaxAbs(arg1, arg2, arg3)
    ccall((:VecPointwiseMaxAbs, $petsc_library), PetscErrorCode, (Vec, Vec, Vec), arg1, arg2, arg3)
end

function VecPointwiseMin(arg1, arg2, arg3)
    ccall((:VecPointwiseMin, $petsc_library), PetscErrorCode, (Vec, Vec, Vec), arg1, arg2, arg3)
end

function VecPointwiseMult(arg1, arg2, arg3)
    ccall((:VecPointwiseMult, $petsc_library), PetscErrorCode, (Vec, Vec, Vec), arg1, arg2, arg3)
end

function VecPointwiseDivide(arg1, arg2, arg3)
    ccall((:VecPointwiseDivide, $petsc_library), PetscErrorCode, (Vec, Vec, Vec), arg1, arg2, arg3)
end

function VecMaxPointwiseDivide(arg1, arg2, arg3)
    ccall((:VecMaxPointwiseDivide, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecShift(arg1, arg2)
    ccall((:VecShift, $petsc_library), PetscErrorCode, (Vec, PetscScalar), arg1, arg2)
end

function VecReciprocal(arg1)
    ccall((:VecReciprocal, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecPermute(arg1, arg2, arg3)
    ccall((:VecPermute, $petsc_library), PetscErrorCode, (Vec, IS, PetscBool), arg1, arg2, arg3)
end

function VecSqrtAbs(arg1)
    ccall((:VecSqrtAbs, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecLog(arg1)
    ccall((:VecLog, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecExp(arg1)
    ccall((:VecExp, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecAbs(arg1)
    ccall((:VecAbs, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecDuplicate(arg1, arg2)
    ccall((:VecDuplicate, $petsc_library), PetscErrorCode, (Vec, Ptr{Vec}), arg1, arg2)
end

function VecDuplicateVecs(arg1, arg2, arg3)
    ccall((:VecDuplicateVecs, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{Ptr{Vec}}), arg1, arg2, arg3)
end

function VecDestroyVecs(arg1, arg2)
    ccall((:VecDestroyVecs, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Ptr{Vec}}), arg1, arg2)
end

function VecStrideNormAll(arg1, arg2, arg3)
    ccall((:VecStrideNormAll, $petsc_library), PetscErrorCode, (Vec, NormType, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecStrideMaxAll(arg1, arg2, arg3)
    ccall((:VecStrideMaxAll, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecStrideMinAll(arg1, arg2, arg3)
    ccall((:VecStrideMinAll, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecStrideScaleAll(arg1, arg2)
    ccall((:VecStrideScaleAll, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}), arg1, arg2)
end

function VecStrideSumAll(arg1, arg2)
    ccall((:VecStrideSumAll, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}), arg1, arg2)
end

function VecUniqueEntries(arg1, arg2, arg3)
    ccall((:VecUniqueEntries, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3)
end

function VecStrideNorm(arg1, arg2, arg3, arg4)
    ccall((:VecStrideNorm, $petsc_library), PetscErrorCode, (Vec, PetscInt, NormType, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function VecStrideMax(arg1, arg2, arg3, arg4)
    ccall((:VecStrideMax, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function VecStrideMin(arg1, arg2, arg3, arg4)
    ccall((:VecStrideMin, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function VecStrideScale(arg1, arg2, arg3)
    ccall((:VecStrideScale, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscScalar), arg1, arg2, arg3)
end

function VecStrideSum(arg1, arg2, arg3)
    ccall((:VecStrideSum, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function VecStrideSet(arg1, arg2, arg3)
    ccall((:VecStrideSet, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscScalar), arg1, arg2, arg3)
end

function VecStrideGather(arg1, arg2, arg3, arg4)
    ccall((:VecStrideGather, $petsc_library), PetscErrorCode, (Vec, PetscInt, Vec, InsertMode), arg1, arg2, arg3, arg4)
end

function VecStrideScatter(arg1, arg2, arg3, arg4)
    ccall((:VecStrideScatter, $petsc_library), PetscErrorCode, (Vec, PetscInt, Vec, InsertMode), arg1, arg2, arg3, arg4)
end

function VecStrideGatherAll(arg1, arg2, arg3)
    ccall((:VecStrideGatherAll, $petsc_library), PetscErrorCode, (Vec, Ptr{Vec}, InsertMode), arg1, arg2, arg3)
end

function VecStrideScatterAll(arg1, arg2, arg3)
    ccall((:VecStrideScatterAll, $petsc_library), PetscErrorCode, (Ptr{Vec}, Vec, InsertMode), arg1, arg2, arg3)
end

function VecStrideSubSetScatter(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecStrideSubSetScatter, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Vec, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecStrideSubSetGather(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecStrideSubSetGather, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Vec, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecSetValues(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecSetValues, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5)
end

function VecGetValues(arg1, arg2, arg3, arg4)
    ccall((:VecGetValues, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function VecAssemblyBegin(arg1)
    ccall((:VecAssemblyBegin, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecAssemblyEnd(arg1)
    ccall((:VecAssemblyEnd, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecStashSetInitialSize(arg1, arg2, arg3)
    ccall((:VecStashSetInitialSize, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt), arg1, arg2, arg3)
end

function VecStashView(arg1, arg2)
    ccall((:VecStashView, $petsc_library), PetscErrorCode, (Vec, PetscViewer), arg1, arg2)
end

function VecStashViewFromOptions(arg1, arg2, arg3)
    ccall((:VecStashViewFromOptions, $petsc_library), PetscErrorCode, (Vec, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function VecStashGetInfo(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecStashGetInfo, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function VecSetPreallocationCOO(arg1, arg2, arg3)
    ccall((:VecSetPreallocationCOO, $petsc_library), PetscErrorCode, (Vec, PetscCount, Ptr{PetscInt}), arg1, arg2, arg3)
end

function VecSetPreallocationCOOLocal(arg1, arg2, arg3)
    ccall((:VecSetPreallocationCOOLocal, $petsc_library), PetscErrorCode, (Vec, PetscCount, Ptr{PetscInt}), arg1, arg2, arg3)
end

function VecSetValuesCOO(arg1, arg2, arg3)
    ccall((:VecSetValuesCOO, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3)
end

function VecSetValue(v, i, va, mode)
    ccall((:VecSetValue, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscScalar, InsertMode), v, i, va, mode)
end

function VecSetBlockSize(arg1, arg2)
    ccall((:VecSetBlockSize, $petsc_library), PetscErrorCode, (Vec, PetscInt), arg1, arg2)
end

function VecGetBlockSize(arg1, arg2)
    ccall((:VecGetBlockSize, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}), arg1, arg2)
end

function VecSetValuesBlocked(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecSetValuesBlocked, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5)
end

function VecSetType(arg1, arg2)
    ccall((:VecSetType, $petsc_library), PetscErrorCode, (Vec, VecType), arg1, arg2)
end

function VecGetType(arg1, arg2)
    ccall((:VecGetType, $petsc_library), PetscErrorCode, (Vec, Ptr{VecType}), arg1, arg2)
end

function VecRegister(arg1, arg2)
    ccall((:VecRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function VecRegisterAll()
    ccall((:VecRegisterAll, $petsc_library), PetscErrorCode, ())
end

function VecScatterBegin(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecScatterBegin, $petsc_library), PetscErrorCode, (VecScatter, Vec, Vec, InsertMode, ScatterMode), arg1, arg2, arg3, arg4, arg5)
end

function VecScatterEnd(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecScatterEnd, $petsc_library), PetscErrorCode, (VecScatter, Vec, Vec, InsertMode, ScatterMode), arg1, arg2, arg3, arg4, arg5)
end

function VecScatterDestroy(arg1)
    ccall((:VecScatterDestroy, $petsc_library), PetscErrorCode, (Ptr{VecScatter},), arg1)
end

function VecScatterSetUp(arg1)
    ccall((:VecScatterSetUp, $petsc_library), PetscErrorCode, (VecScatter,), arg1)
end

function VecScatterCopy(arg1, arg2)
    ccall((:VecScatterCopy, $petsc_library), PetscErrorCode, (VecScatter, Ptr{VecScatter}), arg1, arg2)
end

function VecScatterView(arg1, arg2)
    ccall((:VecScatterView, $petsc_library), PetscErrorCode, (VecScatter, PetscViewer), arg1, arg2)
end

function VecScatterViewFromOptions(arg1, arg2, arg3)
    ccall((:VecScatterViewFromOptions, $petsc_library), PetscErrorCode, (VecScatter, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function VecScatterRemap(arg1, arg2, arg3)
    ccall((:VecScatterRemap, $petsc_library), PetscErrorCode, (VecScatter, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function VecScatterGetMerged(arg1, arg2)
    ccall((:VecScatterGetMerged, $petsc_library), PetscErrorCode, (VecScatter, Ptr{PetscBool}), arg1, arg2)
end

function VecGetArray4d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:VecGetArray4d, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function VecRestoreArray4d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:VecRestoreArray4d, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function VecGetArray3d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:VecGetArray3d, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function VecRestoreArray3d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:VecRestoreArray3d, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function VecGetArray2d(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecGetArray2d, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecRestoreArray2d(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecRestoreArray2d, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecGetArray1d(arg1, arg2, arg3, arg4)
    ccall((:VecGetArray1d, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function VecRestoreArray1d(arg1, arg2, arg3, arg4)
    ccall((:VecRestoreArray1d, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function VecGetArray4dWrite(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:VecGetArray4dWrite, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function VecRestoreArray4dWrite(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:VecRestoreArray4dWrite, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function VecGetArray3dWrite(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:VecGetArray3dWrite, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function VecRestoreArray3dWrite(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:VecRestoreArray3dWrite, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function VecGetArray2dWrite(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecGetArray2dWrite, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecRestoreArray2dWrite(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecRestoreArray2dWrite, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecGetArray1dWrite(arg1, arg2, arg3, arg4)
    ccall((:VecGetArray1dWrite, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function VecRestoreArray1dWrite(arg1, arg2, arg3, arg4)
    ccall((:VecRestoreArray1dWrite, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function VecGetArray4dRead(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:VecGetArray4dRead, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function VecRestoreArray4dRead(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:VecRestoreArray4dRead, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function VecGetArray3dRead(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:VecGetArray3dRead, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function VecRestoreArray3dRead(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:VecRestoreArray3dRead, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function VecGetArray2dRead(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecGetArray2dRead, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecRestoreArray2dRead(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecRestoreArray2dRead, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecGetArray1dRead(arg1, arg2, arg3, arg4)
    ccall((:VecGetArray1dRead, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function VecRestoreArray1dRead(arg1, arg2, arg3, arg4)
    ccall((:VecRestoreArray1dRead, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscInt, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function VecPlaceArray(arg1, arg2)
    ccall((:VecPlaceArray, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}), arg1, arg2)
end

function VecResetArray(arg1)
    ccall((:VecResetArray, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecReplaceArray(arg1, arg2)
    ccall((:VecReplaceArray, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}), arg1, arg2)
end

function VecGetArrays(arg1, arg2, arg3)
    ccall((:VecGetArrays, $petsc_library), PetscErrorCode, (Ptr{Vec}, PetscInt, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3)
end

function VecRestoreArrays(arg1, arg2, arg3)
    ccall((:VecRestoreArrays, $petsc_library), PetscErrorCode, (Ptr{Vec}, PetscInt, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3)
end

function VecView(arg1, arg2)
    ccall((:VecView, $petsc_library), PetscErrorCode, (Vec, PetscViewer), arg1, arg2)
end

function VecViewNative(arg1, arg2)
    ccall((:VecViewNative, $petsc_library), PetscErrorCode, (Vec, PetscViewer), arg1, arg2)
end

function VecEqual(arg1, arg2, arg3)
    ccall((:VecEqual, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscBool}), arg1, arg2, arg3)
end

function VecLoad(arg1, arg2)
    ccall((:VecLoad, $petsc_library), PetscErrorCode, (Vec, PetscViewer), arg1, arg2)
end

function VecGetSize(arg1, arg2)
    ccall((:VecGetSize, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}), arg1, arg2)
end

function VecGetLocalSize(arg1, arg2)
    ccall((:VecGetLocalSize, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}), arg1, arg2)
end

function VecGetOwnershipRange(arg1, arg2, arg3)
    ccall((:VecGetOwnershipRange, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function VecGetOwnershipRanges(arg1, arg2)
    ccall((:VecGetOwnershipRanges, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function VecSetLocalToGlobalMapping(arg1, arg2)
    ccall((:VecSetLocalToGlobalMapping, $petsc_library), PetscErrorCode, (Vec, ISLocalToGlobalMapping), arg1, arg2)
end

function VecSetValuesLocal(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecSetValuesLocal, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5)
end

function VecViennaCLGetCLContext(arg1, arg2)
    ccall((:VecViennaCLGetCLContext, $petsc_library), PetscErrorCode, (Vec, Ptr{Csize_t}), arg1, arg2)
end

function VecViennaCLGetCLQueue(arg1, arg2)
    ccall((:VecViennaCLGetCLQueue, $petsc_library), PetscErrorCode, (Vec, Ptr{Csize_t}), arg1, arg2)
end

function VecViennaCLGetCLMemRead(arg1, arg2)
    ccall((:VecViennaCLGetCLMemRead, $petsc_library), PetscErrorCode, (Vec, Ptr{Csize_t}), arg1, arg2)
end

function VecViennaCLGetCLMemWrite(arg1, arg2)
    ccall((:VecViennaCLGetCLMemWrite, $petsc_library), PetscErrorCode, (Vec, Ptr{Csize_t}), arg1, arg2)
end

function VecViennaCLRestoreCLMemWrite(arg1)
    ccall((:VecViennaCLRestoreCLMemWrite, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecViennaCLGetCLMem(arg1, arg2)
    ccall((:VecViennaCLGetCLMem, $petsc_library), PetscErrorCode, (Vec, Ptr{Csize_t}), arg1, arg2)
end

function VecViennaCLRestoreCLMem(arg1)
    ccall((:VecViennaCLRestoreCLMem, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecSetValueLocal(v, i, va, mode)
    ccall((:VecSetValueLocal, $petsc_library), PetscErrorCode, (Vec, PetscInt, PetscScalar, InsertMode), v, i, va, mode)
end

function VecSetValuesBlockedLocal(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecSetValuesBlockedLocal, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5)
end

function VecGetLocalToGlobalMapping(arg1, arg2)
    ccall((:VecGetLocalToGlobalMapping, $petsc_library), PetscErrorCode, (Vec, Ptr{ISLocalToGlobalMapping}), arg1, arg2)
end

function VecDotBegin(arg1, arg2, arg3)
    ccall((:VecDotBegin, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function VecDotEnd(arg1, arg2, arg3)
    ccall((:VecDotEnd, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function VecTDotBegin(arg1, arg2, arg3)
    ccall((:VecTDotBegin, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function VecTDotEnd(arg1, arg2, arg3)
    ccall((:VecTDotEnd, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function VecNormBegin(arg1, arg2, arg3)
    ccall((:VecNormBegin, $petsc_library), PetscErrorCode, (Vec, NormType, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecNormEnd(arg1, arg2, arg3)
    ccall((:VecNormEnd, $petsc_library), PetscErrorCode, (Vec, NormType, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecErrorWeightedNorms(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
    ccall((:VecErrorWeightedNorms, $petsc_library), PetscErrorCode, (Vec, Vec, Vec, NormType, PetscReal, Vec, PetscReal, Vec, PetscReal, Ptr{PetscReal}, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
end

function VecMDotBegin(arg1, arg2, arg3, arg4)
    ccall((:VecMDotBegin, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{Vec}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function VecMDotEnd(arg1, arg2, arg3, arg4)
    ccall((:VecMDotEnd, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{Vec}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function VecMTDotBegin(arg1, arg2, arg3, arg4)
    ccall((:VecMTDotBegin, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{Vec}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function VecMTDotEnd(arg1, arg2, arg3, arg4)
    ccall((:VecMTDotEnd, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{Vec}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function PetscCommSplitReductionBegin(arg1)
    ccall((:PetscCommSplitReductionBegin, $petsc_library), PetscErrorCode, (MPI_Comm,), arg1)
end

function VecBindToCPU(arg1, arg2)
    ccall((:VecBindToCPU, $petsc_library), PetscErrorCode, (Vec, PetscBool), arg1, arg2)
end

function VecPinToCPU(v, flg)
    ccall((:VecPinToCPU, $petsc_library), PetscErrorCode, (Vec, PetscBool), v, flg)
end

function VecBoundToCPU(arg1, arg2)
    ccall((:VecBoundToCPU, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscBool}), arg1, arg2)
end

function VecSetBindingPropagates(arg1, arg2)
    ccall((:VecSetBindingPropagates, $petsc_library), PetscErrorCode, (Vec, PetscBool), arg1, arg2)
end

function VecGetBindingPropagates(arg1, arg2)
    ccall((:VecGetBindingPropagates, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscBool}), arg1, arg2)
end

function VecSetPinnedMemoryMin(arg1, arg2)
    ccall((:VecSetPinnedMemoryMin, $petsc_library), PetscErrorCode, (Vec, Csize_t), arg1, arg2)
end

function VecGetPinnedMemoryMin(arg1, arg2)
    ccall((:VecGetPinnedMemoryMin, $petsc_library), PetscErrorCode, (Vec, Ptr{Csize_t}), arg1, arg2)
end

function VecGetOffloadMask(arg1, arg2)
    ccall((:VecGetOffloadMask, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscOffloadMask}), arg1, arg2)
end

@enum VecOption::UInt32 begin
    VEC_IGNORE_OFF_PROC_ENTRIES = 0
    VEC_IGNORE_NEGATIVE_INDICES = 1
    VEC_SUBSET_OFF_PROC_ENTRIES = 2
end

function VecSetOption(arg1, arg2, arg3)
    ccall((:VecSetOption, $petsc_library), PetscErrorCode, (Vec, VecOption, PetscBool), arg1, arg2, arg3)
end

function VecGetArray(arg1, arg2)
    ccall((:VecGetArray, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function VecGetArrayWrite(arg1, arg2)
    ccall((:VecGetArrayWrite, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function VecGetArrayRead(arg1, arg2)
    ccall((:VecGetArrayRead, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function VecRestoreArray(arg1, arg2)
    ccall((:VecRestoreArray, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function VecRestoreArrayWrite(arg1, arg2)
    ccall((:VecRestoreArrayWrite, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function VecRestoreArrayRead(arg1, arg2)
    ccall((:VecRestoreArrayRead, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function VecCreateLocalVector(arg1, arg2)
    ccall((:VecCreateLocalVector, $petsc_library), PetscErrorCode, (Vec, Ptr{Vec}), arg1, arg2)
end

function VecGetLocalVector(arg1, arg2)
    ccall((:VecGetLocalVector, $petsc_library), PetscErrorCode, (Vec, Vec), arg1, arg2)
end

function VecRestoreLocalVector(arg1, arg2)
    ccall((:VecRestoreLocalVector, $petsc_library), PetscErrorCode, (Vec, Vec), arg1, arg2)
end

function VecGetLocalVectorRead(arg1, arg2)
    ccall((:VecGetLocalVectorRead, $petsc_library), PetscErrorCode, (Vec, Vec), arg1, arg2)
end

function VecRestoreLocalVectorRead(arg1, arg2)
    ccall((:VecRestoreLocalVectorRead, $petsc_library), PetscErrorCode, (Vec, Vec), arg1, arg2)
end

function VecGetArrayAndMemType(arg1, arg2, arg3)
    ccall((:VecGetArrayAndMemType, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}, Ptr{PetscMemType}), arg1, arg2, arg3)
end

function VecRestoreArrayAndMemType(arg1, arg2)
    ccall((:VecRestoreArrayAndMemType, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function VecGetArrayReadAndMemType(arg1, arg2, arg3)
    ccall((:VecGetArrayReadAndMemType, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}, Ptr{PetscMemType}), arg1, arg2, arg3)
end

function VecRestoreArrayReadAndMemType(arg1, arg2)
    ccall((:VecRestoreArrayReadAndMemType, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function VecGetArrayWriteAndMemType(arg1, arg2, arg3)
    ccall((:VecGetArrayWriteAndMemType, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}, Ptr{PetscMemType}), arg1, arg2, arg3)
end

function VecRestoreArrayWriteAndMemType(arg1, arg2)
    ccall((:VecRestoreArrayWriteAndMemType, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function VecGetArrayPair(x, y, xv, yv)
    ccall((:VecGetArrayPair, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), x, y, xv, yv)
end

function VecRestoreArrayPair(x, y, xv, yv)
    ccall((:VecRestoreArrayPair, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), x, y, xv, yv)
end

@enum VecOperation::UInt32 begin
    VECOP_DUPLICATE = 0
    VECOP_SET = 10
    VECOP_VIEW = 33
    VECOP_LOAD = 41
    VECOP_VIEWNATIVE = 69
    VECOP_LOADNATIVE = 70
end

function VecSetOperation(arg1, arg2, arg3)
    ccall((:VecSetOperation, $petsc_library), PetscErrorCode, (Vec, VecOperation, Ptr{Cvoid}), arg1, arg2, arg3)
end

function VecMPISetGhost(arg1, arg2, arg3)
    ccall((:VecMPISetGhost, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function VecCreateGhost(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecCreateGhost, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecCreateGhostWithArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:VecCreateGhostWithArray, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function VecCreateGhostBlock(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:VecCreateGhostBlock, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function VecCreateGhostBlockWithArray(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:VecCreateGhostBlockWithArray, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function VecGhostGetGhostIS(arg1, arg2)
    ccall((:VecGhostGetGhostIS, $petsc_library), PetscErrorCode, (Vec, Ptr{IS}), arg1, arg2)
end

function VecGhostGetLocalForm(arg1, arg2)
    ccall((:VecGhostGetLocalForm, $petsc_library), PetscErrorCode, (Vec, Ptr{Vec}), arg1, arg2)
end

function VecGhostRestoreLocalForm(arg1, arg2)
    ccall((:VecGhostRestoreLocalForm, $petsc_library), PetscErrorCode, (Vec, Ptr{Vec}), arg1, arg2)
end

function VecGhostIsLocalForm(arg1, arg2, arg3)
    ccall((:VecGhostIsLocalForm, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscBool}), arg1, arg2, arg3)
end

function VecGhostUpdateBegin(arg1, arg2, arg3)
    ccall((:VecGhostUpdateBegin, $petsc_library), PetscErrorCode, (Vec, InsertMode, ScatterMode), arg1, arg2, arg3)
end

function VecGhostUpdateEnd(arg1, arg2, arg3)
    ccall((:VecGhostUpdateEnd, $petsc_library), PetscErrorCode, (Vec, InsertMode, ScatterMode), arg1, arg2, arg3)
end

function VecConjugate(arg1)
    ccall((:VecConjugate, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecImaginaryPart(arg1)
    ccall((:VecImaginaryPart, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecRealPart(arg1)
    ccall((:VecRealPart, $petsc_library), PetscErrorCode, (Vec,), arg1)
end

function VecScatterCreateToAll(arg1, arg2, arg3)
    ccall((:VecScatterCreateToAll, $petsc_library), PetscErrorCode, (Vec, Ptr{VecScatter}, Ptr{Vec}), arg1, arg2, arg3)
end

function VecScatterCreateToZero(arg1, arg2, arg3)
    ccall((:VecScatterCreateToZero, $petsc_library), PetscErrorCode, (Vec, Ptr{VecScatter}, Ptr{Vec}), arg1, arg2, arg3)
end

function ISComplementVec(arg1, arg2, arg3)
    ccall((:ISComplementVec, $petsc_library), PetscErrorCode, (IS, Vec, Ptr{IS}), arg1, arg2, arg3)
end

function VecPow(arg1, arg2)
    ccall((:VecPow, $petsc_library), PetscErrorCode, (Vec, PetscScalar), arg1, arg2)
end

function VecMedian(arg1, arg2, arg3, arg4)
    ccall((:VecMedian, $petsc_library), PetscErrorCode, (Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function VecWhichInactive(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecWhichInactive, $petsc_library), PetscErrorCode, (Vec, Vec, Vec, Vec, PetscBool, Ptr{IS}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function VecWhichBetween(arg1, arg2, arg3, arg4)
    ccall((:VecWhichBetween, $petsc_library), PetscErrorCode, (Vec, Vec, Vec, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function VecWhichBetweenOrEqual(arg1, arg2, arg3, arg4)
    ccall((:VecWhichBetweenOrEqual, $petsc_library), PetscErrorCode, (Vec, Vec, Vec, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function VecWhichGreaterThan(arg1, arg2, arg3)
    ccall((:VecWhichGreaterThan, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{IS}), arg1, arg2, arg3)
end

function VecWhichLessThan(arg1, arg2, arg3)
    ccall((:VecWhichLessThan, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{IS}), arg1, arg2, arg3)
end

function VecWhichEqual(arg1, arg2, arg3)
    ccall((:VecWhichEqual, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{IS}), arg1, arg2, arg3)
end

function VecISAXPY(arg1, arg2, arg3, arg4)
    ccall((:VecISAXPY, $petsc_library), PetscErrorCode, (Vec, IS, PetscScalar, Vec), arg1, arg2, arg3, arg4)
end

function VecISCopy(arg1, arg2, arg3, arg4)
    ccall((:VecISCopy, $petsc_library), PetscErrorCode, (Vec, IS, ScatterMode, Vec), arg1, arg2, arg3, arg4)
end

function VecISSet(arg1, arg2, arg3)
    ccall((:VecISSet, $petsc_library), PetscErrorCode, (Vec, IS, PetscScalar), arg1, arg2, arg3)
end

function VecISShift(arg1, arg2, arg3)
    ccall((:VecISShift, $petsc_library), PetscErrorCode, (Vec, IS, PetscScalar), arg1, arg2, arg3)
end

function VecBoundGradientProjection(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecBoundGradientProjection, $petsc_library), PetscErrorCode, (Vec, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function VecStepBoundInfo(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:VecStepBoundInfo, $petsc_library), PetscErrorCode, (Vec, Vec, Vec, Vec, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function VecStepMax(arg1, arg2, arg3)
    ccall((:VecStepMax, $petsc_library), PetscErrorCode, (Vec, Vec, Ptr{PetscReal}), arg1, arg2, arg3)
end

function VecStepMaxBounded(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecStepMaxBounded, $petsc_library), PetscErrorCode, (Vec, Vec, Vec, Vec, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscViewerMathematicaGetVector(arg1, arg2)
    ccall((:PetscViewerMathematicaGetVector, $petsc_library), PetscErrorCode, (PetscViewer, Vec), arg1, arg2)
end

function PetscViewerMathematicaPutVector(arg1, arg2)
    ccall((:PetscViewerMathematicaPutVector, $petsc_library), PetscErrorCode, (PetscViewer, Vec), arg1, arg2)
end

function VecNestGetSubVecs(arg1, arg2, arg3)
    ccall((:VecNestGetSubVecs, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}, Ptr{Ptr{Vec}}), arg1, arg2, arg3)
end

function VecNestGetSubVec(arg1, arg2, arg3)
    ccall((:VecNestGetSubVec, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function VecNestSetSubVecs(arg1, arg2, arg3, arg4)
    ccall((:VecNestSetSubVecs, $petsc_library), PetscErrorCode, (Vec, PetscInt, Ptr{PetscInt}, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function VecNestSetSubVec(arg1, arg2, arg3)
    ccall((:VecNestSetSubVec, $petsc_library), PetscErrorCode, (Vec, PetscInt, Vec), arg1, arg2, arg3)
end

function VecCreateNest(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecCreateNest, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{IS}, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function VecNestGetSize(arg1, arg2)
    ccall((:VecNestGetSize, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscInt}), arg1, arg2)
end

function PetscOptionsGetVec(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscOptionsGetVec, $petsc_library), PetscErrorCode, (PetscOptions, Ptr{Cchar}, Ptr{Cchar}, Vec, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function VecFilter(arg1, arg2)
    ccall((:VecFilter, $petsc_library), PetscErrorCode, (Vec, PetscReal), arg1, arg2)
end

function VecChop(v, tol)
    ccall((:VecChop, $petsc_library), PetscErrorCode, (Vec, PetscReal), v, tol)
end

function PetscSectionVecView(arg1, arg2, arg3)
    ccall((:PetscSectionVecView, $petsc_library), PetscErrorCode, (PetscSection, Vec, PetscViewer), arg1, arg2, arg3)
end

function VecGetValuesSection(arg1, arg2, arg3, arg4)
    ccall((:VecGetValuesSection, $petsc_library), PetscErrorCode, (Vec, PetscSection, PetscInt, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function VecSetValuesSection(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecSetValuesSection, $petsc_library), PetscErrorCode, (Vec, PetscSection, PetscInt, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5)
end

function PetscSectionVecNorm(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSectionVecNorm, $petsc_library), PetscErrorCode, (PetscSection, PetscSection, Vec, NormType, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

mutable struct _p_VecTagger end

const VecTagger = Ptr{_p_VecTagger}

const VecTaggerType = Ptr{Cchar}

function VecTaggerRegister(arg1, arg2)
    ccall((:VecTaggerRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function VecTaggerRegisterAll()
    ccall((:VecTaggerRegisterAll, $petsc_library), PetscErrorCode, ())
end

function VecTaggerCreate(arg1, arg2)
    ccall((:VecTaggerCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{VecTagger}), arg1, arg2)
end

function VecTaggerSetBlockSize(arg1, arg2)
    ccall((:VecTaggerSetBlockSize, $petsc_library), PetscErrorCode, (VecTagger, PetscInt), arg1, arg2)
end

function VecTaggerGetBlockSize(arg1, arg2)
    ccall((:VecTaggerGetBlockSize, $petsc_library), PetscErrorCode, (VecTagger, Ptr{PetscInt}), arg1, arg2)
end

function VecTaggerSetType(arg1, arg2)
    ccall((:VecTaggerSetType, $petsc_library), PetscErrorCode, (VecTagger, VecTaggerType), arg1, arg2)
end

function VecTaggerGetType(arg1, arg2)
    ccall((:VecTaggerGetType, $petsc_library), PetscErrorCode, (VecTagger, Ptr{VecTaggerType}), arg1, arg2)
end

function VecTaggerSetInvert(arg1, arg2)
    ccall((:VecTaggerSetInvert, $petsc_library), PetscErrorCode, (VecTagger, PetscBool), arg1, arg2)
end

function VecTaggerGetInvert(arg1, arg2)
    ccall((:VecTaggerGetInvert, $petsc_library), PetscErrorCode, (VecTagger, Ptr{PetscBool}), arg1, arg2)
end

function VecTaggerSetFromOptions(arg1)
    ccall((:VecTaggerSetFromOptions, $petsc_library), PetscErrorCode, (VecTagger,), arg1)
end

function VecTaggerSetUp(arg1)
    ccall((:VecTaggerSetUp, $petsc_library), PetscErrorCode, (VecTagger,), arg1)
end

function VecTaggerView(arg1, arg2)
    ccall((:VecTaggerView, $petsc_library), PetscErrorCode, (VecTagger, PetscViewer), arg1, arg2)
end

function VecTaggerComputeIS(arg1, arg2, arg3, arg4)
    ccall((:VecTaggerComputeIS, $petsc_library), PetscErrorCode, (VecTagger, Vec, Ptr{IS}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function VecTaggerDestroy(arg1)
    ccall((:VecTaggerDestroy, $petsc_library), PetscErrorCode, (Ptr{VecTagger},), arg1)
end

@enum VecTaggerCDFMethod::UInt32 begin
    VECTAGGER_CDF_GATHER = 0
    VECTAGGER_CDF_ITERATIVE = 1
    VECTAGGER_CDF_NUM_METHODS = 2
end

function VecTaggerCDFSetMethod(arg1, arg2)
    ccall((:VecTaggerCDFSetMethod, $petsc_library), PetscErrorCode, (VecTagger, VecTaggerCDFMethod), arg1, arg2)
end

function VecTaggerCDFGetMethod(arg1, arg2)
    ccall((:VecTaggerCDFGetMethod, $petsc_library), PetscErrorCode, (VecTagger, Ptr{VecTaggerCDFMethod}), arg1, arg2)
end

function VecTaggerCDFIterativeSetTolerances(arg1, arg2, arg3, arg4)
    ccall((:VecTaggerCDFIterativeSetTolerances, $petsc_library), PetscErrorCode, (VecTagger, PetscInt, PetscReal, PetscReal), arg1, arg2, arg3, arg4)
end

function VecTaggerCDFIterativeGetTolerances(arg1, arg2, arg3, arg4)
    ccall((:VecTaggerCDFIterativeGetTolerances, $petsc_library), PetscErrorCode, (VecTagger, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function VecTaggerOrSetSubs(arg1, arg2, arg3, arg4)
    ccall((:VecTaggerOrSetSubs, $petsc_library), PetscErrorCode, (VecTagger, PetscInt, Ptr{VecTagger}, PetscCopyMode), arg1, arg2, arg3, arg4)
end

function VecTaggerOrGetSubs(arg1, arg2, arg3)
    ccall((:VecTaggerOrGetSubs, $petsc_library), PetscErrorCode, (VecTagger, Ptr{PetscInt}, Ptr{Ptr{VecTagger}}), arg1, arg2, arg3)
end

function VecTaggerAndSetSubs(arg1, arg2, arg3, arg4)
    ccall((:VecTaggerAndSetSubs, $petsc_library), PetscErrorCode, (VecTagger, PetscInt, Ptr{VecTagger}, PetscCopyMode), arg1, arg2, arg3, arg4)
end

function VecTaggerAndGetSubs(arg1, arg2, arg3)
    ccall((:VecTaggerAndGetSubs, $petsc_library), PetscErrorCode, (VecTagger, Ptr{PetscInt}, Ptr{Ptr{VecTagger}}), arg1, arg2, arg3)
end

function VecTaggerInitializePackage()
    ccall((:VecTaggerInitializePackage, $petsc_library), PetscErrorCode, ())
end

function VecTaggerFinalizePackage()
    ccall((:VecTaggerFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function VecCreateSeqCUDA(a, b, c)
    ccall((:VecCreateSeqCUDA, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{Vec}), a, b, c)
end

function VecCreateSeqHIP(a, b, c)
    ccall((:VecCreateSeqHIP, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{Vec}), a, b, c)
end

function VecCreateSeqCUDAWithArray(a, b, c, d, e)
    ccall((:VecCreateSeqCUDAWithArray, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Vec}), a, b, c, d, e)
end

function VecCreateSeqHIPWithArray(a, b, c, d, e)
    ccall((:VecCreateSeqHIPWithArray, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Vec}), a, b, c, d, e)
end

function VecCreateSeqCUDAWithArrays(a, b, c, d, e, f)
    ccall((:VecCreateSeqCUDAWithArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{PetscScalar}, Ptr{Vec}), a, b, c, d, e, f)
end

function VecCreateSeqHIPWithArrays(a, b, c, d, e, f)
    ccall((:VecCreateSeqHIPWithArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{PetscScalar}, Ptr{Vec}), a, b, c, d, e, f)
end

function VecCreateMPICUDA(a, b, c, d)
    ccall((:VecCreateMPICUDA, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Vec}), a, b, c, d)
end

function VecCreateMPIHIP(a, b, c, d)
    ccall((:VecCreateMPIHIP, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Vec}), a, b, c, d)
end

function VecCreateMPICUDAWithArray(a, b, c, d, e, f)
    ccall((:VecCreateMPICUDAWithArray, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Vec}), a, b, c, d, e, f)
end

function VecCreateMPIHIPWithArray(a, b, c, d, e, f)
    ccall((:VecCreateMPIHIPWithArray, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Vec}), a, b, c, d, e, f)
end

function VecCreateMPICUDAWithArrays(a, b, c, d, e, f, g)
    ccall((:VecCreateMPICUDAWithArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{PetscScalar}, Ptr{Vec}), a, b, c, d, e, f, g)
end

function VecCreateMPIHIPWithArrays(a, b, c, d, e, f, g)
    ccall((:VecCreateMPIHIPWithArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{PetscScalar}, Ptr{Vec}), a, b, c, d, e, f, g)
end

function VecCUDAGetArray(a, b)
    ccall((:VecCUDAGetArray, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecHIPGetArray(a, b)
    ccall((:VecHIPGetArray, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecCUDARestoreArray(a, b)
    ccall((:VecCUDARestoreArray, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecHIPRestoreArray(a, b)
    ccall((:VecHIPRestoreArray, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecCUDAGetArrayRead(a, b)
    ccall((:VecCUDAGetArrayRead, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecHIPGetArrayRead(a, b)
    ccall((:VecHIPGetArrayRead, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecCUDARestoreArrayRead(a, b)
    ccall((:VecCUDARestoreArrayRead, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecHIPRestoreArrayRead(a, b)
    ccall((:VecHIPRestoreArrayRead, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecCUDAGetArrayWrite(a, b)
    ccall((:VecCUDAGetArrayWrite, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecHIPGetArrayWrite(a, b)
    ccall((:VecHIPGetArrayWrite, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecCUDARestoreArrayWrite(a, b)
    ccall((:VecCUDARestoreArrayWrite, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecHIPRestoreArrayWrite(a, b)
    ccall((:VecHIPRestoreArrayWrite, $petsc_library), PetscErrorCode, (Vec, Ptr{Ptr{PetscScalar}}), a, b)
end

function VecCUDAPlaceArray(a, b)
    ccall((:VecCUDAPlaceArray, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}), a, b)
end

function VecHIPPlaceArray(a, b)
    ccall((:VecHIPPlaceArray, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}), a, b)
end

function VecCUDAReplaceArray(a, b)
    ccall((:VecCUDAReplaceArray, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}), a, b)
end

function VecHIPReplaceArray(a, b)
    ccall((:VecHIPReplaceArray, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscScalar}), a, b)
end

function VecCUDAResetArray(a)
    ccall((:VecCUDAResetArray, $petsc_library), PetscErrorCode, (Vec,), a)
end

function VecHIPResetArray(a)
    ccall((:VecHIPResetArray, $petsc_library), PetscErrorCode, (Vec,), a)
end

@enum PetscSFPattern::UInt32 begin
    PETSCSF_PATTERN_GENERAL = 0
    PETSCSF_PATTERN_ALLGATHER = 1
    PETSCSF_PATTERN_GATHER = 2
    PETSCSF_PATTERN_ALLTOALL = 3
end

@enum PetscSFWindowSyncType::UInt32 begin
    PETSCSF_WINDOW_SYNC_FENCE = 0
    PETSCSF_WINDOW_SYNC_LOCK = 1
    PETSCSF_WINDOW_SYNC_ACTIVE = 2
end

@enum PetscSFWindowFlavorType::UInt32 begin
    PETSCSF_WINDOW_FLAVOR_CREATE = 0
    PETSCSF_WINDOW_FLAVOR_DYNAMIC = 1
    PETSCSF_WINDOW_FLAVOR_ALLOCATE = 2
    PETSCSF_WINDOW_FLAVOR_SHARED = 3
end

@enum PetscSFDuplicateOption::UInt32 begin
    PETSCSF_DUPLICATE_CONFONLY = 0
    PETSCSF_DUPLICATE_RANKS = 1
    PETSCSF_DUPLICATE_GRAPH = 2
end

@enum PetscSFConcatenateRootMode::UInt32 begin
    PETSCSF_CONCATENATE_ROOTMODE_LOCAL = 0
    PETSCSF_CONCATENATE_ROOTMODE_SHARED = 1
    PETSCSF_CONCATENATE_ROOTMODE_GLOBAL = 2
end

function PetscSFRegister(arg1, arg2)
    ccall((:PetscSFRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscSFInitializePackage()
    ccall((:PetscSFInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscSFFinalizePackage()
    ccall((:PetscSFFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PetscSFCreate(arg1, arg2)
    ccall((:PetscSFCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscSF}), arg1, arg2)
end

function PetscSFDestroy(arg1)
    ccall((:PetscSFDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscSF},), arg1)
end

function PetscSFSetType(arg1, arg2)
    ccall((:PetscSFSetType, $petsc_library), PetscErrorCode, (PetscSF, PetscSFType), arg1, arg2)
end

function PetscSFGetType(arg1, arg2)
    ccall((:PetscSFGetType, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscSFType}), arg1, arg2)
end

function PetscSFView(arg1, arg2)
    ccall((:PetscSFView, $petsc_library), PetscErrorCode, (PetscSF, PetscViewer), arg1, arg2)
end

function PetscSFViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscSFViewFromOptions, $petsc_library), PetscErrorCode, (PetscSF, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscSFSetUp(arg1)
    ccall((:PetscSFSetUp, $petsc_library), PetscErrorCode, (PetscSF,), arg1)
end

function PetscSFSetFromOptions(arg1)
    ccall((:PetscSFSetFromOptions, $petsc_library), PetscErrorCode, (PetscSF,), arg1)
end

function PetscSFDuplicate(arg1, arg2, arg3)
    ccall((:PetscSFDuplicate, $petsc_library), PetscErrorCode, (PetscSF, PetscSFDuplicateOption, Ptr{PetscSF}), arg1, arg2, arg3)
end

function PetscSFWindowSetSyncType(arg1, arg2)
    ccall((:PetscSFWindowSetSyncType, $petsc_library), PetscErrorCode, (PetscSF, PetscSFWindowSyncType), arg1, arg2)
end

function PetscSFWindowGetSyncType(arg1, arg2)
    ccall((:PetscSFWindowGetSyncType, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscSFWindowSyncType}), arg1, arg2)
end

function PetscSFWindowSetFlavorType(arg1, arg2)
    ccall((:PetscSFWindowSetFlavorType, $petsc_library), PetscErrorCode, (PetscSF, PetscSFWindowFlavorType), arg1, arg2)
end

function PetscSFWindowGetFlavorType(arg1, arg2)
    ccall((:PetscSFWindowGetFlavorType, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscSFWindowFlavorType}), arg1, arg2)
end

function PetscSFWindowSetInfo(arg1, arg2)
    ccall((:PetscSFWindowSetInfo, $petsc_library), PetscErrorCode, (PetscSF, MPI_Info), arg1, arg2)
end

function PetscSFWindowGetInfo(arg1, arg2)
    ccall((:PetscSFWindowGetInfo, $petsc_library), PetscErrorCode, (PetscSF, Ptr{MPI_Info}), arg1, arg2)
end

function PetscSFSetRankOrder(arg1, arg2)
    ccall((:PetscSFSetRankOrder, $petsc_library), PetscErrorCode, (PetscSF, PetscBool), arg1, arg2)
end

function PetscSFGetLeafRange(arg1, arg2, arg3)
    ccall((:PetscSFGetLeafRange, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSFCreateEmbeddedRootSF(arg1, arg2, arg3, arg4)
    ccall((:PetscSFCreateEmbeddedRootSF, $petsc_library), PetscErrorCode, (PetscSF, PetscInt, Ptr{PetscInt}, Ptr{PetscSF}), arg1, arg2, arg3, arg4)
end

function PetscSFCreateEmbeddedLeafSF(arg1, arg2, arg3, arg4)
    ccall((:PetscSFCreateEmbeddedLeafSF, $petsc_library), PetscErrorCode, (PetscSF, PetscInt, Ptr{PetscInt}, Ptr{PetscSF}), arg1, arg2, arg3, arg4)
end

function PetscSFReset(arg1)
    ccall((:PetscSFReset, $petsc_library), PetscErrorCode, (PetscSF,), arg1)
end

function PetscSFGetRootRanks(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSFGetRootRanks, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscInt}, Ptr{Ptr{PetscMPIInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscSFGetLeafRanks(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSFGetLeafRanks, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscInt}, Ptr{Ptr{PetscMPIInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSFGetMultiSF(arg1, arg2)
    ccall((:PetscSFGetMultiSF, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscSF}), arg1, arg2)
end

function PetscSFGetRanksSF(arg1, arg2)
    ccall((:PetscSFGetRanksSF, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscSF}), arg1, arg2)
end

function PetscSFCreateInverseSF(arg1, arg2)
    ccall((:PetscSFCreateInverseSF, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscSF}), arg1, arg2)
end

function PetscSFConcatenate(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSFConcatenate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscSF}, PetscSFConcatenateRootMode, Ptr{PetscInt}, Ptr{PetscSF}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscSFCreateStridedSF(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSFCreateStridedSF, $petsc_library), PetscErrorCode, (PetscSF, PetscInt, PetscInt, PetscInt, Ptr{PetscSF}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSFGetGraphLayout(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSFGetGraphLayout, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscLayout}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSFMerge(arg1, arg2, arg3)
    ccall((:PetscSFMerge, $petsc_library), PetscErrorCode, (PetscSF, PetscSF, Ptr{PetscSF}), arg1, arg2, arg3)
end

function PetscSFSetGraphFromCoordinates(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscSFSetGraphFromCoordinates, $petsc_library), PetscErrorCode, (PetscSF, PetscInt, PetscInt, PetscInt, PetscReal, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscSFSetGraphSection(arg1, arg2, arg3)
    ccall((:PetscSFSetGraphSection, $petsc_library), PetscErrorCode, (PetscSF, PetscSection, PetscSection), arg1, arg2, arg3)
end

function PetscSFCreateRemoteOffsets(arg1, arg2, arg3, arg4)
    ccall((:PetscSFCreateRemoteOffsets, $petsc_library), PetscErrorCode, (PetscSF, PetscSection, PetscSection, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function PetscSFDistributeSection(arg1, arg2, arg3, arg4)
    ccall((:PetscSFDistributeSection, $petsc_library), PetscErrorCode, (PetscSF, PetscSection, Ptr{Ptr{PetscInt}}, PetscSection), arg1, arg2, arg3, arg4)
end

function PetscSFCreateSectionSF(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSFCreateSectionSF, $petsc_library), PetscErrorCode, (PetscSF, PetscSection, Ptr{PetscInt}, PetscSection, Ptr{PetscSF}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSFBcastBegin(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSFBcastBegin, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}, MPI_Op), arg1, arg2, arg3, arg4, arg5)
end

function PetscSFBcastEnd(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSFBcastEnd, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}, MPI_Op), arg1, arg2, arg3, arg4, arg5)
end

function PetscSFBcastWithMemTypeBegin(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscSFBcastWithMemTypeBegin, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, PetscMemType, Ptr{Cvoid}, PetscMemType, Ptr{Cvoid}, MPI_Op), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscSFReduceBegin(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSFReduceBegin, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}, MPI_Op), arg1, arg2, arg3, arg4, arg5)
end

function PetscSFReduceEnd(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSFReduceEnd, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}, MPI_Op), arg1, arg2, arg3, arg4, arg5)
end

function PetscSFReduceWithMemTypeBegin(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscSFReduceWithMemTypeBegin, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, PetscMemType, Ptr{Cvoid}, PetscMemType, Ptr{Cvoid}, MPI_Op), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscSFFetchAndOpBegin(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSFFetchAndOpBegin, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, MPI_Op), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscSFFetchAndOpEnd(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSFFetchAndOpEnd, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, MPI_Op), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscSFFetchAndOpWithMemTypeBegin(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscSFFetchAndOpWithMemTypeBegin, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, PetscMemType, Ptr{Cvoid}, PetscMemType, Ptr{Cvoid}, PetscMemType, Ptr{Cvoid}, MPI_Op), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscSFComputeDegreeBegin(arg1, arg2)
    ccall((:PetscSFComputeDegreeBegin, $petsc_library), PetscErrorCode, (PetscSF, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function PetscSFComputeDegreeEnd(arg1, arg2)
    ccall((:PetscSFComputeDegreeEnd, $petsc_library), PetscErrorCode, (PetscSF, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function PetscSFComputeMultiRootOriginalNumbering(arg1, arg2, arg3, arg4)
    ccall((:PetscSFComputeMultiRootOriginalNumbering, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function PetscSFGatherBegin(arg1, arg2, arg3, arg4)
    ccall((:PetscSFGatherBegin, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscSFGatherEnd(arg1, arg2, arg3, arg4)
    ccall((:PetscSFGatherEnd, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscSFScatterBegin(arg1, arg2, arg3, arg4)
    ccall((:PetscSFScatterBegin, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscSFScatterEnd(arg1, arg2, arg3, arg4)
    ccall((:PetscSFScatterEnd, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscSFCompose(arg1, arg2, arg3)
    ccall((:PetscSFCompose, $petsc_library), PetscErrorCode, (PetscSF, PetscSF, Ptr{PetscSF}), arg1, arg2, arg3)
end

function PetscSFComposeInverse(arg1, arg2, arg3)
    ccall((:PetscSFComposeInverse, $petsc_library), PetscErrorCode, (PetscSF, PetscSF, Ptr{PetscSF}), arg1, arg2, arg3)
end

function PetscSFGetRanks(sf, nranks, ranks, roffset, rmine, rremote)
    ccall((:PetscSFGetRanks, $petsc_library), PetscErrorCode, (PetscSF, Ptr{PetscInt}, Ptr{Ptr{PetscMPIInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), sf, nranks, ranks, roffset, rmine, rremote)
end

function PetscSFCreateEmbeddedSF(sf, nselected, selected, esf)
    ccall((:PetscSFCreateEmbeddedSF, $petsc_library), PetscErrorCode, (PetscSF, PetscInt, Ptr{PetscInt}, Ptr{PetscSF}), sf, nselected, selected, esf)
end

function PetscSFBcastAndOpBegin(sf, unit, rootdata, leafdata, op)
    ccall((:PetscSFBcastAndOpBegin, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}, MPI_Op), sf, unit, rootdata, leafdata, op)
end

function PetscSFBcastAndOpEnd(sf, unit, rootdata, leafdata, op)
    ccall((:PetscSFBcastAndOpEnd, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, Ptr{Cvoid}, Ptr{Cvoid}, MPI_Op), sf, unit, rootdata, leafdata, op)
end

function PetscSFBcastAndOpWithMemtypeBegin(sf, unit, rootmtype, rootdata, leafmtype, leafdata, op)
    ccall((:PetscSFBcastAndOpWithMemtypeBegin, $petsc_library), PetscErrorCode, (PetscSF, MPI_Datatype, PetscMemType, Ptr{Cvoid}, PetscMemType, Ptr{Cvoid}, MPI_Op), sf, unit, rootmtype, rootdata, leafmtype, leafdata, op)
end

function PetscSectionCreate(arg1, arg2)
    ccall((:PetscSectionCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscSection}), arg1, arg2)
end

function PetscSectionClone(arg1, arg2)
    ccall((:PetscSectionClone, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscSection}), arg1, arg2)
end

function PetscSectionSetFromOptions(arg1)
    ccall((:PetscSectionSetFromOptions, $petsc_library), PetscErrorCode, (PetscSection,), arg1)
end

function PetscSectionCopy(arg1, arg2)
    ccall((:PetscSectionCopy, $petsc_library), PetscErrorCode, (PetscSection, PetscSection), arg1, arg2)
end

function PetscSectionCompare(arg1, arg2, arg3)
    ccall((:PetscSectionCompare, $petsc_library), PetscErrorCode, (PetscSection, PetscSection, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscSectionGetNumFields(arg1, arg2)
    ccall((:PetscSectionGetNumFields, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscInt}), arg1, arg2)
end

function PetscSectionSetNumFields(arg1, arg2)
    ccall((:PetscSectionSetNumFields, $petsc_library), PetscErrorCode, (PetscSection, PetscInt), arg1, arg2)
end

function PetscSectionGetFieldName(arg1, arg2, arg3)
    ccall((:PetscSectionGetFieldName, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{Ptr{Cchar}}), arg1, arg2, arg3)
end

function PetscSectionSetFieldName(arg1, arg2, arg3)
    ccall((:PetscSectionSetFieldName, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscSectionGetComponentName(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionGetComponentName, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, Ptr{Ptr{Cchar}}), arg1, arg2, arg3, arg4)
end

function PetscSectionSetComponentName(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionSetComponentName, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, Ptr{Cchar}), arg1, arg2, arg3, arg4)
end

function PetscSectionGetFieldComponents(arg1, arg2, arg3)
    ccall((:PetscSectionGetFieldComponents, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSectionSetFieldComponents(arg1, arg2, arg3)
    ccall((:PetscSectionSetFieldComponents, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscSectionGetChart(arg1, arg2, arg3)
    ccall((:PetscSectionGetChart, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSectionSetChart(arg1, arg2, arg3)
    ccall((:PetscSectionSetChart, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscSectionGetPermutation(arg1, arg2)
    ccall((:PetscSectionGetPermutation, $petsc_library), PetscErrorCode, (PetscSection, Ptr{IS}), arg1, arg2)
end

function PetscSectionSetPermutation(arg1, arg2)
    ccall((:PetscSectionSetPermutation, $petsc_library), PetscErrorCode, (PetscSection, IS), arg1, arg2)
end

function PetscSectionGetBlockStarts(arg1, arg2)
    ccall((:PetscSectionGetBlockStarts, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscBT}), arg1, arg2)
end

function PetscSectionSetBlockStarts(arg1, arg2)
    ccall((:PetscSectionSetBlockStarts, $petsc_library), PetscErrorCode, (PetscSection, PetscBT), arg1, arg2)
end

function PetscSectionGetPointMajor(arg1, arg2)
    ccall((:PetscSectionGetPointMajor, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscBool}), arg1, arg2)
end

function PetscSectionSetPointMajor(arg1, arg2)
    ccall((:PetscSectionSetPointMajor, $petsc_library), PetscErrorCode, (PetscSection, PetscBool), arg1, arg2)
end

function PetscSectionGetIncludesConstraints(arg1, arg2)
    ccall((:PetscSectionGetIncludesConstraints, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscBool}), arg1, arg2)
end

function PetscSectionSetIncludesConstraints(arg1, arg2)
    ccall((:PetscSectionSetIncludesConstraints, $petsc_library), PetscErrorCode, (PetscSection, PetscBool), arg1, arg2)
end

function PetscSectionGetDof(arg1, arg2, arg3)
    ccall((:PetscSectionGetDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSectionSetDof(arg1, arg2, arg3)
    ccall((:PetscSectionSetDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscSectionAddDof(arg1, arg2, arg3)
    ccall((:PetscSectionAddDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscSectionGetFieldDof(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionGetFieldDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSectionSetFieldDof(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionSetFieldDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function PetscSectionAddFieldDof(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionAddFieldDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function PetscSectionHasConstraints(arg1, arg2)
    ccall((:PetscSectionHasConstraints, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscBool}), arg1, arg2)
end

function PetscSectionGetConstraintDof(arg1, arg2, arg3)
    ccall((:PetscSectionGetConstraintDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSectionSetConstraintDof(arg1, arg2, arg3)
    ccall((:PetscSectionSetConstraintDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscSectionAddConstraintDof(arg1, arg2, arg3)
    ccall((:PetscSectionAddConstraintDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscSectionGetFieldConstraintDof(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionGetFieldConstraintDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSectionSetFieldConstraintDof(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionSetFieldConstraintDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function PetscSectionAddFieldConstraintDof(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionAddFieldConstraintDof, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function PetscSectionGetConstraintIndices(arg1, arg2, arg3)
    ccall((:PetscSectionGetConstraintIndices, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function PetscSectionSetConstraintIndices(arg1, arg2, arg3)
    ccall((:PetscSectionSetConstraintIndices, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSectionGetFieldConstraintIndices(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionGetFieldConstraintIndices, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function PetscSectionSetFieldConstraintIndices(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionSetFieldConstraintIndices, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSectionSetUpBC(arg1)
    ccall((:PetscSectionSetUpBC, $petsc_library), PetscErrorCode, (PetscSection,), arg1)
end

function PetscSectionSetUp(arg1)
    ccall((:PetscSectionSetUp, $petsc_library), PetscErrorCode, (PetscSection,), arg1)
end

function PetscSectionGetMaxDof(arg1, arg2)
    ccall((:PetscSectionGetMaxDof, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscInt}), arg1, arg2)
end

function PetscSectionGetStorageSize(arg1, arg2)
    ccall((:PetscSectionGetStorageSize, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscInt}), arg1, arg2)
end

function PetscSectionGetConstrainedStorageSize(arg1, arg2)
    ccall((:PetscSectionGetConstrainedStorageSize, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscInt}), arg1, arg2)
end

function PetscSectionGetOffset(arg1, arg2, arg3)
    ccall((:PetscSectionGetOffset, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSectionSetOffset(arg1, arg2, arg3)
    ccall((:PetscSectionSetOffset, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscSectionGetFieldOffset(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionGetFieldOffset, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSectionSetFieldOffset(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionSetFieldOffset, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function PetscSectionGetFieldPointOffset(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionGetFieldPointOffset, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscSectionGetOffsetRange(arg1, arg2, arg3)
    ccall((:PetscSectionGetOffsetRange, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSectionView(arg1, arg2)
    ccall((:PetscSectionView, $petsc_library), PetscErrorCode, (PetscSection, PetscViewer), arg1, arg2)
end

function PetscSectionViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscSectionViewFromOptions, $petsc_library), PetscErrorCode, (PetscSection, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscSectionLoad(arg1, arg2)
    ccall((:PetscSectionLoad, $petsc_library), PetscErrorCode, (PetscSection, PetscViewer), arg1, arg2)
end

function PetscSectionReset(arg1)
    ccall((:PetscSectionReset, $petsc_library), PetscErrorCode, (PetscSection,), arg1)
end

function PetscSectionDestroy(arg1)
    ccall((:PetscSectionDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscSection},), arg1)
end

function PetscSectionCreateGlobalSection(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSectionCreateGlobalSection, $petsc_library), PetscErrorCode, (PetscSection, PetscSF, PetscBool, PetscBool, PetscBool, Ptr{PetscSection}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscSectionCreateGlobalSectionCensored(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSectionCreateGlobalSectionCensored, $petsc_library), PetscErrorCode, (PetscSection, PetscSF, PetscBool, PetscInt, Ptr{PetscInt}, Ptr{PetscSection}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscSectionCreateSubsection(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionCreateSubsection, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscInt}, Ptr{PetscSection}), arg1, arg2, arg3, arg4)
end

function PetscSectionCreateSupersection(arg1, arg2, arg3)
    ccall((:PetscSectionCreateSupersection, $petsc_library), PetscErrorCode, (Ptr{PetscSection}, PetscInt, Ptr{PetscSection}), arg1, arg2, arg3)
end

function PetscSectionCreateSubmeshSection(arg1, arg2, arg3)
    ccall((:PetscSectionCreateSubmeshSection, $petsc_library), PetscErrorCode, (PetscSection, IS, Ptr{PetscSection}), arg1, arg2, arg3)
end

function PetscSectionCreateSubdomainSection(arg1, arg2, arg3)
    ccall((:PetscSectionCreateSubdomainSection, $petsc_library), PetscErrorCode, (PetscSection, IS, Ptr{PetscSection}), arg1, arg2, arg3)
end

function PetscSectionCreateComponentSubsection(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionCreateComponentSubsection, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscInt}, Ptr{PetscSection}), arg1, arg2, arg3, arg4)
end

function PetscSectionPermute(arg1, arg2, arg3)
    ccall((:PetscSectionPermute, $petsc_library), PetscErrorCode, (PetscSection, IS, Ptr{PetscSection}), arg1, arg2, arg3)
end

function PetscSectionGetField(arg1, arg2, arg3)
    ccall((:PetscSectionGetField, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscSection}), arg1, arg2, arg3)
end

function PetscSectionSetUseFieldOffsets(arg1, arg2)
    ccall((:PetscSectionSetUseFieldOffsets, $petsc_library), PetscErrorCode, (PetscSection, PetscBool), arg1, arg2)
end

function PetscSectionGetUseFieldOffsets(arg1, arg2)
    ccall((:PetscSectionGetUseFieldOffsets, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscBool}), arg1, arg2)
end

function PetscSectionExtractDofsFromArray(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSectionExtractDofsFromArray, $petsc_library), PetscErrorCode, (PetscSection, MPI_Datatype, Ptr{Cvoid}, IS, Ptr{PetscSection}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscSectionSetClosureIndex(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionSetClosureIndex, $petsc_library), PetscErrorCode, (PetscSection, PetscObject, PetscSection, IS), arg1, arg2, arg3, arg4)
end

function PetscSectionGetClosureIndex(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionGetClosureIndex, $petsc_library), PetscErrorCode, (PetscSection, PetscObject, Ptr{PetscSection}, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function PetscSectionSetClosurePermutation(arg1, arg2, arg3, arg4)
    ccall((:PetscSectionSetClosurePermutation, $petsc_library), PetscErrorCode, (PetscSection, PetscObject, PetscInt, IS), arg1, arg2, arg3, arg4)
end

function PetscSectionGetClosurePermutation(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSectionGetClosurePermutation, $petsc_library), PetscErrorCode, (PetscSection, PetscObject, PetscInt, PetscInt, Ptr{IS}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSectionGetClosureInversePermutation(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSectionGetClosureInversePermutation, $petsc_library), PetscErrorCode, (PetscSection, PetscObject, PetscInt, PetscInt, Ptr{IS}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSectionResetClosurePermutation(arg1)
    ccall((:PetscSectionResetClosurePermutation, $petsc_library), PetscErrorCode, (PetscSection,), arg1)
end

function PetscSectionSymSetType(arg1, arg2)
    ccall((:PetscSectionSymSetType, $petsc_library), PetscErrorCode, (PetscSectionSym, PetscSectionSymType), arg1, arg2)
end

function PetscSectionSymGetType(arg1, arg2)
    ccall((:PetscSectionSymGetType, $petsc_library), PetscErrorCode, (PetscSectionSym, Ptr{PetscSectionSymType}), arg1, arg2)
end

function PetscSectionSymRegister(arg1, arg2)
    ccall((:PetscSectionSymRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscSectionSymCreate(arg1, arg2)
    ccall((:PetscSectionSymCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscSectionSym}), arg1, arg2)
end

function PetscSectionSymDestroy(arg1)
    ccall((:PetscSectionSymDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscSectionSym},), arg1)
end

function PetscSectionSymView(arg1, arg2)
    ccall((:PetscSectionSymView, $petsc_library), PetscErrorCode, (PetscSectionSym, PetscViewer), arg1, arg2)
end

function PetscSectionSymCopy(arg1, arg2)
    ccall((:PetscSectionSymCopy, $petsc_library), PetscErrorCode, (PetscSectionSym, PetscSectionSym), arg1, arg2)
end

function PetscSectionSymDistribute(arg1, arg2, arg3)
    ccall((:PetscSectionSymDistribute, $petsc_library), PetscErrorCode, (PetscSectionSym, PetscSF, Ptr{PetscSectionSym}), arg1, arg2, arg3)
end

function PetscSectionSetSym(arg1, arg2)
    ccall((:PetscSectionSetSym, $petsc_library), PetscErrorCode, (PetscSection, PetscSectionSym), arg1, arg2)
end

function PetscSectionGetSym(arg1, arg2)
    ccall((:PetscSectionGetSym, $petsc_library), PetscErrorCode, (PetscSection, Ptr{PetscSectionSym}), arg1, arg2)
end

function PetscSectionSetFieldSym(arg1, arg2, arg3)
    ccall((:PetscSectionSetFieldSym, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscSectionSym), arg1, arg2, arg3)
end

function PetscSectionGetFieldSym(arg1, arg2, arg3)
    ccall((:PetscSectionGetFieldSym, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscSectionSym}), arg1, arg2, arg3)
end

function PetscSectionGetPointSyms(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSectionGetPointSyms, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{PetscInt}}}, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSectionRestorePointSyms(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscSectionRestorePointSyms, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{PetscInt}}}, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5)
end

function PetscSectionGetFieldPointSyms(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSectionGetFieldPointSyms, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{PetscInt}}}, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscSectionRestoreFieldPointSyms(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSectionRestoreFieldPointSyms, $petsc_library), PetscErrorCode, (PetscSection, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{PetscInt}}}, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

const MatSolverType = Ptr{Cchar}

@enum MatFactorType::UInt32 begin
    MAT_FACTOR_NONE = 0
    MAT_FACTOR_LU = 1
    MAT_FACTOR_CHOLESKY = 2
    MAT_FACTOR_ILU = 3
    MAT_FACTOR_ICC = 4
    MAT_FACTOR_ILUDT = 5
    MAT_FACTOR_QR = 6
    MAT_FACTOR_NUM_TYPES = 7
end

function MatGetFactor(arg1, arg2, arg3, arg4)
    ccall((:MatGetFactor, $petsc_library), PetscErrorCode, (Mat, MatSolverType, MatFactorType, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatGetFactorAvailable(arg1, arg2, arg3, arg4)
    ccall((:MatGetFactorAvailable, $petsc_library), PetscErrorCode, (Mat, MatSolverType, MatFactorType, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function MatFactorGetCanUseOrdering(arg1, arg2)
    ccall((:MatFactorGetCanUseOrdering, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

function MatFactorGetUseOrdering(A, b)
    ccall((:MatFactorGetUseOrdering, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), A, b)
end

function MatFactorGetSolverType(arg1, arg2)
    ccall((:MatFactorGetSolverType, $petsc_library), PetscErrorCode, (Mat, Ptr{MatSolverType}), arg1, arg2)
end

function MatGetFactorType(arg1, arg2)
    ccall((:MatGetFactorType, $petsc_library), PetscErrorCode, (Mat, Ptr{MatFactorType}), arg1, arg2)
end

function MatSetFactorType(arg1, arg2)
    ccall((:MatSetFactorType, $petsc_library), PetscErrorCode, (Mat, MatFactorType), arg1, arg2)
end

# typedef PetscErrorCode ( MatSolverFn ) ( Mat , MatFactorType , Mat * )
const MatSolverFn = Cvoid

const MatSolverFunction = Ptr{MatSolverFn}

function MatSolverTypeRegister(arg1, arg2, arg3, arg4)
    ccall((:MatSolverTypeRegister, $petsc_library), PetscErrorCode, (MatSolverType, MatType, MatFactorType, Ptr{MatSolverFn}), arg1, arg2, arg3, arg4)
end

function MatSolverTypeGet(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatSolverTypeGet, $petsc_library), PetscErrorCode, (MatSolverType, MatType, MatFactorType, Ptr{PetscBool}, Ptr{PetscBool}, Ptr{Ptr{MatSolverFn}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

const MatSolverPackage = MatSolverType

function MatSolverPackageRegister(stype, mtype, ftype, f)
    ccall((:MatSolverPackageRegister, $petsc_library), PetscErrorCode, (MatSolverType, MatType, MatFactorType, Ptr{MatSolverFn}), stype, mtype, ftype, f)
end

function MatSolverPackageGet(stype, mtype, ftype, foundmtype, foundstype, f)
    ccall((:MatSolverPackageGet, $petsc_library), PetscErrorCode, (MatSolverType, MatType, MatFactorType, Ptr{PetscBool}, Ptr{PetscBool}, Ptr{Ptr{MatSolverFn}}), stype, mtype, ftype, foundmtype, foundstype, f)
end

@enum MatProductType::UInt32 begin
    MATPRODUCT_UNSPECIFIED = 0
    MATPRODUCT_AB = 1
    MATPRODUCT_AtB = 2
    MATPRODUCT_ABt = 3
    MATPRODUCT_PtAP = 4
    MATPRODUCT_RARt = 5
    MATPRODUCT_ABC = 6
end

const MatProductAlgorithm = Ptr{Cchar}

function MatProductCreate(arg1, arg2, arg3, arg4)
    ccall((:MatProductCreate, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatProductCreateWithMat(arg1, arg2, arg3, arg4)
    ccall((:MatProductCreateWithMat, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Mat), arg1, arg2, arg3, arg4)
end

function MatProductSetType(arg1, arg2)
    ccall((:MatProductSetType, $petsc_library), PetscErrorCode, (Mat, MatProductType), arg1, arg2)
end

function MatProductSetAlgorithm(arg1, arg2)
    ccall((:MatProductSetAlgorithm, $petsc_library), PetscErrorCode, (Mat, MatProductAlgorithm), arg1, arg2)
end

function MatProductGetAlgorithm(arg1, arg2)
    ccall((:MatProductGetAlgorithm, $petsc_library), PetscErrorCode, (Mat, Ptr{MatProductAlgorithm}), arg1, arg2)
end

function MatProductSetFill(arg1, arg2)
    ccall((:MatProductSetFill, $petsc_library), PetscErrorCode, (Mat, PetscReal), arg1, arg2)
end

function MatProductSetFromOptions(arg1)
    ccall((:MatProductSetFromOptions, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatProductSymbolic(arg1)
    ccall((:MatProductSymbolic, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatProductNumeric(arg1)
    ccall((:MatProductNumeric, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatProductReplaceMats(arg1, arg2, arg3, arg4)
    ccall((:MatProductReplaceMats, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Mat), arg1, arg2, arg3, arg4)
end

function MatProductClear(arg1)
    ccall((:MatProductClear, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatProductView(arg1, arg2)
    ccall((:MatProductView, $petsc_library), PetscErrorCode, (Mat, PetscViewer), arg1, arg2)
end

function MatProductGetType(arg1, arg2)
    ccall((:MatProductGetType, $petsc_library), PetscErrorCode, (Mat, Ptr{MatProductType}), arg1, arg2)
end

function MatProductGetMats(arg1, arg2, arg3, arg4)
    ccall((:MatProductGetMats, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}, Ptr{Mat}, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

@enum MatReuse::UInt32 begin
    MAT_INITIAL_MATRIX = 0
    MAT_REUSE_MATRIX = 1
    MAT_IGNORE_MATRIX = 2
    MAT_INPLACE_MATRIX = 3
end

@enum MatCreateSubMatrixOption::UInt32 begin
    MAT_DO_NOT_GET_VALUES = 0
    MAT_GET_VALUES = 1
end

function MatInitializePackage()
    ccall((:MatInitializePackage, $petsc_library), PetscErrorCode, ())
end

function MatFinalizePackage()
    ccall((:MatFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function MatCreate(arg1, arg2)
    ccall((:MatCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Mat}), arg1, arg2)
end

function MatCreateFromOptions(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatCreateFromOptions, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function MatSetSizes(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatSetSizes, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4, arg5)
end

function MatSetType(arg1, arg2)
    ccall((:MatSetType, $petsc_library), PetscErrorCode, (Mat, MatType), arg1, arg2)
end

function MatGetVecType(arg1, arg2)
    ccall((:MatGetVecType, $petsc_library), PetscErrorCode, (Mat, Ptr{VecType}), arg1, arg2)
end

function MatSetVecType(arg1, arg2)
    ccall((:MatSetVecType, $petsc_library), PetscErrorCode, (Mat, VecType), arg1, arg2)
end

function MatSetFromOptions(arg1)
    ccall((:MatSetFromOptions, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatViewFromOptions(arg1, arg2, arg3)
    ccall((:MatViewFromOptions, $petsc_library), PetscErrorCode, (Mat, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function MatRegister(arg1, arg2)
    ccall((:MatRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function MatRegisterRootName(arg1, arg2, arg3)
    ccall((:MatRegisterRootName, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}), arg1, arg2, arg3)
end

function MatSetOptionsPrefix(arg1, arg2)
    ccall((:MatSetOptionsPrefix, $petsc_library), PetscErrorCode, (Mat, Ptr{Cchar}), arg1, arg2)
end

function MatSetOptionsPrefixFactor(arg1, arg2)
    ccall((:MatSetOptionsPrefixFactor, $petsc_library), PetscErrorCode, (Mat, Ptr{Cchar}), arg1, arg2)
end

function MatAppendOptionsPrefixFactor(arg1, arg2)
    ccall((:MatAppendOptionsPrefixFactor, $petsc_library), PetscErrorCode, (Mat, Ptr{Cchar}), arg1, arg2)
end

function MatAppendOptionsPrefix(arg1, arg2)
    ccall((:MatAppendOptionsPrefix, $petsc_library), PetscErrorCode, (Mat, Ptr{Cchar}), arg1, arg2)
end

function MatGetOptionsPrefix(arg1, arg2)
    ccall((:MatGetOptionsPrefix, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function MatSetErrorIfFailure(arg1, arg2)
    ccall((:MatSetErrorIfFailure, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

@enum MatStructure::UInt32 begin
    DIFFERENT_NONZERO_PATTERN = 0
    SUBSET_NONZERO_PATTERN = 1
    SAME_NONZERO_PATTERN = 2
    UNKNOWN_NONZERO_PATTERN = 3
end

function MatCreateMPIAIJPERM(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:MatCreateMPIAIJPERM, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function MatCreateSeqAIJPERM(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateSeqAIJPERM, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatCreateSeqSELL(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateSeqSELL, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatCreateSELL(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:MatCreateSELL, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function MatSeqSELLSetPreallocation(arg1, arg2, arg3)
    ccall((:MatSeqSELLSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatMPISELLSetPreallocation(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMPISELLSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function MatSeqSELLGetFillRatio(arg1, arg2)
    ccall((:MatSeqSELLGetFillRatio, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscReal}), arg1, arg2)
end

function MatSeqSELLGetMaxSliceWidth(arg1, arg2)
    ccall((:MatSeqSELLGetMaxSliceWidth, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatSeqSELLGetAvgSliceWidth(arg1, arg2)
    ccall((:MatSeqSELLGetAvgSliceWidth, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscReal}), arg1, arg2)
end

function MatSeqSELLSetSliceHeight(arg1, arg2)
    ccall((:MatSeqSELLSetSliceHeight, $petsc_library), PetscErrorCode, (Mat, PetscInt), arg1, arg2)
end

function MatSeqSELLGetVarSliceSize(arg1, arg2)
    ccall((:MatSeqSELLGetVarSliceSize, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscReal}), arg1, arg2)
end

function MatCreateSeqAIJSELL(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateSeqAIJSELL, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatCreateMPIAIJSELL(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:MatCreateMPIAIJSELL, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function MatMPISELLGetLocalMatCondensed(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMPISELLGetLocalMatCondensed, $petsc_library), PetscErrorCode, (Mat, MatReuse, Ptr{IS}, Ptr{IS}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatMPISELLGetSeqSELL(arg1, arg2, arg3, arg4)
    ccall((:MatMPISELLGetSeqSELL, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}, Ptr{Mat}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function MatCreateSeqDense(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatCreateSeqDense, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatCreateDense(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateDense, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatCreateSeqAIJ(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateSeqAIJ, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatCreateAIJ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:MatCreateAIJ, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function MatCreateMPIAIJWithArrays(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:MatCreateMPIAIJWithArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function MatUpdateMPIAIJWithArrays(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatUpdateMPIAIJWithArrays, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function MatUpdateMPIAIJWithArray(arg1, arg2)
    ccall((:MatUpdateMPIAIJWithArray, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}), arg1, arg2)
end

function MatCreateMPIAIJWithSplitArrays(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
    ccall((:MatCreateMPIAIJWithSplitArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
end

function MatCreateMPIAIJWithSeqAIJ(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatCreateMPIAIJWithSeqAIJ, $petsc_library), PetscErrorCode, (MPI_Comm, Mat, Mat, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatCreateSeqBAIJ(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateSeqBAIJ, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatCreateBAIJ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:MatCreateBAIJ, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function MatCreateMPIBAIJWithArrays(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:MatCreateMPIBAIJWithArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function MatSetPreallocationCOO(arg1, arg2, arg3, arg4)
    ccall((:MatSetPreallocationCOO, $petsc_library), PetscErrorCode, (Mat, PetscCount, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function MatSetPreallocationCOOLocal(arg1, arg2, arg3, arg4)
    ccall((:MatSetPreallocationCOOLocal, $petsc_library), PetscErrorCode, (Mat, PetscCount, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function MatSetValuesCOO(arg1, arg2, arg3)
    ccall((:MatSetValuesCOO, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3)
end

function MatCreateMPIAdj(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateMPIAdj, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatCreateSeqSBAIJ(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateSeqSBAIJ, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatCreateSBAIJ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:MatCreateSBAIJ, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function MatCreateMPISBAIJWithArrays(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:MatCreateMPISBAIJWithArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function MatSeqSBAIJSetPreallocationCSR(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatSeqSBAIJSetPreallocationCSR, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5)
end

function MatMPISBAIJSetPreallocationCSR(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMPISBAIJSetPreallocationCSR, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5)
end

function MatXAIJSetPreallocation(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatXAIJSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatCreateShell(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateShell, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatCreateCentering(arg1, arg2, arg3, arg4)
    ccall((:MatCreateCentering, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateNormal(arg1, arg2)
    ccall((:MatCreateNormal, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatCreateNormalHermitian(arg1, arg2)
    ccall((:MatCreateNormalHermitian, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatCreateLRC(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatCreateLRC, $petsc_library), PetscErrorCode, (Mat, Mat, Vec, Mat, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatLRCGetMats(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatLRCGetMats, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}, Ptr{Mat}, Ptr{Vec}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatLRCSetMats(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatLRCSetMats, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Vec, Mat), arg1, arg2, arg3, arg4, arg5)
end

function MatCreateIS(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:MatCreateIS, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, ISLocalToGlobalMapping, ISLocalToGlobalMapping, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function MatCreateSeqAIJCRL(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateSeqAIJCRL, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatCreateMPIAIJCRL(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatCreateMPIAIJCRL, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function MatCreateScatter(arg1, arg2, arg3)
    ccall((:MatCreateScatter, $petsc_library), PetscErrorCode, (MPI_Comm, VecScatter, Ptr{Mat}), arg1, arg2, arg3)
end

function MatScatterSetVecScatter(arg1, arg2)
    ccall((:MatScatterSetVecScatter, $petsc_library), PetscErrorCode, (Mat, VecScatter), arg1, arg2)
end

function MatScatterGetVecScatter(arg1, arg2)
    ccall((:MatScatterGetVecScatter, $petsc_library), PetscErrorCode, (Mat, Ptr{VecScatter}), arg1, arg2)
end

function MatCreateBlockMat(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateBlockMat, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatCompositeAddMat(arg1, arg2)
    ccall((:MatCompositeAddMat, $petsc_library), PetscErrorCode, (Mat, Mat), arg1, arg2)
end

function MatCompositeMerge(arg1)
    ccall((:MatCompositeMerge, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

@enum MatCompositeMergeType::UInt32 begin
    MAT_COMPOSITE_MERGE_RIGHT = 0
    MAT_COMPOSITE_MERGE_LEFT = 1
end

function MatCompositeSetMergeType(arg1, arg2)
    ccall((:MatCompositeSetMergeType, $petsc_library), PetscErrorCode, (Mat, MatCompositeMergeType), arg1, arg2)
end

function MatCreateComposite(arg1, arg2, arg3, arg4)
    ccall((:MatCreateComposite, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{Mat}, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

@enum MatCompositeType::UInt32 begin
    MAT_COMPOSITE_ADDITIVE = 0
    MAT_COMPOSITE_MULTIPLICATIVE = 1
end

function MatCompositeSetType(arg1, arg2)
    ccall((:MatCompositeSetType, $petsc_library), PetscErrorCode, (Mat, MatCompositeType), arg1, arg2)
end

function MatCompositeGetType(arg1, arg2)
    ccall((:MatCompositeGetType, $petsc_library), PetscErrorCode, (Mat, Ptr{MatCompositeType}), arg1, arg2)
end

function MatCompositeSetMatStructure(arg1, arg2)
    ccall((:MatCompositeSetMatStructure, $petsc_library), PetscErrorCode, (Mat, MatStructure), arg1, arg2)
end

function MatCompositeGetMatStructure(arg1, arg2)
    ccall((:MatCompositeGetMatStructure, $petsc_library), PetscErrorCode, (Mat, Ptr{MatStructure}), arg1, arg2)
end

function MatCompositeGetNumberMat(arg1, arg2)
    ccall((:MatCompositeGetNumberMat, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatCompositeGetMat(arg1, arg2, arg3)
    ccall((:MatCompositeGetMat, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Mat}), arg1, arg2, arg3)
end

function MatCompositeSetScalings(arg1, arg2)
    ccall((:MatCompositeSetScalings, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}), arg1, arg2)
end

function MatCreateFFT(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatCreateFFT, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscInt}, MatType, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatCreateSeqCUFFT(arg1, arg2, arg3, arg4)
    ccall((:MatCreateSeqCUFFT, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateTranspose(arg1, arg2)
    ccall((:MatCreateTranspose, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatTransposeGetMat(arg1, arg2)
    ccall((:MatTransposeGetMat, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatCreateHermitianTranspose(arg1, arg2)
    ccall((:MatCreateHermitianTranspose, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatHermitianTransposeGetMat(arg1, arg2)
    ccall((:MatHermitianTransposeGetMat, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatNormalGetMat(arg1, arg2)
    ccall((:MatNormalGetMat, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatNormalHermitianGetMat(arg1, arg2)
    ccall((:MatNormalHermitianGetMat, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatCreateSubMatrixVirtual(arg1, arg2, arg3, arg4)
    ccall((:MatCreateSubMatrixVirtual, $petsc_library), PetscErrorCode, (Mat, IS, IS, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatSubMatrixVirtualUpdate(arg1, arg2, arg3, arg4)
    ccall((:MatSubMatrixVirtualUpdate, $petsc_library), PetscErrorCode, (Mat, Mat, IS, IS), arg1, arg2, arg3, arg4)
end

function MatCreateLocalRef(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLocalRef, $petsc_library), PetscErrorCode, (Mat, IS, IS, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateConstantDiagonal(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateConstantDiagonal, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscScalar, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatCreateDiagonal(arg1, arg2)
    ccall((:MatCreateDiagonal, $petsc_library), PetscErrorCode, (Vec, Ptr{Mat}), arg1, arg2)
end

function MatDiagonalGetDiagonal(arg1, arg2)
    ccall((:MatDiagonalGetDiagonal, $petsc_library), PetscErrorCode, (Mat, Ptr{Vec}), arg1, arg2)
end

function MatDiagonalRestoreDiagonal(arg1, arg2)
    ccall((:MatDiagonalRestoreDiagonal, $petsc_library), PetscErrorCode, (Mat, Ptr{Vec}), arg1, arg2)
end

function MatDiagonalGetInverseDiagonal(arg1, arg2)
    ccall((:MatDiagonalGetInverseDiagonal, $petsc_library), PetscErrorCode, (Mat, Ptr{Vec}), arg1, arg2)
end

function MatDiagonalRestoreInverseDiagonal(arg1, arg2)
    ccall((:MatDiagonalRestoreInverseDiagonal, $petsc_library), PetscErrorCode, (Mat, Ptr{Vec}), arg1, arg2)
end

function MatHYPRESetPreallocation(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatHYPRESetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function MatPythonSetType(arg1, arg2)
    ccall((:MatPythonSetType, $petsc_library), PetscErrorCode, (Mat, Ptr{Cchar}), arg1, arg2)
end

function MatPythonGetType(arg1, arg2)
    ccall((:MatPythonGetType, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function MatResetPreallocation(arg1)
    ccall((:MatResetPreallocation, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatSetUp(arg1)
    ccall((:MatSetUp, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatDestroy(arg1)
    ccall((:MatDestroy, $petsc_library), PetscErrorCode, (Ptr{Mat},), arg1)
end

function MatGetNonzeroState(arg1, arg2)
    ccall((:MatGetNonzeroState, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscObjectState}), arg1, arg2)
end

function MatConjugate(arg1)
    ccall((:MatConjugate, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatRealPart(arg1)
    ccall((:MatRealPart, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatImaginaryPart(arg1)
    ccall((:MatImaginaryPart, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatGetDiagonalBlock(arg1, arg2)
    ccall((:MatGetDiagonalBlock, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatGetTrace(arg1, arg2)
    ccall((:MatGetTrace, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}), arg1, arg2)
end

function MatInvertBlockDiagonal(arg1, arg2)
    ccall((:MatInvertBlockDiagonal, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatInvertVariableBlockDiagonal(arg1, arg2, arg3, arg4)
    ccall((:MatInvertVariableBlockDiagonal, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function MatInvertBlockDiagonalMat(arg1, arg2)
    ccall((:MatInvertBlockDiagonalMat, $petsc_library), PetscErrorCode, (Mat, Mat), arg1, arg2)
end

function MatInvertVariableBlockEnvelope(arg1, arg2, arg3)
    ccall((:MatInvertVariableBlockEnvelope, $petsc_library), PetscErrorCode, (Mat, MatReuse, Ptr{Mat}), arg1, arg2, arg3)
end

function MatComputeVariableBlockEnvelope(arg1)
    ccall((:MatComputeVariableBlockEnvelope, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatSetValuesIS(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatSetValuesIS, $petsc_library), PetscErrorCode, (Mat, IS, IS, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5)
end

function MatSetValuesBlocked(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatSetValuesBlocked, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatSetValuesRow(arg1, arg2, arg3)
    ccall((:MatSetValuesRow, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function MatSetValuesRowLocal(arg1, arg2, arg3)
    ccall((:MatSetValuesRowLocal, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function MatSetValuesBatch(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatSetValuesBatch, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5)
end

function MatSetRandom(arg1, arg2)
    ccall((:MatSetRandom, $petsc_library), PetscErrorCode, (Mat, PetscRandom), arg1, arg2)
end

struct MatStencil
    k::PetscInt
    j::PetscInt
    i::PetscInt
    c::PetscInt
end

function MatSetValuesStencil(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatSetValuesStencil, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{MatStencil}, PetscInt, Ptr{MatStencil}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatSetValuesBlockedStencil(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatSetValuesBlockedStencil, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{MatStencil}, PetscInt, Ptr{MatStencil}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatSetStencil(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatSetStencil, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, PetscInt), arg1, arg2, arg3, arg4, arg5)
end

@enum MatAssemblyType::UInt32 begin
    MAT_FLUSH_ASSEMBLY = 1
    MAT_FINAL_ASSEMBLY = 0
end

function MatAssemblyBegin(arg1, arg2)
    ccall((:MatAssemblyBegin, $petsc_library), PetscErrorCode, (Mat, MatAssemblyType), arg1, arg2)
end

function MatAssemblyEnd(arg1, arg2)
    ccall((:MatAssemblyEnd, $petsc_library), PetscErrorCode, (Mat, MatAssemblyType), arg1, arg2)
end

function MatAssembled(arg1, arg2)
    ccall((:MatAssembled, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

@enum MatOption::Int32 begin
    MAT_OPTION_MIN = -3
    MAT_UNUSED_NONZERO_LOCATION_ERR = -2
    MAT_ROW_ORIENTED = -1
    MAT_SYMMETRIC = 1
    MAT_STRUCTURALLY_SYMMETRIC = 2
    MAT_FORCE_DIAGONAL_ENTRIES = 3
    MAT_IGNORE_OFF_PROC_ENTRIES = 4
    MAT_USE_HASH_TABLE = 5
    MAT_KEEP_NONZERO_PATTERN = 6
    MAT_IGNORE_ZERO_ENTRIES = 7
    MAT_USE_INODES = 8
    MAT_HERMITIAN = 9
    MAT_SYMMETRY_ETERNAL = 10
    MAT_NEW_NONZERO_LOCATION_ERR = 11
    MAT_IGNORE_LOWER_TRIANGULAR = 12
    MAT_ERROR_LOWER_TRIANGULAR = 13
    MAT_GETROW_UPPERTRIANGULAR = 14
    MAT_SPD = 15
    MAT_NO_OFF_PROC_ZERO_ROWS = 16
    MAT_NO_OFF_PROC_ENTRIES = 17
    MAT_NEW_NONZERO_LOCATIONS = 18
    MAT_NEW_NONZERO_ALLOCATION_ERR = 19
    MAT_SUBSET_OFF_PROC_ENTRIES = 20
    MAT_SUBMAT_SINGLEIS = 21
    MAT_STRUCTURE_ONLY = 22
    MAT_SORTED_FULL = 23
    MAT_FORM_EXPLICIT_TRANSPOSE = 24
    MAT_STRUCTURAL_SYMMETRY_ETERNAL = 25
    MAT_SPD_ETERNAL = 26
    MAT_OPTION_MAX = 27
end

function MatSetOption(arg1, arg2, arg3)
    ccall((:MatSetOption, $petsc_library), PetscErrorCode, (Mat, MatOption, PetscBool), arg1, arg2, arg3)
end

function MatGetOption(arg1, arg2, arg3)
    ccall((:MatGetOption, $petsc_library), PetscErrorCode, (Mat, MatOption, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatPropagateSymmetryOptions(arg1, arg2)
    ccall((:MatPropagateSymmetryOptions, $petsc_library), PetscErrorCode, (Mat, Mat), arg1, arg2)
end

function MatGetType(arg1, arg2)
    ccall((:MatGetType, $petsc_library), PetscErrorCode, (Mat, Ptr{MatType}), arg1, arg2)
end

function MatGetValues(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatGetValues, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatGetRow(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatGetRow, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5)
end

function MatRestoreRow(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatRestoreRow, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5)
end

function MatGetRowUpperTriangular(arg1)
    ccall((:MatGetRowUpperTriangular, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatRestoreRowUpperTriangular(arg1)
    ccall((:MatRestoreRowUpperTriangular, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatGetColumnVector(arg1, arg2, arg3)
    ccall((:MatGetColumnVector, $petsc_library), PetscErrorCode, (Mat, Vec, PetscInt), arg1, arg2, arg3)
end

function MatSeqAIJGetArray(arg1, arg2)
    ccall((:MatSeqAIJGetArray, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatSeqAIJGetArrayRead(arg1, arg2)
    ccall((:MatSeqAIJGetArrayRead, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatSeqAIJGetArrayWrite(arg1, arg2)
    ccall((:MatSeqAIJGetArrayWrite, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatSeqAIJRestoreArray(arg1, arg2)
    ccall((:MatSeqAIJRestoreArray, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatSeqAIJRestoreArrayRead(arg1, arg2)
    ccall((:MatSeqAIJRestoreArrayRead, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatSeqAIJRestoreArrayWrite(arg1, arg2)
    ccall((:MatSeqAIJRestoreArrayWrite, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatSeqAIJGetMaxRowNonzeros(arg1, arg2)
    ccall((:MatSeqAIJGetMaxRowNonzeros, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatSeqAIJSetValuesLocalFast(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatSeqAIJSetValuesLocalFast, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatSeqAIJSetType(arg1, arg2)
    ccall((:MatSeqAIJSetType, $petsc_library), PetscErrorCode, (Mat, MatType), arg1, arg2)
end

function MatSeqAIJKron(arg1, arg2, arg3, arg4)
    ccall((:MatSeqAIJKron, $petsc_library), PetscErrorCode, (Mat, Mat, MatReuse, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatSeqAIJRegister(arg1, arg2)
    ccall((:MatSeqAIJRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function MatSeqBAIJGetArray(arg1, arg2)
    ccall((:MatSeqBAIJGetArray, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatSeqBAIJRestoreArray(arg1, arg2)
    ccall((:MatSeqBAIJRestoreArray, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatSeqSBAIJGetArray(arg1, arg2)
    ccall((:MatSeqSBAIJGetArray, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatSeqSBAIJRestoreArray(arg1, arg2)
    ccall((:MatSeqSBAIJRestoreArray, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatDenseGetArray(arg1, arg2)
    ccall((:MatDenseGetArray, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatDenseRestoreArray(arg1, arg2)
    ccall((:MatDenseRestoreArray, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatDensePlaceArray(arg1, arg2)
    ccall((:MatDensePlaceArray, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}), arg1, arg2)
end

function MatDenseReplaceArray(arg1, arg2)
    ccall((:MatDenseReplaceArray, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}), arg1, arg2)
end

function MatDenseResetArray(arg1)
    ccall((:MatDenseResetArray, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatDenseGetArrayRead(arg1, arg2)
    ccall((:MatDenseGetArrayRead, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatDenseRestoreArrayRead(arg1, arg2)
    ccall((:MatDenseRestoreArrayRead, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatDenseGetArrayWrite(arg1, arg2)
    ccall((:MatDenseGetArrayWrite, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatDenseRestoreArrayWrite(arg1, arg2)
    ccall((:MatDenseRestoreArrayWrite, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatDenseGetArrayAndMemType(arg1, arg2, arg3)
    ccall((:MatDenseGetArrayAndMemType, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}, Ptr{PetscMemType}), arg1, arg2, arg3)
end

function MatDenseRestoreArrayAndMemType(arg1, arg2)
    ccall((:MatDenseRestoreArrayAndMemType, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatDenseGetArrayReadAndMemType(arg1, arg2, arg3)
    ccall((:MatDenseGetArrayReadAndMemType, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}, Ptr{PetscMemType}), arg1, arg2, arg3)
end

function MatDenseRestoreArrayReadAndMemType(arg1, arg2)
    ccall((:MatDenseRestoreArrayReadAndMemType, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatDenseGetArrayWriteAndMemType(arg1, arg2, arg3)
    ccall((:MatDenseGetArrayWriteAndMemType, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}, Ptr{PetscMemType}), arg1, arg2, arg3)
end

function MatDenseRestoreArrayWriteAndMemType(arg1, arg2)
    ccall((:MatDenseRestoreArrayWriteAndMemType, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatGetBlockSize(arg1, arg2)
    ccall((:MatGetBlockSize, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatSetBlockSize(arg1, arg2)
    ccall((:MatSetBlockSize, $petsc_library), PetscErrorCode, (Mat, PetscInt), arg1, arg2)
end

function MatGetBlockSizes(arg1, arg2, arg3)
    ccall((:MatGetBlockSizes, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatSetBlockSizes(arg1, arg2, arg3)
    ccall((:MatSetBlockSizes, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt), arg1, arg2, arg3)
end

function MatSetBlockSizesFromMats(arg1, arg2, arg3)
    ccall((:MatSetBlockSizesFromMats, $petsc_library), PetscErrorCode, (Mat, Mat, Mat), arg1, arg2, arg3)
end

function MatSetVariableBlockSizes(arg1, arg2, arg3)
    ccall((:MatSetVariableBlockSizes, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatGetVariableBlockSizes(arg1, arg2, arg3)
    ccall((:MatGetVariableBlockSizes, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function MatDenseGetColumn(arg1, arg2, arg3)
    ccall((:MatDenseGetColumn, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3)
end

function MatDenseRestoreColumn(arg1, arg2)
    ccall((:MatDenseRestoreColumn, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatDenseGetColumnVec(arg1, arg2, arg3)
    ccall((:MatDenseGetColumnVec, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function MatDenseRestoreColumnVec(arg1, arg2, arg3)
    ccall((:MatDenseRestoreColumnVec, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function MatDenseGetColumnVecRead(arg1, arg2, arg3)
    ccall((:MatDenseGetColumnVecRead, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function MatDenseRestoreColumnVecRead(arg1, arg2, arg3)
    ccall((:MatDenseRestoreColumnVecRead, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function MatDenseGetColumnVecWrite(arg1, arg2, arg3)
    ccall((:MatDenseGetColumnVecWrite, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function MatDenseRestoreColumnVecWrite(arg1, arg2, arg3)
    ccall((:MatDenseRestoreColumnVecWrite, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function MatDenseGetSubMatrix(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatDenseGetSubMatrix, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatDenseRestoreSubMatrix(arg1, arg2)
    ccall((:MatDenseRestoreSubMatrix, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatMult(arg1, arg2, arg3)
    ccall((:MatMult, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatMultDiagonalBlock(arg1, arg2, arg3)
    ccall((:MatMultDiagonalBlock, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatMultAdd(arg1, arg2, arg3, arg4)
    ccall((:MatMultAdd, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function MatMultTranspose(arg1, arg2, arg3)
    ccall((:MatMultTranspose, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatMultHermitianTranspose(arg1, arg2, arg3)
    ccall((:MatMultHermitianTranspose, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatIsTranspose(arg1, arg2, arg3, arg4)
    ccall((:MatIsTranspose, $petsc_library), PetscErrorCode, (Mat, Mat, PetscReal, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function MatIsHermitianTranspose(arg1, arg2, arg3, arg4)
    ccall((:MatIsHermitianTranspose, $petsc_library), PetscErrorCode, (Mat, Mat, PetscReal, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function MatMultTransposeAdd(arg1, arg2, arg3, arg4)
    ccall((:MatMultTransposeAdd, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function MatMultHermitianTransposeAdd(arg1, arg2, arg3, arg4)
    ccall((:MatMultHermitianTransposeAdd, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function MatMatSolve(arg1, arg2, arg3)
    ccall((:MatMatSolve, $petsc_library), PetscErrorCode, (Mat, Mat, Mat), arg1, arg2, arg3)
end

function MatMatSolveTranspose(arg1, arg2, arg3)
    ccall((:MatMatSolveTranspose, $petsc_library), PetscErrorCode, (Mat, Mat, Mat), arg1, arg2, arg3)
end

function MatMatTransposeSolve(arg1, arg2, arg3)
    ccall((:MatMatTransposeSolve, $petsc_library), PetscErrorCode, (Mat, Mat, Mat), arg1, arg2, arg3)
end

function MatResidual(arg1, arg2, arg3, arg4)
    ccall((:MatResidual, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

@enum MatDuplicateOption::UInt32 begin
    MAT_DO_NOT_COPY_VALUES = 0
    MAT_COPY_VALUES = 1
    MAT_SHARE_NONZERO_PATTERN = 2
end

function MatConvert(arg1, arg2, arg3, arg4)
    ccall((:MatConvert, $petsc_library), PetscErrorCode, (Mat, MatType, MatReuse, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatDuplicate(arg1, arg2, arg3)
    ccall((:MatDuplicate, $petsc_library), PetscErrorCode, (Mat, MatDuplicateOption, Ptr{Mat}), arg1, arg2, arg3)
end

function MatCopy(arg1, arg2, arg3)
    ccall((:MatCopy, $petsc_library), PetscErrorCode, (Mat, Mat, MatStructure), arg1, arg2, arg3)
end

function MatView(arg1, arg2)
    ccall((:MatView, $petsc_library), PetscErrorCode, (Mat, PetscViewer), arg1, arg2)
end

function MatIsSymmetric(arg1, arg2, arg3)
    ccall((:MatIsSymmetric, $petsc_library), PetscErrorCode, (Mat, PetscReal, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatIsStructurallySymmetric(arg1, arg2)
    ccall((:MatIsStructurallySymmetric, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

function MatIsHermitian(arg1, arg2, arg3)
    ccall((:MatIsHermitian, $petsc_library), PetscErrorCode, (Mat, PetscReal, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatIsSymmetricKnown(arg1, arg2, arg3)
    ccall((:MatIsSymmetricKnown, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatIsHermitianKnown(arg1, arg2, arg3)
    ccall((:MatIsHermitianKnown, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatIsStructurallySymmetricKnown(arg1, arg2, arg3)
    ccall((:MatIsStructurallySymmetricKnown, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatIsSPDKnown(arg1, arg2, arg3)
    ccall((:MatIsSPDKnown, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatMissingDiagonal(arg1, arg2, arg3)
    ccall((:MatMissingDiagonal, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatLoad(arg1, arg2)
    ccall((:MatLoad, $petsc_library), PetscErrorCode, (Mat, PetscViewer), arg1, arg2)
end

function MatGetRowIJ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatGetRowIJ, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscBool, PetscBool, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function MatRestoreRowIJ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatRestoreRowIJ, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscBool, PetscBool, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function MatGetColumnIJ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatGetColumnIJ, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscBool, PetscBool, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function MatRestoreColumnIJ(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatRestoreColumnIJ, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscBool, PetscBool, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

mutable struct MatInfo
    block_size::PetscLogDouble
    nz_allocated::PetscLogDouble
    nz_used::PetscLogDouble
    nz_unneeded::PetscLogDouble
    memory::PetscLogDouble
    assemblies::PetscLogDouble
    mallocs::PetscLogDouble
    fill_ratio_given::PetscLogDouble
    fill_ratio_needed::PetscLogDouble
    factor_mallocs::PetscLogDouble
    MatInfo() = new()
end

@enum MatInfoType::UInt32 begin
    MAT_LOCAL = 1
    MAT_GLOBAL_MAX = 2
    MAT_GLOBAL_SUM = 3
end

function MatGetInfo(arg1, arg2, arg3)
    ccall((:MatGetInfo, $petsc_library), PetscErrorCode, (Mat, MatInfoType, Ptr{MatInfo}), arg1, arg2, arg3)
end

function MatGetDiagonal(arg1, arg2)
    ccall((:MatGetDiagonal, $petsc_library), PetscErrorCode, (Mat, Vec), arg1, arg2)
end

function MatGetRowMax(arg1, arg2, arg3)
    ccall((:MatGetRowMax, $petsc_library), PetscErrorCode, (Mat, Vec, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatGetRowMin(arg1, arg2, arg3)
    ccall((:MatGetRowMin, $petsc_library), PetscErrorCode, (Mat, Vec, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatGetRowMaxAbs(arg1, arg2, arg3)
    ccall((:MatGetRowMaxAbs, $petsc_library), PetscErrorCode, (Mat, Vec, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatGetRowSumAbs(arg1, arg2)
    ccall((:MatGetRowSumAbs, $petsc_library), PetscErrorCode, (Mat, Vec), arg1, arg2)
end

function MatGetRowMinAbs(arg1, arg2, arg3)
    ccall((:MatGetRowMinAbs, $petsc_library), PetscErrorCode, (Mat, Vec, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatGetRowSum(arg1, arg2)
    ccall((:MatGetRowSum, $petsc_library), PetscErrorCode, (Mat, Vec), arg1, arg2)
end

function MatTranspose(arg1, arg2, arg3)
    ccall((:MatTranspose, $petsc_library), PetscErrorCode, (Mat, MatReuse, Ptr{Mat}), arg1, arg2, arg3)
end

function MatTransposeSymbolic(arg1, arg2)
    ccall((:MatTransposeSymbolic, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatTransposeSetPrecursor(arg1, arg2)
    ccall((:MatTransposeSetPrecursor, $petsc_library), PetscErrorCode, (Mat, Mat), arg1, arg2)
end

function MatHermitianTranspose(arg1, arg2, arg3)
    ccall((:MatHermitianTranspose, $petsc_library), PetscErrorCode, (Mat, MatReuse, Ptr{Mat}), arg1, arg2, arg3)
end

function MatPermute(arg1, arg2, arg3, arg4)
    ccall((:MatPermute, $petsc_library), PetscErrorCode, (Mat, IS, IS, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatDiagonalScale(arg1, arg2, arg3)
    ccall((:MatDiagonalScale, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatDiagonalSet(arg1, arg2, arg3)
    ccall((:MatDiagonalSet, $petsc_library), PetscErrorCode, (Mat, Vec, InsertMode), arg1, arg2, arg3)
end

function MatEqual(arg1, arg2, arg3)
    ccall((:MatEqual, $petsc_library), PetscErrorCode, (Mat, Mat, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatMultEqual(arg1, arg2, arg3, arg4)
    ccall((:MatMultEqual, $petsc_library), PetscErrorCode, (Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function MatMultAddEqual(arg1, arg2, arg3, arg4)
    ccall((:MatMultAddEqual, $petsc_library), PetscErrorCode, (Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function MatMultTransposeEqual(arg1, arg2, arg3, arg4)
    ccall((:MatMultTransposeEqual, $petsc_library), PetscErrorCode, (Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function MatMultTransposeAddEqual(arg1, arg2, arg3, arg4)
    ccall((:MatMultTransposeAddEqual, $petsc_library), PetscErrorCode, (Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function MatMultHermitianTransposeEqual(arg1, arg2, arg3, arg4)
    ccall((:MatMultHermitianTransposeEqual, $petsc_library), PetscErrorCode, (Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function MatMultHermitianTransposeAddEqual(arg1, arg2, arg3, arg4)
    ccall((:MatMultHermitianTransposeAddEqual, $petsc_library), PetscErrorCode, (Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function MatMatMultEqual(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMatMultEqual, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function MatTransposeMatMultEqual(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatTransposeMatMultEqual, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function MatMatTransposeMultEqual(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMatTransposeMultEqual, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function MatPtAPMultEqual(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatPtAPMultEqual, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function MatRARtMultEqual(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatRARtMultEqual, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function MatIsLinear(arg1, arg2, arg3)
    ccall((:MatIsLinear, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatNorm(arg1, arg2, arg3)
    ccall((:MatNorm, $petsc_library), PetscErrorCode, (Mat, NormType, Ptr{PetscReal}), arg1, arg2, arg3)
end

function MatGetColumnNorms(arg1, arg2, arg3)
    ccall((:MatGetColumnNorms, $petsc_library), PetscErrorCode, (Mat, NormType, Ptr{PetscReal}), arg1, arg2, arg3)
end

function MatGetColumnSums(arg1, arg2)
    ccall((:MatGetColumnSums, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}), arg1, arg2)
end

function MatGetColumnSumsRealPart(arg1, arg2)
    ccall((:MatGetColumnSumsRealPart, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscReal}), arg1, arg2)
end

function MatGetColumnSumsImaginaryPart(arg1, arg2)
    ccall((:MatGetColumnSumsImaginaryPart, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscReal}), arg1, arg2)
end

function MatGetColumnMeans(arg1, arg2)
    ccall((:MatGetColumnMeans, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}), arg1, arg2)
end

function MatGetColumnMeansRealPart(arg1, arg2)
    ccall((:MatGetColumnMeansRealPart, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscReal}), arg1, arg2)
end

function MatGetColumnMeansImaginaryPart(arg1, arg2)
    ccall((:MatGetColumnMeansImaginaryPart, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscReal}), arg1, arg2)
end

function MatGetColumnReductions(arg1, arg2, arg3)
    ccall((:MatGetColumnReductions, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function MatZeroEntries(arg1)
    ccall((:MatZeroEntries, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatSetInf(arg1)
    ccall((:MatSetInf, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatZeroRows(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatZeroRows, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatZeroRowsIS(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatZeroRowsIS, $petsc_library), PetscErrorCode, (Mat, IS, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function MatZeroRowsStencil(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatZeroRowsStencil, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{MatStencil}, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatZeroRowsColumnsStencil(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatZeroRowsColumnsStencil, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{MatStencil}, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatZeroRowsColumns(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatZeroRowsColumns, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatZeroRowsColumnsIS(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatZeroRowsColumnsIS, $petsc_library), PetscErrorCode, (Mat, IS, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function MatGetSize(arg1, arg2, arg3)
    ccall((:MatGetSize, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatGetLocalSize(arg1, arg2, arg3)
    ccall((:MatGetLocalSize, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatGetOwnershipRange(arg1, arg2, arg3)
    ccall((:MatGetOwnershipRange, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatGetOwnershipRanges(arg1, arg2)
    ccall((:MatGetOwnershipRanges, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function MatGetOwnershipRangeColumn(arg1, arg2, arg3)
    ccall((:MatGetOwnershipRangeColumn, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatGetOwnershipRangesColumn(arg1, arg2)
    ccall((:MatGetOwnershipRangesColumn, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function MatGetOwnershipIS(arg1, arg2, arg3)
    ccall((:MatGetOwnershipIS, $petsc_library), PetscErrorCode, (Mat, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3)
end

function MatCreateSubMatrices(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateSubMatrices, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{IS}, Ptr{IS}, MatReuse, Ptr{Ptr{Mat}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatGetSubMatrices(mat, n, irow, icol, scall, submat)
    ccall((:MatGetSubMatrices, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{IS}, Ptr{IS}, MatReuse, Ptr{Ptr{Mat}}), mat, n, irow, icol, scall, submat)
end

function MatCreateSubMatricesMPI(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateSubMatricesMPI, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{IS}, Ptr{IS}, MatReuse, Ptr{Ptr{Mat}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatGetSubMatricesMPI(mat, n, irow, icol, scall, submat)
    ccall((:MatGetSubMatricesMPI, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{IS}, Ptr{IS}, MatReuse, Ptr{Ptr{Mat}}), mat, n, irow, icol, scall, submat)
end

function MatDestroyMatrices(arg1, arg2)
    ccall((:MatDestroyMatrices, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Ptr{Mat}}), arg1, arg2)
end

function MatDestroySubMatrices(arg1, arg2)
    ccall((:MatDestroySubMatrices, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Ptr{Mat}}), arg1, arg2)
end

function MatCreateSubMatrix(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatCreateSubMatrix, $petsc_library), PetscErrorCode, (Mat, IS, IS, MatReuse, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatGetSubMatrix(mat, isrow, iscol, cll, newmat)
    ccall((:MatGetSubMatrix, $petsc_library), PetscErrorCode, (Mat, IS, IS, MatReuse, Ptr{Mat}), mat, isrow, iscol, cll, newmat)
end

function MatGetLocalSubMatrix(arg1, arg2, arg3, arg4)
    ccall((:MatGetLocalSubMatrix, $petsc_library), PetscErrorCode, (Mat, IS, IS, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatRestoreLocalSubMatrix(arg1, arg2, arg3, arg4)
    ccall((:MatRestoreLocalSubMatrix, $petsc_library), PetscErrorCode, (Mat, IS, IS, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatGetSeqNonzeroStructure(arg1, arg2)
    ccall((:MatGetSeqNonzeroStructure, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatDestroySeqNonzeroStructure(arg1)
    ccall((:MatDestroySeqNonzeroStructure, $petsc_library), PetscErrorCode, (Ptr{Mat},), arg1)
end

function MatCreateMPIAIJSumSeqAIJ(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateMPIAIJSumSeqAIJ, $petsc_library), PetscErrorCode, (MPI_Comm, Mat, PetscInt, PetscInt, MatReuse, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatCreateMPIAIJSumSeqAIJSymbolic(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatCreateMPIAIJSumSeqAIJSymbolic, $petsc_library), PetscErrorCode, (MPI_Comm, Mat, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatCreateMPIAIJSumSeqAIJNumeric(arg1, arg2)
    ccall((:MatCreateMPIAIJSumSeqAIJNumeric, $petsc_library), PetscErrorCode, (Mat, Mat), arg1, arg2)
end

function MatMPIAIJGetLocalMat(arg1, arg2, arg3)
    ccall((:MatMPIAIJGetLocalMat, $petsc_library), PetscErrorCode, (Mat, MatReuse, Ptr{Mat}), arg1, arg2, arg3)
end

function MatAIJGetLocalMat(arg1, arg2)
    ccall((:MatAIJGetLocalMat, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatMPIAIJGetLocalMatCondensed(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMPIAIJGetLocalMatCondensed, $petsc_library), PetscErrorCode, (Mat, MatReuse, Ptr{IS}, Ptr{IS}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatMPIAIJGetLocalMatMerge(arg1, arg2, arg3, arg4)
    ccall((:MatMPIAIJGetLocalMatMerge, $petsc_library), PetscErrorCode, (Mat, MatReuse, Ptr{IS}, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatMPIAIJGetNumberNonzeros(arg1, arg2)
    ccall((:MatMPIAIJGetNumberNonzeros, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscCount}), arg1, arg2)
end

function MatGetBrowsOfAcols(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatGetBrowsOfAcols, $petsc_library), PetscErrorCode, (Mat, Mat, MatReuse, Ptr{IS}, Ptr{IS}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatGetGhosts(arg1, arg2, arg3)
    ccall((:MatGetGhosts, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function MatIncreaseOverlap(arg1, arg2, arg3, arg4)
    ccall((:MatIncreaseOverlap, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{IS}, PetscInt), arg1, arg2, arg3, arg4)
end

function MatIncreaseOverlapSplit(mat, n, is, ov)
    ccall((:MatIncreaseOverlapSplit, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{IS}, PetscInt), mat, n, is, ov)
end

function MatMPIAIJSetUseScalableIncreaseOverlap(arg1, arg2)
    ccall((:MatMPIAIJSetUseScalableIncreaseOverlap, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

function MatMatMult(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMatMult, $petsc_library), PetscErrorCode, (Mat, Mat, MatReuse, PetscReal, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatMatMatMult(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatMatMatMult, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, MatReuse, PetscReal, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatGalerkin(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatGalerkin, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, MatReuse, PetscReal, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatPtAP(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatPtAP, $petsc_library), PetscErrorCode, (Mat, Mat, MatReuse, PetscReal, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatRARt(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatRARt, $petsc_library), PetscErrorCode, (Mat, Mat, MatReuse, PetscReal, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatTransposeMatMult(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatTransposeMatMult, $petsc_library), PetscErrorCode, (Mat, Mat, MatReuse, PetscReal, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatMatTransposeMult(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMatTransposeMult, $petsc_library), PetscErrorCode, (Mat, Mat, MatReuse, PetscReal, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatAXPY(arg1, arg2, arg3, arg4)
    ccall((:MatAXPY, $petsc_library), PetscErrorCode, (Mat, PetscScalar, Mat, MatStructure), arg1, arg2, arg3, arg4)
end

function MatAYPX(arg1, arg2, arg3, arg4)
    ccall((:MatAYPX, $petsc_library), PetscErrorCode, (Mat, PetscScalar, Mat, MatStructure), arg1, arg2, arg3, arg4)
end

function MatScale(arg1, arg2)
    ccall((:MatScale, $petsc_library), PetscErrorCode, (Mat, PetscScalar), arg1, arg2)
end

function MatShift(arg1, arg2)
    ccall((:MatShift, $petsc_library), PetscErrorCode, (Mat, PetscScalar), arg1, arg2)
end

function MatSetLocalToGlobalMapping(arg1, arg2, arg3)
    ccall((:MatSetLocalToGlobalMapping, $petsc_library), PetscErrorCode, (Mat, ISLocalToGlobalMapping, ISLocalToGlobalMapping), arg1, arg2, arg3)
end

function MatGetLocalToGlobalMapping(arg1, arg2, arg3)
    ccall((:MatGetLocalToGlobalMapping, $petsc_library), PetscErrorCode, (Mat, Ptr{ISLocalToGlobalMapping}, Ptr{ISLocalToGlobalMapping}), arg1, arg2, arg3)
end

function MatZeroRowsLocal(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatZeroRowsLocal, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatZeroRowsLocalIS(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatZeroRowsLocalIS, $petsc_library), PetscErrorCode, (Mat, IS, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function MatZeroRowsColumnsLocal(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatZeroRowsColumnsLocal, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatZeroRowsColumnsLocalIS(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatZeroRowsColumnsLocalIS, $petsc_library), PetscErrorCode, (Mat, IS, PetscScalar, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function MatGetValuesLocal(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatGetValuesLocal, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatSetValuesLocal(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatSetValuesLocal, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatSetValuesBlockedLocal(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatSetValuesBlockedLocal, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatStashSetInitialSize(arg1, arg2, arg3)
    ccall((:MatStashSetInitialSize, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt), arg1, arg2, arg3)
end

function MatStashGetInfo(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatStashGetInfo, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function MatInterpolate(arg1, arg2, arg3)
    ccall((:MatInterpolate, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatInterpolateAdd(arg1, arg2, arg3, arg4)
    ccall((:MatInterpolateAdd, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function MatRestrict(arg1, arg2, arg3)
    ccall((:MatRestrict, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatMatInterpolate(arg1, arg2, arg3)
    ccall((:MatMatInterpolate, $petsc_library), PetscErrorCode, (Mat, Mat, Ptr{Mat}), arg1, arg2, arg3)
end

function MatMatInterpolateAdd(arg1, arg2, arg3, arg4)
    ccall((:MatMatInterpolateAdd, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatMatRestrict(arg1, arg2, arg3)
    ccall((:MatMatRestrict, $petsc_library), PetscErrorCode, (Mat, Mat, Ptr{Mat}), arg1, arg2, arg3)
end

function MatCreateVecs(arg1, arg2, arg3)
    ccall((:MatCreateVecs, $petsc_library), PetscErrorCode, (Mat, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3)
end

function MatGetVecs(mat, x, y)
    ccall((:MatGetVecs, $petsc_library), PetscErrorCode, (Mat, Ptr{Vec}, Ptr{Vec}), mat, x, y)
end

function MatCreateRedundantMatrix(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatCreateRedundantMatrix, $petsc_library), PetscErrorCode, (Mat, PetscInt, MPI_Comm, MatReuse, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatGetMultiProcBlock(arg1, arg2, arg3, arg4)
    ccall((:MatGetMultiProcBlock, $petsc_library), PetscErrorCode, (Mat, MPI_Comm, MatReuse, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatFindZeroDiagonals(arg1, arg2)
    ccall((:MatFindZeroDiagonals, $petsc_library), PetscErrorCode, (Mat, Ptr{IS}), arg1, arg2)
end

function MatFindOffBlockDiagonalEntries(arg1, arg2)
    ccall((:MatFindOffBlockDiagonalEntries, $petsc_library), PetscErrorCode, (Mat, Ptr{IS}), arg1, arg2)
end

function MatCreateMPIMatConcatenateSeqMat(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatCreateMPIMatConcatenateSeqMat, $petsc_library), PetscErrorCode, (MPI_Comm, Mat, PetscInt, MatReuse, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function MatSetValue(mat, i, j, va, mode)
    ccall((:MatSetValue, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, PetscScalar, InsertMode), mat, i, j, va, mode)
end

function MatGetValue(mat, row, col, va)
    ccall((:MatGetValue, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{PetscScalar}), mat, row, col, va)
end

function MatSetValueLocal(mat, i, j, va, mode)
    ccall((:MatSetValueLocal, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, PetscScalar, InsertMode), mat, i, j, va, mode)
end

function MatShellGetContext(arg1, arg2)
    ccall((:MatShellGetContext, $petsc_library), PetscErrorCode, (Mat, Ptr{Cvoid}), arg1, arg2)
end

function MatInodeAdjustForInodes(arg1, arg2, arg3)
    ccall((:MatInodeAdjustForInodes, $petsc_library), PetscErrorCode, (Mat, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3)
end

function MatInodeGetInodeSizes(arg1, arg2, arg3, arg4)
    ccall((:MatInodeGetInodeSizes, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function MatSeqAIJSetColumnIndices(arg1, arg2)
    ccall((:MatSeqAIJSetColumnIndices, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatSeqBAIJSetColumnIndices(arg1, arg2)
    ccall((:MatSeqBAIJSetColumnIndices, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatCreateSeqAIJWithArrays(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateSeqAIJWithArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatCreateSeqBAIJWithArrays(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatCreateSeqBAIJWithArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function MatCreateSeqSBAIJWithArrays(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatCreateSeqSBAIJWithArrays, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function MatCreateSeqAIJFromTriple(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:MatCreateSeqAIJFromTriple, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{Mat}, PetscInt, PetscBool), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function MatSeqBAIJSetPreallocation(arg1, arg2, arg3, arg4)
    ccall((:MatSeqBAIJSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function MatSeqSBAIJSetPreallocation(arg1, arg2, arg3, arg4)
    ccall((:MatSeqSBAIJSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function MatSeqAIJSetPreallocation(arg1, arg2, arg3)
    ccall((:MatSeqAIJSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatSeqAIJSetTotalPreallocation(arg1, arg2)
    ccall((:MatSeqAIJSetTotalPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt), arg1, arg2)
end

function MatMPIBAIJSetPreallocation(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatMPIBAIJSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatMPISBAIJSetPreallocation(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatMPISBAIJSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatMPIAIJSetPreallocation(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMPIAIJSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function MatSeqAIJSetPreallocationCSR(arg1, arg2, arg3, arg4)
    ccall((:MatSeqAIJSetPreallocationCSR, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function MatSeqBAIJSetPreallocationCSR(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatSeqBAIJSetPreallocationCSR, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5)
end

function MatMPIAIJSetPreallocationCSR(arg1, arg2, arg3, arg4)
    ccall((:MatMPIAIJSetPreallocationCSR, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function MatMPIBAIJSetPreallocationCSR(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMPIBAIJSetPreallocationCSR, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5)
end

function MatMPIAdjSetPreallocation(arg1, arg2, arg3, arg4)
    ccall((:MatMPIAdjSetPreallocation, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function MatMPIAdjToSeq(arg1, arg2)
    ccall((:MatMPIAdjToSeq, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatMPIAdjToSeqRankZero(arg1, arg2)
    ccall((:MatMPIAdjToSeqRankZero, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatMPIDenseSetPreallocation(arg1, arg2)
    ccall((:MatMPIDenseSetPreallocation, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}), arg1, arg2)
end

function MatSeqDenseSetPreallocation(arg1, arg2)
    ccall((:MatSeqDenseSetPreallocation, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}), arg1, arg2)
end

function MatMPIAIJGetSeqAIJ(arg1, arg2, arg3, arg4)
    ccall((:MatMPIAIJGetSeqAIJ, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}, Ptr{Mat}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function MatMPIBAIJGetSeqBAIJ(arg1, arg2, arg3, arg4)
    ccall((:MatMPIBAIJGetSeqBAIJ, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}, Ptr{Mat}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function MatMPIAdjCreateNonemptySubcommMat(arg1, arg2)
    ccall((:MatMPIAdjCreateNonemptySubcommMat, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatDenseGetLDA(arg1, arg2)
    ccall((:MatDenseGetLDA, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatDenseSetLDA(arg1, arg2)
    ccall((:MatDenseSetLDA, $petsc_library), PetscErrorCode, (Mat, PetscInt), arg1, arg2)
end

function MatSeqDenseSetLDA(A, lda)
    ccall((:MatSeqDenseSetLDA, $petsc_library), PetscErrorCode, (Mat, PetscInt), A, lda)
end

function MatDenseGetLocalMatrix(arg1, arg2)
    ccall((:MatDenseGetLocalMatrix, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatBlockMatSetPreallocation(arg1, arg2, arg3, arg4)
    ccall((:MatBlockMatSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function MatStoreValues(arg1)
    ccall((:MatStoreValues, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatRetrieveValues(arg1)
    ccall((:MatRetrieveValues, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatFindNonzeroRows(arg1, arg2)
    ccall((:MatFindNonzeroRows, $petsc_library), PetscErrorCode, (Mat, Ptr{IS}), arg1, arg2)
end

function MatFindZeroRows(arg1, arg2)
    ccall((:MatFindZeroRows, $petsc_library), PetscErrorCode, (Mat, Ptr{IS}), arg1, arg2)
end

const MatOrderingType = Ptr{Cchar}

function MatGetOrdering(arg1, arg2, arg3, arg4)
    ccall((:MatGetOrdering, $petsc_library), PetscErrorCode, (Mat, MatOrderingType, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function MatGetOrderingList(arg1)
    ccall((:MatGetOrderingList, $petsc_library), PetscErrorCode, (Ptr{PetscFunctionList},), arg1)
end

function MatOrderingRegister(arg1, arg2)
    ccall((:MatOrderingRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

mutable struct _p_MatCoarsen end

const MatCoarsen = Ptr{_p_MatCoarsen}

const MatCoarsenType = Ptr{Cchar}

struct _PetscCDIntNd
    next::Ptr{_PetscCDIntNd}
    gid::PetscInt
end

const PetscCDIntNd = _PetscCDIntNd

struct _PetscCDArrNd
    next::Ptr{_PetscCDArrNd}
    array::Ptr{_PetscCDIntNd}
end

const PetscCDArrNd = _PetscCDArrNd

mutable struct _PetscCoarsenData
    pool_list::PetscCDArrNd
    new_node::Ptr{PetscCDIntNd}
    new_left::PetscInt
    chk_sz::PetscInt
    extra_nodes::Ptr{PetscCDIntNd}
    array::Ptr{Ptr{PetscCDIntNd}}
    size::PetscInt
    mat::Mat
    _PetscCoarsenData() = new()
end

const PetscCoarsenData = _PetscCoarsenData

function MatCoarsenCreate(arg1, arg2)
    ccall((:MatCoarsenCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{MatCoarsen}), arg1, arg2)
end

function MatCoarsenSetType(arg1, arg2)
    ccall((:MatCoarsenSetType, $petsc_library), PetscErrorCode, (MatCoarsen, MatCoarsenType), arg1, arg2)
end

function MatCoarsenSetAdjacency(arg1, arg2)
    ccall((:MatCoarsenSetAdjacency, $petsc_library), PetscErrorCode, (MatCoarsen, Mat), arg1, arg2)
end

function MatCoarsenSetGreedyOrdering(arg1, arg2)
    ccall((:MatCoarsenSetGreedyOrdering, $petsc_library), PetscErrorCode, (MatCoarsen, IS), arg1, arg2)
end

function MatCoarsenSetStrictAggs(arg1, arg2)
    ccall((:MatCoarsenSetStrictAggs, $petsc_library), PetscErrorCode, (MatCoarsen, PetscBool), arg1, arg2)
end

function MatCoarsenGetData(arg1, arg2)
    ccall((:MatCoarsenGetData, $petsc_library), PetscErrorCode, (MatCoarsen, Ptr{Ptr{PetscCoarsenData}}), arg1, arg2)
end

function MatCoarsenApply(arg1)
    ccall((:MatCoarsenApply, $petsc_library), PetscErrorCode, (MatCoarsen,), arg1)
end

function MatCoarsenDestroy(arg1)
    ccall((:MatCoarsenDestroy, $petsc_library), PetscErrorCode, (Ptr{MatCoarsen},), arg1)
end

function MatCoarsenRegister(arg1, arg2)
    ccall((:MatCoarsenRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function MatCoarsenView(arg1, arg2)
    ccall((:MatCoarsenView, $petsc_library), PetscErrorCode, (MatCoarsen, PetscViewer), arg1, arg2)
end

function MatCoarsenSetFromOptions(arg1)
    ccall((:MatCoarsenSetFromOptions, $petsc_library), PetscErrorCode, (MatCoarsen,), arg1)
end

function MatCoarsenGetType(arg1, arg2)
    ccall((:MatCoarsenGetType, $petsc_library), PetscErrorCode, (MatCoarsen, Ptr{MatCoarsenType}), arg1, arg2)
end

function MatCoarsenViewFromOptions(arg1, arg2, arg3)
    ccall((:MatCoarsenViewFromOptions, $petsc_library), PetscErrorCode, (MatCoarsen, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function MatCoarsenMISKSetDistance(arg1, arg2)
    ccall((:MatCoarsenMISKSetDistance, $petsc_library), PetscErrorCode, (MatCoarsen, PetscInt), arg1, arg2)
end

function MatCoarsenMISKGetDistance(arg1, arg2)
    ccall((:MatCoarsenMISKGetDistance, $petsc_library), PetscErrorCode, (MatCoarsen, Ptr{PetscInt}), arg1, arg2)
end

function MatCoarsenSetMaximumIterations(arg1, arg2)
    ccall((:MatCoarsenSetMaximumIterations, $petsc_library), PetscErrorCode, (MatCoarsen, PetscInt), arg1, arg2)
end

function MatCoarsenSetThreshold(arg1, arg2)
    ccall((:MatCoarsenSetThreshold, $petsc_library), PetscErrorCode, (MatCoarsen, PetscReal), arg1, arg2)
end

function MatCoarsenSetStrengthIndex(arg1, arg2, arg3)
    ccall((:MatCoarsenSetStrengthIndex, $petsc_library), PetscErrorCode, (MatCoarsen, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatReorderForNonzeroDiagonal(arg1, arg2, arg3, arg4)
    ccall((:MatReorderForNonzeroDiagonal, $petsc_library), PetscErrorCode, (Mat, PetscReal, IS, IS), arg1, arg2, arg3, arg4)
end

function MatCreateLaplacian(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLaplacian, $petsc_library), PetscErrorCode, (Mat, PetscReal, PetscBool, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatFactorGetPreferredOrdering(arg1, arg2, arg3)
    ccall((:MatFactorGetPreferredOrdering, $petsc_library), PetscErrorCode, (Mat, MatFactorType, Ptr{MatOrderingType}), arg1, arg2, arg3)
end

@enum MatFactorShiftType::UInt32 begin
    MAT_SHIFT_NONE = 0
    MAT_SHIFT_NONZERO = 1
    MAT_SHIFT_POSITIVE_DEFINITE = 2
    MAT_SHIFT_INBLOCKS = 3
end

@enum MatFactorError::UInt32 begin
    MAT_FACTOR_NOERROR = 0
    MAT_FACTOR_STRUCT_ZEROPIVOT = 1
    MAT_FACTOR_NUMERIC_ZEROPIVOT = 2
    MAT_FACTOR_OUTMEMORY = 3
    MAT_FACTOR_OTHER = 4
end

function MatFactorGetError(arg1, arg2)
    ccall((:MatFactorGetError, $petsc_library), PetscErrorCode, (Mat, Ptr{MatFactorError}), arg1, arg2)
end

function MatFactorClearError(arg1)
    ccall((:MatFactorClearError, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatFactorGetErrorZeroPivot(arg1, arg2, arg3)
    ccall((:MatFactorGetErrorZeroPivot, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatGetInertia(arg1, arg2, arg3, arg4)
    ccall((:MatGetInertia, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function MatSolve(arg1, arg2, arg3)
    ccall((:MatSolve, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatForwardSolve(arg1, arg2, arg3)
    ccall((:MatForwardSolve, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatBackwardSolve(arg1, arg2, arg3)
    ccall((:MatBackwardSolve, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatSolveAdd(arg1, arg2, arg3, arg4)
    ccall((:MatSolveAdd, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function MatSolveTranspose(arg1, arg2, arg3)
    ccall((:MatSolveTranspose, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatSolveTransposeAdd(arg1, arg2, arg3, arg4)
    ccall((:MatSolveTransposeAdd, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function MatSetUnfactored(arg1)
    ccall((:MatSetUnfactored, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

@enum MatFactorSchurStatus::UInt32 begin
    MAT_FACTOR_SCHUR_UNFACTORED = 0
    MAT_FACTOR_SCHUR_FACTORED = 1
    MAT_FACTOR_SCHUR_INVERTED = 2
end

function MatFactorSetSchurIS(arg1, arg2)
    ccall((:MatFactorSetSchurIS, $petsc_library), PetscErrorCode, (Mat, IS), arg1, arg2)
end

function MatFactorGetSchurComplement(arg1, arg2, arg3)
    ccall((:MatFactorGetSchurComplement, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}, Ptr{MatFactorSchurStatus}), arg1, arg2, arg3)
end

function MatFactorRestoreSchurComplement(arg1, arg2, arg3)
    ccall((:MatFactorRestoreSchurComplement, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}, MatFactorSchurStatus), arg1, arg2, arg3)
end

function MatFactorInvertSchurComplement(arg1)
    ccall((:MatFactorInvertSchurComplement, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatFactorCreateSchurComplement(arg1, arg2, arg3)
    ccall((:MatFactorCreateSchurComplement, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}, Ptr{MatFactorSchurStatus}), arg1, arg2, arg3)
end

function MatFactorSolveSchurComplement(arg1, arg2, arg3)
    ccall((:MatFactorSolveSchurComplement, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatFactorSolveSchurComplementTranspose(arg1, arg2, arg3)
    ccall((:MatFactorSolveSchurComplementTranspose, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatFactorFactorizeSchurComplement(arg1)
    ccall((:MatFactorFactorizeSchurComplement, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatSeqDenseInvert(arg1)
    ccall((:MatSeqDenseInvert, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

@enum MatSORType::UInt32 begin
    SOR_FORWARD_SWEEP = 1
    SOR_BACKWARD_SWEEP = 2
    SOR_SYMMETRIC_SWEEP = 3
    SOR_LOCAL_FORWARD_SWEEP = 4
    SOR_LOCAL_BACKWARD_SWEEP = 8
    SOR_LOCAL_SYMMETRIC_SWEEP = 12
    SOR_ZERO_INITIAL_GUESS = 16
    SOR_EISENSTAT = 32
    SOR_APPLY_UPPER = 64
    SOR_APPLY_LOWER = 128
end

function MatSOR(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatSOR, $petsc_library), PetscErrorCode, (Mat, Vec, PetscReal, MatSORType, PetscReal, PetscInt, PetscInt, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

mutable struct _p_MatColoring end

const MatColoring = Ptr{_p_MatColoring}

const MatColoringType = Ptr{Cchar}

@enum MatColoringWeightType::UInt32 begin
    MAT_COLORING_WEIGHT_RANDOM = 0
    MAT_COLORING_WEIGHT_LEXICAL = 1
    MAT_COLORING_WEIGHT_LF = 2
    MAT_COLORING_WEIGHT_SL = 3
end

function MatColoringCreate(arg1, arg2)
    ccall((:MatColoringCreate, $petsc_library), PetscErrorCode, (Mat, Ptr{MatColoring}), arg1, arg2)
end

function MatColoringGetDegrees(arg1, arg2, arg3)
    ccall((:MatColoringGetDegrees, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatColoringDestroy(arg1)
    ccall((:MatColoringDestroy, $petsc_library), PetscErrorCode, (Ptr{MatColoring},), arg1)
end

function MatColoringView(arg1, arg2)
    ccall((:MatColoringView, $petsc_library), PetscErrorCode, (MatColoring, PetscViewer), arg1, arg2)
end

function MatColoringSetType(arg1, arg2)
    ccall((:MatColoringSetType, $petsc_library), PetscErrorCode, (MatColoring, MatColoringType), arg1, arg2)
end

function MatColoringSetFromOptions(arg1)
    ccall((:MatColoringSetFromOptions, $petsc_library), PetscErrorCode, (MatColoring,), arg1)
end

function MatColoringSetDistance(arg1, arg2)
    ccall((:MatColoringSetDistance, $petsc_library), PetscErrorCode, (MatColoring, PetscInt), arg1, arg2)
end

function MatColoringGetDistance(arg1, arg2)
    ccall((:MatColoringGetDistance, $petsc_library), PetscErrorCode, (MatColoring, Ptr{PetscInt}), arg1, arg2)
end

function MatColoringSetMaxColors(arg1, arg2)
    ccall((:MatColoringSetMaxColors, $petsc_library), PetscErrorCode, (MatColoring, PetscInt), arg1, arg2)
end

function MatColoringGetMaxColors(arg1, arg2)
    ccall((:MatColoringGetMaxColors, $petsc_library), PetscErrorCode, (MatColoring, Ptr{PetscInt}), arg1, arg2)
end

function MatColoringApply(arg1, arg2)
    ccall((:MatColoringApply, $petsc_library), PetscErrorCode, (MatColoring, Ptr{ISColoring}), arg1, arg2)
end

function MatColoringRegister(arg1, arg2)
    ccall((:MatColoringRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function MatColoringPatch(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatColoringPatch, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{ISColoringValue}, Ptr{ISColoring}), arg1, arg2, arg3, arg4, arg5)
end

function MatColoringSetWeightType(arg1, arg2)
    ccall((:MatColoringSetWeightType, $petsc_library), PetscErrorCode, (MatColoring, MatColoringWeightType), arg1, arg2)
end

function MatColoringSetWeights(arg1, arg2, arg3)
    ccall((:MatColoringSetWeights, $petsc_library), PetscErrorCode, (MatColoring, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatColoringCreateWeights(arg1, arg2, lperm)
    ccall((:MatColoringCreateWeights, $petsc_library), PetscErrorCode, (MatColoring, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscInt}}), arg1, arg2, lperm)
end

function MatColoringTest(arg1, arg2)
    ccall((:MatColoringTest, $petsc_library), PetscErrorCode, (MatColoring, ISColoring), arg1, arg2)
end

function MatColoringTestValid(matcoloring, iscoloring)
    ccall((:MatColoringTestValid, $petsc_library), PetscErrorCode, (MatColoring, ISColoring), matcoloring, iscoloring)
end

function MatISColoringTest(arg1, arg2)
    ccall((:MatISColoringTest, $petsc_library), PetscErrorCode, (Mat, ISColoring), arg1, arg2)
end

mutable struct _p_MatFDColoring end

const MatFDColoring = Ptr{_p_MatFDColoring}

function MatFDColoringCreate(arg1, arg2, arg3)
    ccall((:MatFDColoringCreate, $petsc_library), PetscErrorCode, (Mat, ISColoring, Ptr{MatFDColoring}), arg1, arg2, arg3)
end

function MatFDColoringDestroy(arg1)
    ccall((:MatFDColoringDestroy, $petsc_library), PetscErrorCode, (Ptr{MatFDColoring},), arg1)
end

function MatFDColoringView(arg1, arg2)
    ccall((:MatFDColoringView, $petsc_library), PetscErrorCode, (MatFDColoring, PetscViewer), arg1, arg2)
end

function MatFDColoringSetFunction(arg1, arg2, arg3)
    ccall((:MatFDColoringSetFunction, $petsc_library), PetscErrorCode, (MatFDColoring, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function MatFDColoringGetFunction(arg1, arg2, arg3)
    ccall((:MatFDColoringGetFunction, $petsc_library), PetscErrorCode, (MatFDColoring, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function MatFDColoringSetParameters(arg1, arg2, arg3)
    ccall((:MatFDColoringSetParameters, $petsc_library), PetscErrorCode, (MatFDColoring, PetscReal, PetscReal), arg1, arg2, arg3)
end

function MatFDColoringSetFromOptions(arg1)
    ccall((:MatFDColoringSetFromOptions, $petsc_library), PetscErrorCode, (MatFDColoring,), arg1)
end

function MatFDColoringApply(arg1, arg2, arg3, arg4)
    ccall((:MatFDColoringApply, $petsc_library), PetscErrorCode, (Mat, MatFDColoring, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function MatFDColoringSetF(arg1, arg2)
    ccall((:MatFDColoringSetF, $petsc_library), PetscErrorCode, (MatFDColoring, Vec), arg1, arg2)
end

function MatFDColoringGetPerturbedColumns(arg1, arg2, arg3)
    ccall((:MatFDColoringGetPerturbedColumns, $petsc_library), PetscErrorCode, (MatFDColoring, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function MatFDColoringSetUp(arg1, arg2, arg3)
    ccall((:MatFDColoringSetUp, $petsc_library), PetscErrorCode, (Mat, ISColoring, MatFDColoring), arg1, arg2, arg3)
end

function MatFDColoringSetBlockSize(arg1, arg2, arg3)
    ccall((:MatFDColoringSetBlockSize, $petsc_library), PetscErrorCode, (MatFDColoring, PetscInt, PetscInt), arg1, arg2, arg3)
end

function MatFDColoringSetValues(arg1, arg2, arg3)
    ccall((:MatFDColoringSetValues, $petsc_library), PetscErrorCode, (Mat, MatFDColoring, Ptr{PetscScalar}), arg1, arg2, arg3)
end

mutable struct _p_MatTransposeColoring end

const MatTransposeColoring = Ptr{_p_MatTransposeColoring}

function MatTransposeColoringCreate(arg1, arg2, arg3)
    ccall((:MatTransposeColoringCreate, $petsc_library), PetscErrorCode, (Mat, ISColoring, Ptr{MatTransposeColoring}), arg1, arg2, arg3)
end

function MatTransColoringApplySpToDen(arg1, arg2, arg3)
    ccall((:MatTransColoringApplySpToDen, $petsc_library), PetscErrorCode, (MatTransposeColoring, Mat, Mat), arg1, arg2, arg3)
end

function MatTransColoringApplyDenToSp(arg1, arg2, arg3)
    ccall((:MatTransColoringApplyDenToSp, $petsc_library), PetscErrorCode, (MatTransposeColoring, Mat, Mat), arg1, arg2, arg3)
end

function MatTransposeColoringDestroy(arg1)
    ccall((:MatTransposeColoringDestroy, $petsc_library), PetscErrorCode, (Ptr{MatTransposeColoring},), arg1)
end

mutable struct _p_MatPartitioning end

const MatPartitioning = Ptr{_p_MatPartitioning}

const MatPartitioningType = Ptr{Cchar}

function MatPartitioningCreate(arg1, arg2)
    ccall((:MatPartitioningCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{MatPartitioning}), arg1, arg2)
end

function MatPartitioningSetType(arg1, arg2)
    ccall((:MatPartitioningSetType, $petsc_library), PetscErrorCode, (MatPartitioning, MatPartitioningType), arg1, arg2)
end

function MatPartitioningSetNParts(arg1, arg2)
    ccall((:MatPartitioningSetNParts, $petsc_library), PetscErrorCode, (MatPartitioning, PetscInt), arg1, arg2)
end

function MatPartitioningSetAdjacency(arg1, arg2)
    ccall((:MatPartitioningSetAdjacency, $petsc_library), PetscErrorCode, (MatPartitioning, Mat), arg1, arg2)
end

function MatPartitioningSetNumberVertexWeights(arg1, arg2)
    ccall((:MatPartitioningSetNumberVertexWeights, $petsc_library), PetscErrorCode, (MatPartitioning, PetscInt), arg1, arg2)
end

function MatPartitioningSetVertexWeights(arg1, arg2)
    ccall((:MatPartitioningSetVertexWeights, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{PetscInt}), arg1, arg2)
end

function MatPartitioningSetPartitionWeights(arg1, arg2)
    ccall((:MatPartitioningSetPartitionWeights, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{PetscReal}), arg1, arg2)
end

function MatPartitioningSetUseEdgeWeights(arg1, arg2)
    ccall((:MatPartitioningSetUseEdgeWeights, $petsc_library), PetscErrorCode, (MatPartitioning, PetscBool), arg1, arg2)
end

function MatPartitioningGetUseEdgeWeights(arg1, arg2)
    ccall((:MatPartitioningGetUseEdgeWeights, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{PetscBool}), arg1, arg2)
end

function MatPartitioningApply(arg1, arg2)
    ccall((:MatPartitioningApply, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{IS}), arg1, arg2)
end

function MatPartitioningImprove(arg1, arg2)
    ccall((:MatPartitioningImprove, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{IS}), arg1, arg2)
end

function MatPartitioningViewImbalance(arg1, arg2)
    ccall((:MatPartitioningViewImbalance, $petsc_library), PetscErrorCode, (MatPartitioning, IS), arg1, arg2)
end

function MatPartitioningApplyND(arg1, arg2)
    ccall((:MatPartitioningApplyND, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{IS}), arg1, arg2)
end

function MatPartitioningDestroy(arg1)
    ccall((:MatPartitioningDestroy, $petsc_library), PetscErrorCode, (Ptr{MatPartitioning},), arg1)
end

function MatPartitioningRegister(arg1, arg2)
    ccall((:MatPartitioningRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function MatPartitioningView(arg1, arg2)
    ccall((:MatPartitioningView, $petsc_library), PetscErrorCode, (MatPartitioning, PetscViewer), arg1, arg2)
end

function MatPartitioningViewFromOptions(arg1, arg2, arg3)
    ccall((:MatPartitioningViewFromOptions, $petsc_library), PetscErrorCode, (MatPartitioning, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function MatPartitioningSetFromOptions(arg1)
    ccall((:MatPartitioningSetFromOptions, $petsc_library), PetscErrorCode, (MatPartitioning,), arg1)
end

function MatPartitioningGetType(arg1, arg2)
    ccall((:MatPartitioningGetType, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{MatPartitioningType}), arg1, arg2)
end

function MatPartitioningParmetisSetRepartition(part)
    ccall((:MatPartitioningParmetisSetRepartition, $petsc_library), PetscErrorCode, (MatPartitioning,), part)
end

function MatPartitioningParmetisSetCoarseSequential(arg1)
    ccall((:MatPartitioningParmetisSetCoarseSequential, $petsc_library), PetscErrorCode, (MatPartitioning,), arg1)
end

function MatPartitioningParmetisGetEdgeCut(arg1, arg2)
    ccall((:MatPartitioningParmetisGetEdgeCut, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{PetscInt}), arg1, arg2)
end

@enum MPChacoGlobalType::UInt32 begin
    MP_CHACO_MULTILEVEL = 1
    MP_CHACO_SPECTRAL = 2
    MP_CHACO_LINEAR = 4
    MP_CHACO_RANDOM = 5
    MP_CHACO_SCATTERED = 6
end

@enum MPChacoLocalType::UInt32 begin
    MP_CHACO_KERNIGHAN = 1
    MP_CHACO_NONE = 2
end

@enum MPChacoEigenType::UInt32 begin
    MP_CHACO_LANCZOS = 0
    MP_CHACO_RQI = 1
end

function MatPartitioningChacoSetGlobal(arg1, arg2)
    ccall((:MatPartitioningChacoSetGlobal, $petsc_library), PetscErrorCode, (MatPartitioning, MPChacoGlobalType), arg1, arg2)
end

function MatPartitioningChacoGetGlobal(arg1, arg2)
    ccall((:MatPartitioningChacoGetGlobal, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{MPChacoGlobalType}), arg1, arg2)
end

function MatPartitioningChacoSetLocal(arg1, arg2)
    ccall((:MatPartitioningChacoSetLocal, $petsc_library), PetscErrorCode, (MatPartitioning, MPChacoLocalType), arg1, arg2)
end

function MatPartitioningChacoGetLocal(arg1, arg2)
    ccall((:MatPartitioningChacoGetLocal, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{MPChacoLocalType}), arg1, arg2)
end

function MatPartitioningChacoSetCoarseLevel(arg1, arg2)
    ccall((:MatPartitioningChacoSetCoarseLevel, $petsc_library), PetscErrorCode, (MatPartitioning, PetscReal), arg1, arg2)
end

function MatPartitioningChacoSetEigenSolver(arg1, arg2)
    ccall((:MatPartitioningChacoSetEigenSolver, $petsc_library), PetscErrorCode, (MatPartitioning, MPChacoEigenType), arg1, arg2)
end

function MatPartitioningChacoGetEigenSolver(arg1, arg2)
    ccall((:MatPartitioningChacoGetEigenSolver, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{MPChacoEigenType}), arg1, arg2)
end

function MatPartitioningChacoSetEigenTol(arg1, arg2)
    ccall((:MatPartitioningChacoSetEigenTol, $petsc_library), PetscErrorCode, (MatPartitioning, PetscReal), arg1, arg2)
end

function MatPartitioningChacoGetEigenTol(arg1, arg2)
    ccall((:MatPartitioningChacoGetEigenTol, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{PetscReal}), arg1, arg2)
end

function MatPartitioningChacoSetEigenNumber(arg1, arg2)
    ccall((:MatPartitioningChacoSetEigenNumber, $petsc_library), PetscErrorCode, (MatPartitioning, PetscInt), arg1, arg2)
end

function MatPartitioningChacoGetEigenNumber(arg1, arg2)
    ccall((:MatPartitioningChacoGetEigenNumber, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{PetscInt}), arg1, arg2)
end

function MatPartitioningPartySetGlobal(arg1, arg2)
    ccall((:MatPartitioningPartySetGlobal, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{Cchar}), arg1, arg2)
end

function MatPartitioningPartySetLocal(arg1, arg2)
    ccall((:MatPartitioningPartySetLocal, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{Cchar}), arg1, arg2)
end

function MatPartitioningPartySetCoarseLevel(arg1, arg2)
    ccall((:MatPartitioningPartySetCoarseLevel, $petsc_library), PetscErrorCode, (MatPartitioning, PetscReal), arg1, arg2)
end

function MatPartitioningPartySetBipart(arg1, arg2)
    ccall((:MatPartitioningPartySetBipart, $petsc_library), PetscErrorCode, (MatPartitioning, PetscBool), arg1, arg2)
end

function MatPartitioningPartySetMatchOptimization(arg1, arg2)
    ccall((:MatPartitioningPartySetMatchOptimization, $petsc_library), PetscErrorCode, (MatPartitioning, PetscBool), arg1, arg2)
end

@enum MPPTScotchStrategyType::UInt32 begin
    MP_PTSCOTCH_DEFAULT = 0
    MP_PTSCOTCH_QUALITY = 1
    MP_PTSCOTCH_SPEED = 2
    MP_PTSCOTCH_BALANCE = 3
    MP_PTSCOTCH_SAFETY = 4
    MP_PTSCOTCH_SCALABILITY = 5
end

function MatPartitioningPTScotchSetImbalance(arg1, arg2)
    ccall((:MatPartitioningPTScotchSetImbalance, $petsc_library), PetscErrorCode, (MatPartitioning, PetscReal), arg1, arg2)
end

function MatPartitioningPTScotchGetImbalance(arg1, arg2)
    ccall((:MatPartitioningPTScotchGetImbalance, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{PetscReal}), arg1, arg2)
end

function MatPartitioningPTScotchSetStrategy(arg1, arg2)
    ccall((:MatPartitioningPTScotchSetStrategy, $petsc_library), PetscErrorCode, (MatPartitioning, MPPTScotchStrategyType), arg1, arg2)
end

function MatPartitioningPTScotchGetStrategy(arg1, arg2)
    ccall((:MatPartitioningPTScotchGetStrategy, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{MPPTScotchStrategyType}), arg1, arg2)
end

function MatPartitioningHierarchicalGetFineparts(arg1, arg2)
    ccall((:MatPartitioningHierarchicalGetFineparts, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{IS}), arg1, arg2)
end

function MatPartitioningHierarchicalGetCoarseparts(arg1, arg2)
    ccall((:MatPartitioningHierarchicalGetCoarseparts, $petsc_library), PetscErrorCode, (MatPartitioning, Ptr{IS}), arg1, arg2)
end

function MatPartitioningHierarchicalSetNcoarseparts(arg1, arg2)
    ccall((:MatPartitioningHierarchicalSetNcoarseparts, $petsc_library), PetscErrorCode, (MatPartitioning, PetscInt), arg1, arg2)
end

function MatPartitioningHierarchicalSetNfineparts(arg1, arg2)
    ccall((:MatPartitioningHierarchicalSetNfineparts, $petsc_library), PetscErrorCode, (MatPartitioning, PetscInt), arg1, arg2)
end

function MatMeshToCellGraph(arg1, arg2, arg3)
    ccall((:MatMeshToCellGraph, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Mat}), arg1, arg2, arg3)
end

@enum MatOperation::UInt32 begin
    MATOP_SET_VALUES = 0
    MATOP_GET_ROW = 1
    MATOP_RESTORE_ROW = 2
    MATOP_MULT = 3
    MATOP_MULT_ADD = 4
    MATOP_MULT_TRANSPOSE = 5
    MATOP_MULT_TRANSPOSE_ADD = 6
    MATOP_SOLVE = 7
    MATOP_SOLVE_ADD = 8
    MATOP_SOLVE_TRANSPOSE = 9
    MATOP_SOLVE_TRANSPOSE_ADD = 10
    MATOP_LUFACTOR = 11
    MATOP_CHOLESKYFACTOR = 12
    MATOP_SOR = 13
    MATOP_TRANSPOSE = 14
    MATOP_GETINFO = 15
    MATOP_EQUAL = 16
    MATOP_GET_DIAGONAL = 17
    MATOP_DIAGONAL_SCALE = 18
    MATOP_NORM = 19
    MATOP_ASSEMBLY_BEGIN = 20
    MATOP_ASSEMBLY_END = 21
    MATOP_SET_OPTION = 22
    MATOP_ZERO_ENTRIES = 23
    MATOP_ZERO_ROWS = 24
    MATOP_LUFACTOR_SYMBOLIC = 25
    MATOP_LUFACTOR_NUMERIC = 26
    MATOP_CHOLESKY_FACTOR_SYMBOLIC = 27
    MATOP_CHOLESKY_FACTOR_NUMERIC = 28
    MATOP_SETUP = 29
    MATOP_ILUFACTOR_SYMBOLIC = 30
    MATOP_ICCFACTOR_SYMBOLIC = 31
    MATOP_GET_DIAGONAL_BLOCK = 32
    MATOP_SET_INF = 33
    MATOP_DUPLICATE = 34
    MATOP_FORWARD_SOLVE = 35
    MATOP_BACKWARD_SOLVE = 36
    MATOP_ILUFACTOR = 37
    MATOP_ICCFACTOR = 38
    MATOP_AXPY = 39
    MATOP_CREATE_SUBMATRICES = 40
    MATOP_INCREASE_OVERLAP = 41
    MATOP_GET_VALUES = 42
    MATOP_COPY = 43
    MATOP_GET_ROW_MAX = 44
    MATOP_SCALE = 45
    MATOP_SHIFT = 46
    MATOP_DIAGONAL_SET = 47
    MATOP_ZERO_ROWS_COLUMNS = 48
    MATOP_SET_RANDOM = 49
    MATOP_GET_ROW_IJ = 50
    MATOP_RESTORE_ROW_IJ = 51
    MATOP_GET_COLUMN_IJ = 52
    MATOP_RESTORE_COLUMN_IJ = 53
    MATOP_FDCOLORING_CREATE = 54
    MATOP_COLORING_PATCH = 55
    MATOP_SET_UNFACTORED = 56
    MATOP_PERMUTE = 57
    MATOP_SET_VALUES_BLOCKED = 58
    MATOP_CREATE_SUBMATRIX = 59
    MATOP_DESTROY = 60
    MATOP_VIEW = 61
    MATOP_CONVERT_FROM = 62
    MATOP_MATMAT_MULT_SYMBOLIC = 64
    MATOP_MATMAT_MULT_NUMERIC = 65
    MATOP_SET_LOCAL_TO_GLOBAL_MAP = 66
    MATOP_SET_VALUES_LOCAL = 67
    MATOP_ZERO_ROWS_LOCAL = 68
    MATOP_GET_ROW_MAX_ABS = 69
    MATOP_GET_ROW_MIN_ABS = 70
    MATOP_CONVERT = 71
    MATOP_HAS_OPERATION = 72
    MATOP_SET_VALUES_ADIFOR = 74
    MATOP_FD_COLORING_APPLY = 75
    MATOP_SET_FROM_OPTIONS = 76
    MATOP_FIND_ZERO_DIAGONALS = 79
    MATOP_MULT_MULTIPLE = 80
    MATOP_SOLVE_MULTIPLE = 81
    MATOP_GET_INERTIA = 82
    MATOP_LOAD = 83
    MATOP_IS_SYMMETRIC = 84
    MATOP_IS_HERMITIAN = 85
    MATOP_IS_STRUCTURALLY_SYMMETRIC = 86
    MATOP_SET_VALUES_BLOCKEDLOCAL = 87
    MATOP_CREATE_VECS = 88
    MATOP_MAT_MULT_SYMBOLIC = 90
    MATOP_MAT_MULT_NUMERIC = 91
    MATOP_PTAP_SYMBOLIC = 93
    MATOP_PTAP_NUMERIC = 94
    MATOP_MAT_TRANSPOSE_MULT_SYMBO = 96
    MATOP_MAT_TRANSPOSE_MULT_NUMER = 97
    MATOP_BIND_TO_CPU = 98
    MATOP_PRODUCTSETFROMOPTIONS = 99
    MATOP_PRODUCTSYMBOLIC = 100
    MATOP_PRODUCTNUMERIC = 101
    MATOP_CONJUGATE = 102
    MATOP_VIEW_NATIVE = 103
    MATOP_SET_VALUES_ROW = 104
    MATOP_REAL_PART = 105
    MATOP_IMAGINARY_PART = 106
    MATOP_GET_ROW_UPPER_TRIANGULAR = 107
    MATOP_RESTORE_ROW_UPPER_TRIANG = 108
    MATOP_MAT_SOLVE = 109
    MATOP_MAT_SOLVE_TRANSPOSE = 110
    MATOP_GET_ROW_MIN = 111
    MATOP_GET_COLUMN_VECTOR = 112
    MATOP_MISSING_DIAGONAL = 113
    MATOP_GET_SEQ_NONZERO_STRUCTUR = 114
    MATOP_CREATE = 115
    MATOP_GET_GHOSTS = 116
    MATOP_GET_LOCAL_SUB_MATRIX = 117
    MATOP_RESTORE_LOCALSUB_MATRIX = 118
    MATOP_MULT_DIAGONAL_BLOCK = 119
    MATOP_HERMITIAN_TRANSPOSE = 120
    MATOP_MULT_HERMITIAN_TRANSPOSE = 121
    MATOP_MULT_HERMITIAN_TRANS_ADD = 122
    MATOP_GET_MULTI_PROC_BLOCK = 123
    MATOP_FIND_NONZERO_ROWS = 124
    MATOP_GET_COLUMN_NORMS = 125
    MATOP_INVERT_BLOCK_DIAGONAL = 126
    MATOP_INVERT_VBLOCK_DIAGONAL = 127
    MATOP_CREATE_SUB_MATRICES_MPI = 128
    MATOP_SET_VALUES_BATCH = 129
    MATOP_TRANSPOSE_MAT_MULT_SYMBO = 131
    MATOP_TRANSPOSE_MAT_MULT_NUMER = 132
    MATOP_TRANSPOSE_COLORING_CREAT = 133
    MATOP_TRANS_COLORING_APPLY_SPT = 134
    MATOP_TRANS_COLORING_APPLY_DEN = 135
    MATOP_RART_SYMBOLIC = 137
    MATOP_RART_NUMERIC = 138
    MATOP_SET_BLOCK_SIZES = 139
    MATOP_AYPX = 140
    MATOP_RESIDUAL = 141
    MATOP_FDCOLORING_SETUP = 142
    MATOP_FIND_OFFBLOCK_ENTRIES = 143
    MATOP_MPICONCATENATESEQ = 144
    MATOP_DESTROYSUBMATRICES = 145
    MATOP_TRANSPOSE_SOLVE = 146
    MATOP_GET_VALUES_LOCAL = 147
end

function MatSetOperation(arg1, arg2, arg3)
    ccall((:MatSetOperation, $petsc_library), PetscErrorCode, (Mat, MatOperation, Ptr{Cvoid}), arg1, arg2, arg3)
end

function MatGetOperation(arg1, arg2, arg3)
    ccall((:MatGetOperation, $petsc_library), PetscErrorCode, (Mat, MatOperation, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function MatHasOperation(arg1, arg2, arg3)
    ccall((:MatHasOperation, $petsc_library), PetscErrorCode, (Mat, MatOperation, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatHasCongruentLayouts(arg1, arg2)
    ccall((:MatHasCongruentLayouts, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

function MatFreeIntermediateDataStructures(A)
    ccall((:MatFreeIntermediateDataStructures, $petsc_library), PetscErrorCode, (Mat,), A)
end

function MatShellSetOperation(arg1, arg2, arg3)
    ccall((:MatShellSetOperation, $petsc_library), PetscErrorCode, (Mat, MatOperation, Ptr{Cvoid}), arg1, arg2, arg3)
end

function MatShellGetOperation(arg1, arg2, arg3)
    ccall((:MatShellGetOperation, $petsc_library), PetscErrorCode, (Mat, MatOperation, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function MatShellSetContext(arg1, arg2)
    ccall((:MatShellSetContext, $petsc_library), PetscErrorCode, (Mat, Ptr{Cvoid}), arg1, arg2)
end

function MatShellSetContextDestroy(arg1, arg2)
    ccall((:MatShellSetContextDestroy, $petsc_library), PetscErrorCode, (Mat, Ptr{Cvoid}), arg1, arg2)
end

function MatShellSetVecType(arg1, arg2)
    ccall((:MatShellSetVecType, $petsc_library), PetscErrorCode, (Mat, VecType), arg1, arg2)
end

function MatShellTestMult(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatShellTestMult, $petsc_library), PetscErrorCode, (Mat, Ptr{Cvoid}, Vec, Ptr{Cvoid}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function MatShellTestMultTranspose(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatShellTestMultTranspose, $petsc_library), PetscErrorCode, (Mat, Ptr{Cvoid}, Vec, Ptr{Cvoid}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function MatShellSetManageScalingShifts(arg1)
    ccall((:MatShellSetManageScalingShifts, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatShellSetMatProductOperation(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatShellSetMatProductOperation, $petsc_library), PetscErrorCode, (Mat, MatProductType, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, MatType, MatType), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatIsShell(arg1, arg2)
    ccall((:MatIsShell, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

function MatMPIBAIJSetHashTableFactor(arg1, arg2)
    ccall((:MatMPIBAIJSetHashTableFactor, $petsc_library), PetscErrorCode, (Mat, PetscReal), arg1, arg2)
end

function MatISSetLocalMatType(arg1, arg2)
    ccall((:MatISSetLocalMatType, $petsc_library), PetscErrorCode, (Mat, MatType), arg1, arg2)
end

function MatISSetPreallocation(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatISSetPreallocation, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function MatISSetAllowRepeated(arg1, arg2)
    ccall((:MatISSetAllowRepeated, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

function MatISGetAllowRepeated(arg1, arg2)
    ccall((:MatISGetAllowRepeated, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

function MatISStoreL2L(arg1, arg2)
    ccall((:MatISStoreL2L, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

function MatISFixLocalEmpty(arg1, arg2)
    ccall((:MatISFixLocalEmpty, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

function MatISGetLocalMat(arg1, arg2)
    ccall((:MatISGetLocalMat, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatISRestoreLocalMat(arg1, arg2)
    ccall((:MatISRestoreLocalMat, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatISSetLocalMat(arg1, arg2)
    ccall((:MatISSetLocalMat, $petsc_library), PetscErrorCode, (Mat, Mat), arg1, arg2)
end

function MatISGetLocalToGlobalMapping(arg1, arg2, arg3)
    ccall((:MatISGetLocalToGlobalMapping, $petsc_library), PetscErrorCode, (Mat, Ptr{ISLocalToGlobalMapping}, Ptr{ISLocalToGlobalMapping}), arg1, arg2, arg3)
end

mutable struct _p_MatNullSpace end

const MatNullSpace = Ptr{_p_MatNullSpace}

function MatNullSpaceCreate(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatNullSpaceCreate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscBool, PetscInt, Ptr{Vec}, Ptr{MatNullSpace}), arg1, arg2, arg3, arg4, arg5)
end

function MatNullSpaceSetFunction(arg1, arg2, arg3)
    ccall((:MatNullSpaceSetFunction, $petsc_library), PetscErrorCode, (MatNullSpace, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function MatNullSpaceDestroy(arg1)
    ccall((:MatNullSpaceDestroy, $petsc_library), PetscErrorCode, (Ptr{MatNullSpace},), arg1)
end

function MatNullSpaceRemove(arg1, arg2)
    ccall((:MatNullSpaceRemove, $petsc_library), PetscErrorCode, (MatNullSpace, Vec), arg1, arg2)
end

function MatGetNullSpace(arg1, arg2)
    ccall((:MatGetNullSpace, $petsc_library), PetscErrorCode, (Mat, Ptr{MatNullSpace}), arg1, arg2)
end

function MatGetTransposeNullSpace(arg1, arg2)
    ccall((:MatGetTransposeNullSpace, $petsc_library), PetscErrorCode, (Mat, Ptr{MatNullSpace}), arg1, arg2)
end

function MatSetTransposeNullSpace(arg1, arg2)
    ccall((:MatSetTransposeNullSpace, $petsc_library), PetscErrorCode, (Mat, MatNullSpace), arg1, arg2)
end

function MatSetNullSpace(arg1, arg2)
    ccall((:MatSetNullSpace, $petsc_library), PetscErrorCode, (Mat, MatNullSpace), arg1, arg2)
end

function MatSetNearNullSpace(arg1, arg2)
    ccall((:MatSetNearNullSpace, $petsc_library), PetscErrorCode, (Mat, MatNullSpace), arg1, arg2)
end

function MatGetNearNullSpace(arg1, arg2)
    ccall((:MatGetNearNullSpace, $petsc_library), PetscErrorCode, (Mat, Ptr{MatNullSpace}), arg1, arg2)
end

function MatGetNullSpaces(arg1, arg2, arg3)
    ccall((:MatGetNullSpaces, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Mat}, Ptr{Ptr{MatNullSpace}}), arg1, arg2, arg3)
end

function MatRestoreNullSpaces(arg1, arg2, arg3)
    ccall((:MatRestoreNullSpaces, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Mat}, Ptr{Ptr{MatNullSpace}}), arg1, arg2, arg3)
end

function MatNullSpaceTest(arg1, arg2, arg3)
    ccall((:MatNullSpaceTest, $petsc_library), PetscErrorCode, (MatNullSpace, Mat, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatNullSpaceView(arg1, arg2)
    ccall((:MatNullSpaceView, $petsc_library), PetscErrorCode, (MatNullSpace, PetscViewer), arg1, arg2)
end

function MatNullSpaceGetVecs(arg1, arg2, arg3, arg4)
    ccall((:MatNullSpaceGetVecs, $petsc_library), PetscErrorCode, (MatNullSpace, Ptr{PetscBool}, Ptr{PetscInt}, Ptr{Ptr{Vec}}), arg1, arg2, arg3, arg4)
end

function MatNullSpaceCreateRigidBody(arg1, arg2)
    ccall((:MatNullSpaceCreateRigidBody, $petsc_library), PetscErrorCode, (Vec, Ptr{MatNullSpace}), arg1, arg2)
end

function MatReorderingSeqSBAIJ(arg1, arg2)
    ccall((:MatReorderingSeqSBAIJ, $petsc_library), PetscErrorCode, (Mat, IS), arg1, arg2)
end

function MatMPISBAIJSetHashTableFactor(arg1, arg2)
    ccall((:MatMPISBAIJSetHashTableFactor, $petsc_library), PetscErrorCode, (Mat, PetscReal), arg1, arg2)
end

function MatSeqSBAIJSetColumnIndices(arg1, arg2)
    ccall((:MatSeqSBAIJSetColumnIndices, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatCreateMAIJ(arg1, arg2, arg3)
    ccall((:MatCreateMAIJ, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Mat}), arg1, arg2, arg3)
end

function MatMAIJRedimension(arg1, arg2, arg3)
    ccall((:MatMAIJRedimension, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Mat}), arg1, arg2, arg3)
end

function MatMAIJGetAIJ(arg1, arg2)
    ccall((:MatMAIJGetAIJ, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatComputeOperator(arg1, arg2, arg3)
    ccall((:MatComputeOperator, $petsc_library), PetscErrorCode, (Mat, MatType, Ptr{Mat}), arg1, arg2, arg3)
end

function MatComputeOperatorTranspose(arg1, arg2, arg3)
    ccall((:MatComputeOperatorTranspose, $petsc_library), PetscErrorCode, (Mat, MatType, Ptr{Mat}), arg1, arg2, arg3)
end

function MatComputeExplicitOperator(A, B)
    ccall((:MatComputeExplicitOperator, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), A, B)
end

function MatComputeExplicitOperatorTranspose(A, B)
    ccall((:MatComputeExplicitOperatorTranspose, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), A, B)
end

function MatCreateKAIJ(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateKAIJ, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatKAIJGetAIJ(arg1, arg2)
    ccall((:MatKAIJGetAIJ, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatKAIJGetS(arg1, arg2, arg3, arg4)
    ccall((:MatKAIJGetS, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function MatKAIJGetSRead(arg1, arg2, arg3, arg4)
    ccall((:MatKAIJGetSRead, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function MatKAIJRestoreS(arg1, arg2)
    ccall((:MatKAIJRestoreS, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatKAIJRestoreSRead(arg1, arg2)
    ccall((:MatKAIJRestoreSRead, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatKAIJGetT(arg1, arg2, arg3, arg4)
    ccall((:MatKAIJGetT, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function MatKAIJGetTRead(arg1, arg2, arg3, arg4)
    ccall((:MatKAIJGetTRead, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function MatKAIJRestoreT(arg1, arg2)
    ccall((:MatKAIJRestoreT, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatKAIJRestoreTRead(arg1, arg2)
    ccall((:MatKAIJRestoreTRead, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscScalar}}), arg1, arg2)
end

function MatKAIJSetAIJ(arg1, arg2)
    ccall((:MatKAIJSetAIJ, $petsc_library), PetscErrorCode, (Mat, Mat), arg1, arg2)
end

function MatKAIJSetS(arg1, arg2, arg3, arg4)
    ccall((:MatKAIJSetS, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function MatKAIJSetT(arg1, arg2, arg3, arg4)
    ccall((:MatKAIJSetT, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function MatKAIJGetScaledIdentity(arg1, arg2)
    ccall((:MatKAIJGetScaledIdentity, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

function MatDiagonalScaleLocal(arg1, arg2)
    ccall((:MatDiagonalScaleLocal, $petsc_library), PetscErrorCode, (Mat, Vec), arg1, arg2)
end

function MatMFFDInitializePackage()
    ccall((:MatMFFDInitializePackage, $petsc_library), PetscErrorCode, ())
end

function MatMFFDFinalizePackage()
    ccall((:MatMFFDFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function MatCreateMFFD(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateMFFD, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatMFFDSetBase(arg1, arg2, arg3)
    ccall((:MatMFFDSetBase, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatMFFDSetFunction(arg1, arg2, arg3)
    ccall((:MatMFFDSetFunction, $petsc_library), PetscErrorCode, (Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function MatMFFDSetFunctioni(arg1, arg2)
    ccall((:MatMFFDSetFunctioni, $petsc_library), PetscErrorCode, (Mat, Ptr{Cvoid}), arg1, arg2)
end

function MatMFFDSetFunctioniBase(arg1, arg2)
    ccall((:MatMFFDSetFunctioniBase, $petsc_library), PetscErrorCode, (Mat, Ptr{Cvoid}), arg1, arg2)
end

function MatMFFDSetHHistory(arg1, arg2, arg3)
    ccall((:MatMFFDSetHHistory, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}, PetscInt), arg1, arg2, arg3)
end

function MatMFFDResetHHistory(arg1)
    ccall((:MatMFFDResetHHistory, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatMFFDSetFunctionError(arg1, arg2)
    ccall((:MatMFFDSetFunctionError, $petsc_library), PetscErrorCode, (Mat, PetscReal), arg1, arg2)
end

function MatMFFDSetPeriod(arg1, arg2)
    ccall((:MatMFFDSetPeriod, $petsc_library), PetscErrorCode, (Mat, PetscInt), arg1, arg2)
end

function MatMFFDGetH(arg1, arg2)
    ccall((:MatMFFDGetH, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscScalar}), arg1, arg2)
end

function MatMFFDSetOptionsPrefix(arg1, arg2)
    ccall((:MatMFFDSetOptionsPrefix, $petsc_library), PetscErrorCode, (Mat, Ptr{Cchar}), arg1, arg2)
end

function MatMFFDCheckPositivity(arg1, arg2, arg3, arg4)
    ccall((:MatMFFDCheckPositivity, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, Vec, Vec, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function MatMFFDSetCheckh(arg1, arg2, arg3)
    ccall((:MatMFFDSetCheckh, $petsc_library), PetscErrorCode, (Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

mutable struct _p_MatMFFD end

const MatMFFD = Ptr{_p_MatMFFD}

const MatMFFDType = Ptr{Cchar}

function MatMFFDSetType(arg1, arg2)
    ccall((:MatMFFDSetType, $petsc_library), PetscErrorCode, (Mat, MatMFFDType), arg1, arg2)
end

function MatMFFDRegister(arg1, arg2)
    ccall((:MatMFFDRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function MatMFFDDSSetUmin(arg1, arg2)
    ccall((:MatMFFDDSSetUmin, $petsc_library), PetscErrorCode, (Mat, PetscReal), arg1, arg2)
end

function MatMFFDWPSetComputeNormU(arg1, arg2)
    ccall((:MatMFFDWPSetComputeNormU, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

function MatFDColoringSetType(arg1, arg2)
    ccall((:MatFDColoringSetType, $petsc_library), PetscErrorCode, (MatFDColoring, MatMFFDType), arg1, arg2)
end

function PetscViewerMathematicaPutMatrix(arg1, arg2, arg3, arg4)
    ccall((:PetscViewerMathematicaPutMatrix, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function PetscViewerMathematicaPutCSRMatrix(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscViewerMathematicaPutCSRMatrix, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatMumpsSetIcntl(arg1, arg2, arg3)
    ccall((:MatMumpsSetIcntl, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt), arg1, arg2, arg3)
end

function MatMumpsGetIcntl(arg1, arg2, arg3)
    ccall((:MatMumpsGetIcntl, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatMumpsSetCntl(arg1, arg2, arg3)
    ccall((:MatMumpsSetCntl, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscReal), arg1, arg2, arg3)
end

function MatMumpsGetCntl(arg1, arg2, arg3)
    ccall((:MatMumpsGetCntl, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function MatMumpsGetInfo(arg1, arg2, arg3)
    ccall((:MatMumpsGetInfo, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatMumpsGetInfog(arg1, arg2, arg3)
    ccall((:MatMumpsGetInfog, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatMumpsGetRinfo(arg1, arg2, arg3)
    ccall((:MatMumpsGetRinfo, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function MatMumpsGetRinfog(arg1, arg2, arg3)
    ccall((:MatMumpsGetRinfog, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function MatMumpsGetNullPivots(arg1, arg2, arg3)
    ccall((:MatMumpsGetNullPivots, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function MatMumpsGetInverse(arg1, arg2)
    ccall((:MatMumpsGetInverse, $petsc_library), PetscErrorCode, (Mat, Mat), arg1, arg2)
end

function MatMumpsGetInverseTranspose(arg1, arg2)
    ccall((:MatMumpsGetInverseTranspose, $petsc_library), PetscErrorCode, (Mat, Mat), arg1, arg2)
end

function MatBindToCPU(arg1, arg2)
    ccall((:MatBindToCPU, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

function MatBoundToCPU(arg1, arg2)
    ccall((:MatBoundToCPU, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

function MatPinToCPU(A, flg)
    ccall((:MatPinToCPU, $petsc_library), PetscErrorCode, (Mat, PetscBool), A, flg)
end

function MatSetBindingPropagates(arg1, arg2)
    ccall((:MatSetBindingPropagates, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

function MatGetBindingPropagates(arg1, arg2)
    ccall((:MatGetBindingPropagates, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

function MatCreateScaLAPACK(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:MatCreateScaLAPACK, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function MatScaLAPACKSetBlockSizes(arg1, arg2, arg3)
    ccall((:MatScaLAPACKSetBlockSizes, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt), arg1, arg2, arg3)
end

function MatScaLAPACKGetBlockSizes(arg1, arg2, arg3)
    ccall((:MatScaLAPACKGetBlockSizes, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatCreateNest(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateNest, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{IS}, PetscInt, Ptr{IS}, Ptr{Mat}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatNestGetSize(arg1, arg2, arg3)
    ccall((:MatNestGetSize, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatNestGetISs(arg1, arg2, arg3)
    ccall((:MatNestGetISs, $petsc_library), PetscErrorCode, (Mat, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3)
end

function MatNestGetLocalISs(arg1, arg2, arg3)
    ccall((:MatNestGetLocalISs, $petsc_library), PetscErrorCode, (Mat, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3)
end

function MatNestGetSubMats(arg1, arg2, arg3, arg4)
    ccall((:MatNestGetSubMats, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Mat}}}), arg1, arg2, arg3, arg4)
end

function MatNestGetSubMat(arg1, arg2, arg3, arg4)
    ccall((:MatNestGetSubMat, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatNestSetVecType(arg1, arg2)
    ccall((:MatNestSetVecType, $petsc_library), PetscErrorCode, (Mat, VecType), arg1, arg2)
end

function MatNestSetSubMats(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatNestSetSubMats, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{IS}, PetscInt, Ptr{IS}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatNestSetSubMat(arg1, arg2, arg3, arg4)
    ccall((:MatNestSetSubMat, $petsc_library), PetscErrorCode, (Mat, PetscInt, PetscInt, Mat), arg1, arg2, arg3, arg4)
end

function MatFilter(arg1, arg2, arg3, arg4)
    ccall((:MatFilter, $petsc_library), PetscErrorCode, (Mat, PetscReal, PetscBool, PetscBool), arg1, arg2, arg3, arg4)
end

function MatChop(A, tol)
    ccall((:MatChop, $petsc_library), PetscErrorCode, (Mat, PetscReal), A, tol)
end

function MatComputeBandwidth(arg1, arg2, arg3)
    ccall((:MatComputeBandwidth, $petsc_library), PetscErrorCode, (Mat, PetscReal, Ptr{PetscInt}), arg1, arg2, arg3)
end

function MatSubdomainsCreateCoalesce(arg1, arg2, arg3, arg4)
    ccall((:MatSubdomainsCreateCoalesce, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{Ptr{IS}}), arg1, arg2, arg3, arg4)
end

function MatPreallocatorPreallocate(arg1, arg2, arg3)
    ccall((:MatPreallocatorPreallocate, $petsc_library), PetscErrorCode, (Mat, PetscBool, Mat), arg1, arg2, arg3)
end

function MatHeaderMerge(arg1, arg2)
    ccall((:MatHeaderMerge, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatHeaderReplace(arg1, arg2)
    ccall((:MatHeaderReplace, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatSeqAIJGetCSRAndMemType(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatSeqAIJGetCSRAndMemType, $petsc_library), PetscErrorCode, (Mat, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscScalar}}, Ptr{PetscMemType}), arg1, arg2, arg3, arg4, arg5)
end

function MatCreateGraph(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateGraph, $petsc_library), PetscErrorCode, (Mat, PetscBool, PetscBool, PetscReal, PetscInt, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatEliminateZeros(arg1, arg2)
    ccall((:MatEliminateZeros, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

function MatCreateDenseFromVecType(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:MatCreateDenseFromVecType, $petsc_library), PetscErrorCode, (MPI_Comm, VecType, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function MatSetHPL(arg1, arg2)
    ccall((:MatSetHPL, $petsc_library), PetscErrorCode, (Mat, Cint), arg1, arg2)
end

@enum DMBoundaryType::UInt32 begin
    DM_BOUNDARY_NONE = 0
    DM_BOUNDARY_GHOSTED = 1
    DM_BOUNDARY_MIRROR = 2
    DM_BOUNDARY_PERIODIC = 3
    DM_BOUNDARY_TWIST = 4
end

@enum DMBoundaryConditionType::UInt32 begin
    DM_BC_ESSENTIAL = 1
    DM_BC_ESSENTIAL_FIELD = 5
    DM_BC_NATURAL = 2
    DM_BC_NATURAL_FIELD = 6
    DM_BC_ESSENTIAL_BD_FIELD = 9
    DM_BC_NATURAL_RIEMANN = 10
end

@enum DMPointLocationType::UInt32 begin
    DM_POINTLOCATION_NONE = 0
    DM_POINTLOCATION_NEAREST = 1
    DM_POINTLOCATION_REMOVE = 2
end

@enum DMBlockingType::UInt32 begin
    DM_BLOCKING_TOPOLOGICAL_POINT = 0
    DM_BLOCKING_FIELD_NODE = 1
end

@enum DMAdaptationStrategy::UInt32 begin
    DM_ADAPTATION_INITIAL = 0
    DM_ADAPTATION_SEQUENTIAL = 1
    DM_ADAPTATION_MULTILEVEL = 2
end

@enum DMAdaptationCriterion::UInt32 begin
    DM_ADAPTATION_NONE = 0
    DM_ADAPTATION_REFINE = 1
    DM_ADAPTATION_LABEL = 2
    DM_ADAPTATION_METRIC = 3
end

@enum DMAdaptFlag::Int32 begin
    DM_ADAPT_DETERMINE = -1
    DM_ADAPT_KEEP = 0
    DM_ADAPT_REFINE = 1
    DM_ADAPT_COARSEN = 2
    DM_ADAPT_COARSEN_LAST = 3
    DM_ADAPT_RESERVED_COUNT = 4
end

@enum DMDirection::UInt32 begin
    DM_X = 0
    DM_Y = 1
    DM_Z = 2
end

@enum DMEnclosureType::UInt32 begin
    DM_ENC_EQUALITY = 0
    DM_ENC_SUPERMESH = 1
    DM_ENC_SUBMESH = 2
    DM_ENC_NONE = 3
    DM_ENC_UNKNOWN = 4
end

@enum DMPolytopeType::UInt32 begin
    DM_POLYTOPE_POINT = 0
    DM_POLYTOPE_SEGMENT = 1
    DM_POLYTOPE_POINT_PRISM_TENSOR = 2
    DM_POLYTOPE_TRIANGLE = 3
    DM_POLYTOPE_QUADRILATERAL = 4
    DM_POLYTOPE_SEG_PRISM_TENSOR = 5
    DM_POLYTOPE_TETRAHEDRON = 6
    DM_POLYTOPE_HEXAHEDRON = 7
    DM_POLYTOPE_TRI_PRISM = 8
    DM_POLYTOPE_TRI_PRISM_TENSOR = 9
    DM_POLYTOPE_QUAD_PRISM_TENSOR = 10
    DM_POLYTOPE_PYRAMID = 11
    DM_POLYTOPE_FV_GHOST = 12
    DM_POLYTOPE_INTERIOR_GHOST = 13
    DM_POLYTOPE_UNKNOWN = 14
    DM_POLYTOPE_UNKNOWN_CELL = 15
    DM_POLYTOPE_UNKNOWN_FACE = 16
    DM_NUM_POLYTOPES = 17
end

@enum PetscUnit::UInt32 begin
    PETSC_UNIT_LENGTH = 0
    PETSC_UNIT_MASS = 1
    PETSC_UNIT_TIME = 2
    PETSC_UNIT_CURRENT = 3
    PETSC_UNIT_TEMPERATURE = 4
    PETSC_UNIT_AMOUNT = 5
    PETSC_UNIT_LUMINOSITY = 6
    NUM_PETSC_UNITS = 7
end

@enum DMReorderDefaultFlag::Int32 begin
    DM_REORDER_DEFAULT_NOTSET = -1
    DM_REORDER_DEFAULT_FALSE = 0
    DM_REORDER_DEFAULT_TRUE = 1
end

mutable struct _p_DMField end

const DMField = Ptr{_p_DMField}

mutable struct _p_UniversalLabel end

const DMUniversalLabel = Ptr{_p_UniversalLabel}

mutable struct _PETSc_DMCEED end

const DMCeed = Ptr{_PETSc_DMCEED}

mutable struct _n_DMGeneratorFunctionList end

const DMGeneratorFunctionList = Ptr{_n_DMGeneratorFunctionList}

mutable struct _p_PetscFE end

const PetscFE = Ptr{_p_PetscFE}

@enum PetscFEJacobianType::UInt32 begin
    PETSCFE_JACOBIAN = 0
    PETSCFE_JACOBIAN_PRE = 1
    PETSCFE_JACOBIAN_DYN = 2
end

const DMLabelType = Ptr{Cchar}

mutable struct _p_DMLabel end

const DMLabel = Ptr{_p_DMLabel}

function DMLabelCreate(arg1, arg2, arg3)
    ccall((:DMLabelCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{DMLabel}), arg1, arg2, arg3)
end

function DMLabelSetType(arg1, arg2)
    ccall((:DMLabelSetType, $petsc_library), PetscErrorCode, (DMLabel, DMLabelType), arg1, arg2)
end

function DMLabelGetType(arg1, arg2)
    ccall((:DMLabelGetType, $petsc_library), PetscErrorCode, (DMLabel, Ptr{DMLabelType}), arg1, arg2)
end

function DMLabelRegister(arg1, arg2)
    ccall((:DMLabelRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function DMLabelRegisterAll()
    ccall((:DMLabelRegisterAll, $petsc_library), PetscErrorCode, ())
end

function DMLabelRegisterDestroy()
    ccall((:DMLabelRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function DMLabelSetUp(arg1)
    ccall((:DMLabelSetUp, $petsc_library), PetscErrorCode, (DMLabel,), arg1)
end

function DMLabelSetFromOptions(arg1)
    ccall((:DMLabelSetFromOptions, $petsc_library), PetscErrorCode, (DMLabel,), arg1)
end

function DMLabelView(arg1, arg2)
    ccall((:DMLabelView, $petsc_library), PetscErrorCode, (DMLabel, PetscViewer), arg1, arg2)
end

function DMLabelDuplicate(arg1, arg2)
    ccall((:DMLabelDuplicate, $petsc_library), PetscErrorCode, (DMLabel, Ptr{DMLabel}), arg1, arg2)
end

function DMLabelReset(arg1)
    ccall((:DMLabelReset, $petsc_library), PetscErrorCode, (DMLabel,), arg1)
end

function DMLabelDestroy(arg1)
    ccall((:DMLabelDestroy, $petsc_library), PetscErrorCode, (Ptr{DMLabel},), arg1)
end

function DMLabelGetDefaultValue(arg1, arg2)
    ccall((:DMLabelGetDefaultValue, $petsc_library), PetscErrorCode, (DMLabel, Ptr{PetscInt}), arg1, arg2)
end

function DMLabelSetDefaultValue(arg1, arg2)
    ccall((:DMLabelSetDefaultValue, $petsc_library), PetscErrorCode, (DMLabel, PetscInt), arg1, arg2)
end

function DMLabelGetValue(arg1, arg2, arg3)
    ccall((:DMLabelGetValue, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMLabelSetValue(arg1, arg2, arg3)
    ccall((:DMLabelSetValue, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, PetscInt), arg1, arg2, arg3)
end

function DMLabelClearValue(arg1, arg2, arg3)
    ccall((:DMLabelClearValue, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, PetscInt), arg1, arg2, arg3)
end

function DMLabelAddStratum(arg1, arg2)
    ccall((:DMLabelAddStratum, $petsc_library), PetscErrorCode, (DMLabel, PetscInt), arg1, arg2)
end

function DMLabelAddStrata(arg1, arg2, arg3)
    ccall((:DMLabelAddStrata, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMLabelAddStrataIS(arg1, arg2)
    ccall((:DMLabelAddStrataIS, $petsc_library), PetscErrorCode, (DMLabel, IS), arg1, arg2)
end

function DMLabelInsertIS(arg1, arg2, arg3)
    ccall((:DMLabelInsertIS, $petsc_library), PetscErrorCode, (DMLabel, IS, PetscInt), arg1, arg2, arg3)
end

function DMLabelGetNumValues(arg1, arg2)
    ccall((:DMLabelGetNumValues, $petsc_library), PetscErrorCode, (DMLabel, Ptr{PetscInt}), arg1, arg2)
end

function DMLabelGetStratumBounds(arg1, arg2, arg3, arg4)
    ccall((:DMLabelGetStratumBounds, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMLabelGetValueIS(arg1, arg2)
    ccall((:DMLabelGetValueIS, $petsc_library), PetscErrorCode, (DMLabel, Ptr{IS}), arg1, arg2)
end

function DMLabelGetNonEmptyStratumValuesIS(arg1, arg2)
    ccall((:DMLabelGetNonEmptyStratumValuesIS, $petsc_library), PetscErrorCode, (DMLabel, Ptr{IS}), arg1, arg2)
end

function DMLabelGetValueIndex(arg1, arg2, arg3)
    ccall((:DMLabelGetValueIndex, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMLabelStratumHasPoint(arg1, arg2, arg3, arg4)
    ccall((:DMLabelStratumHasPoint, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function DMLabelHasStratum(arg1, arg2, arg3)
    ccall((:DMLabelHasStratum, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMLabelGetStratumSize(arg1, arg2, arg3)
    ccall((:DMLabelGetStratumSize, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMLabelGetStratumIS(arg1, arg2, arg3)
    ccall((:DMLabelGetStratumIS, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, Ptr{IS}), arg1, arg2, arg3)
end

function DMLabelSetStratumIS(arg1, arg2, arg3)
    ccall((:DMLabelSetStratumIS, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, IS), arg1, arg2, arg3)
end

function DMLabelSetStratumBounds(arg1, arg2, arg3, arg4)
    ccall((:DMLabelSetStratumBounds, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMLabelClearStratum(arg1, arg2)
    ccall((:DMLabelClearStratum, $petsc_library), PetscErrorCode, (DMLabel, PetscInt), arg1, arg2)
end

function DMLabelGetStratumPointIndex(arg1, arg2, arg3, arg4)
    ccall((:DMLabelGetStratumPointIndex, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMLabelCompare(arg1, arg2, arg3, arg4, message)
    ccall((:DMLabelCompare, $petsc_library), PetscErrorCode, (MPI_Comm, DMLabel, DMLabel, Ptr{PetscBool}, Ptr{Ptr{Cchar}}), arg1, arg2, arg3, arg4, message)
end

function DMLabelComputeIndex(arg1)
    ccall((:DMLabelComputeIndex, $petsc_library), PetscErrorCode, (DMLabel,), arg1)
end

function DMLabelCreateIndex(arg1, arg2, arg3)
    ccall((:DMLabelCreateIndex, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, PetscInt), arg1, arg2, arg3)
end

function DMLabelDestroyIndex(arg1)
    ccall((:DMLabelDestroyIndex, $petsc_library), PetscErrorCode, (DMLabel,), arg1)
end

function DMLabelHasValue(arg1, arg2, arg3)
    ccall((:DMLabelHasValue, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMLabelHasPoint(arg1, arg2, arg3)
    ccall((:DMLabelHasPoint, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMLabelGetBounds(arg1, arg2, arg3)
    ccall((:DMLabelGetBounds, $petsc_library), PetscErrorCode, (DMLabel, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMLabelFilter(arg1, arg2, arg3)
    ccall((:DMLabelFilter, $petsc_library), PetscErrorCode, (DMLabel, PetscInt, PetscInt), arg1, arg2, arg3)
end

function DMLabelPermute(arg1, arg2, arg3)
    ccall((:DMLabelPermute, $petsc_library), PetscErrorCode, (DMLabel, IS, Ptr{DMLabel}), arg1, arg2, arg3)
end

function DMLabelDistribute(arg1, arg2, arg3)
    ccall((:DMLabelDistribute, $petsc_library), PetscErrorCode, (DMLabel, PetscSF, Ptr{DMLabel}), arg1, arg2, arg3)
end

function DMLabelGather(arg1, arg2, arg3)
    ccall((:DMLabelGather, $petsc_library), PetscErrorCode, (DMLabel, PetscSF, Ptr{DMLabel}), arg1, arg2, arg3)
end

function DMLabelConvertToSection(arg1, arg2, arg3)
    ccall((:DMLabelConvertToSection, $petsc_library), PetscErrorCode, (DMLabel, Ptr{PetscSection}, Ptr{IS}), arg1, arg2, arg3)
end

function DMLabelPropagateBegin(arg1, arg2)
    ccall((:DMLabelPropagateBegin, $petsc_library), PetscErrorCode, (DMLabel, PetscSF), arg1, arg2)
end

function DMLabelPropagatePush(arg1, arg2, arg3, arg4)
    ccall((:DMLabelPropagatePush, $petsc_library), PetscErrorCode, (DMLabel, PetscSF, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMLabelPropagateEnd(arg1, arg2)
    ccall((:DMLabelPropagateEnd, $petsc_library), PetscErrorCode, (DMLabel, PetscSF), arg1, arg2)
end

function PetscSectionCreateGlobalSectionLabel(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSectionCreateGlobalSectionLabel, $petsc_library), PetscErrorCode, (PetscSection, PetscSF, PetscBool, DMLabel, PetscInt, Ptr{PetscSection}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscSectionSymCreateLabel(arg1, arg2, arg3)
    ccall((:PetscSectionSymCreateLabel, $petsc_library), PetscErrorCode, (MPI_Comm, DMLabel, Ptr{PetscSectionSym}), arg1, arg2, arg3)
end

function PetscSectionSymLabelSetLabel(arg1, arg2)
    ccall((:PetscSectionSymLabelSetLabel, $petsc_library), PetscErrorCode, (PetscSectionSym, DMLabel), arg1, arg2)
end

function PetscSectionSymLabelGetStratum(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscSectionSymLabelGetStratum, $petsc_library), PetscErrorCode, (PetscSectionSym, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{Ptr{PetscInt}}}, Ptr{Ptr{Ptr{PetscScalar}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscSectionSymLabelSetStratum(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscSectionSymLabelSetStratum, $petsc_library), PetscErrorCode, (PetscSectionSym, PetscInt, PetscInt, PetscInt, PetscInt, PetscCopyMode, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

mutable struct _p_PetscDS end

const PetscDS = Ptr{_p_PetscDS}

mutable struct _p_PetscWeakForm end

const PetscWeakForm = Ptr{_p_PetscWeakForm}

mutable struct _PetscFormKey
    label::DMLabel
    value::PetscInt
    field::PetscInt
    part::PetscInt
    _PetscFormKey() = new()
end

const PetscFormKey = _PetscFormKey

@enum PetscWeakFormKind::UInt32 begin
    PETSC_WF_OBJECTIVE = 0
    PETSC_WF_F0 = 1
    PETSC_WF_F1 = 2
    PETSC_WF_G0 = 3
    PETSC_WF_G1 = 4
    PETSC_WF_G2 = 5
    PETSC_WF_G3 = 6
    PETSC_WF_GP0 = 7
    PETSC_WF_GP1 = 8
    PETSC_WF_GP2 = 9
    PETSC_WF_GP3 = 10
    PETSC_WF_GT0 = 11
    PETSC_WF_GT1 = 12
    PETSC_WF_GT2 = 13
    PETSC_WF_GT3 = 14
    PETSC_WF_BDF0 = 15
    PETSC_WF_BDF1 = 16
    PETSC_WF_BDG0 = 17
    PETSC_WF_BDG1 = 18
    PETSC_WF_BDG2 = 19
    PETSC_WF_BDG3 = 20
    PETSC_WF_BDGP0 = 21
    PETSC_WF_BDGP1 = 22
    PETSC_WF_BDGP2 = 23
    PETSC_WF_BDGP3 = 24
    PETSC_WF_R = 25
    PETSC_WF_CEED = 26
    PETSC_NUM_WF = 27
end

mutable struct _p_PetscQuadrature end

const PetscQuadrature = Ptr{_p_PetscQuadrature}

@enum PetscGaussLobattoLegendreCreateType::UInt32 begin
    PETSCGAUSSLOBATTOLEGENDRE_VIA_LINEAR_ALGEBRA = 0
    PETSCGAUSSLOBATTOLEGENDRE_VIA_NEWTON = 1
end

@enum PetscDTNodeType::Int32 begin
    PETSCDTNODES_DEFAULT = -1
    PETSCDTNODES_GAUSSJACOBI = 0
    PETSCDTNODES_EQUISPACED = 1
    PETSCDTNODES_TANHSINH = 2
end

@enum PetscDTSimplexQuadratureType::Int32 begin
    PETSCDTSIMPLEXQUAD_DEFAULT = -1
    PETSCDTSIMPLEXQUAD_CONIC = 0
    PETSCDTSIMPLEXQUAD_MINSYM = 1
end

function PetscQuadratureCreate(arg1, arg2)
    ccall((:PetscQuadratureCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscQuadrature}), arg1, arg2)
end

function PetscQuadratureDuplicate(arg1, arg2)
    ccall((:PetscQuadratureDuplicate, $petsc_library), PetscErrorCode, (PetscQuadrature, Ptr{PetscQuadrature}), arg1, arg2)
end

function PetscQuadratureGetCellType(arg1, arg2)
    ccall((:PetscQuadratureGetCellType, $petsc_library), PetscErrorCode, (PetscQuadrature, Ptr{DMPolytopeType}), arg1, arg2)
end

function PetscQuadratureSetCellType(arg1, arg2)
    ccall((:PetscQuadratureSetCellType, $petsc_library), PetscErrorCode, (PetscQuadrature, DMPolytopeType), arg1, arg2)
end

function PetscQuadratureGetOrder(arg1, arg2)
    ccall((:PetscQuadratureGetOrder, $petsc_library), PetscErrorCode, (PetscQuadrature, Ptr{PetscInt}), arg1, arg2)
end

function PetscQuadratureSetOrder(arg1, arg2)
    ccall((:PetscQuadratureSetOrder, $petsc_library), PetscErrorCode, (PetscQuadrature, PetscInt), arg1, arg2)
end

function PetscQuadratureGetNumComponents(arg1, arg2)
    ccall((:PetscQuadratureGetNumComponents, $petsc_library), PetscErrorCode, (PetscQuadrature, Ptr{PetscInt}), arg1, arg2)
end

function PetscQuadratureSetNumComponents(arg1, arg2)
    ccall((:PetscQuadratureSetNumComponents, $petsc_library), PetscErrorCode, (PetscQuadrature, PetscInt), arg1, arg2)
end

function PetscQuadratureEqual(arg1, arg2, arg3)
    ccall((:PetscQuadratureEqual, $petsc_library), PetscErrorCode, (PetscQuadrature, PetscQuadrature, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscQuadratureGetData(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscQuadratureGetData, $petsc_library), PetscErrorCode, (PetscQuadrature, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscQuadratureSetData(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscQuadratureSetData, $petsc_library), PetscErrorCode, (PetscQuadrature, PetscInt, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscQuadratureView(arg1, arg2)
    ccall((:PetscQuadratureView, $petsc_library), PetscErrorCode, (PetscQuadrature, PetscViewer), arg1, arg2)
end

function PetscQuadratureDestroy(arg1)
    ccall((:PetscQuadratureDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscQuadrature},), arg1)
end

function PetscDTTensorQuadratureCreate(arg1, arg2, arg3)
    ccall((:PetscDTTensorQuadratureCreate, $petsc_library), PetscErrorCode, (PetscQuadrature, PetscQuadrature, Ptr{PetscQuadrature}), arg1, arg2, arg3)
end

function PetscQuadratureExpandComposite(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscQuadratureExpandComposite, $petsc_library), PetscErrorCode, (PetscQuadrature, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscQuadrature}), arg1, arg2, arg3, arg4, arg5)
end

function PetscQuadratureComputePermutations(arg1, arg2, arg3)
    ccall((:PetscQuadratureComputePermutations, $petsc_library), PetscErrorCode, (PetscQuadrature, Ptr{PetscInt}, Ptr{Ptr{IS}}), arg1, arg2, arg3)
end

function PetscQuadraturePushForward(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscQuadraturePushForward, $petsc_library), PetscErrorCode, (PetscQuadrature, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, PetscInt, Ptr{PetscQuadrature}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDTLegendreEval(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDTLegendreEval, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, PetscInt, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDTJacobiNorm(arg1, arg2, arg3, arg4)
    ccall((:PetscDTJacobiNorm, $petsc_library), PetscErrorCode, (PetscReal, PetscReal, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function PetscDTJacobiEval(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscDTJacobiEval, $petsc_library), PetscErrorCode, (PetscInt, PetscReal, PetscReal, Ptr{PetscReal}, PetscInt, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscDTJacobiEvalJet(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDTJacobiEvalJet, $petsc_library), PetscErrorCode, (PetscReal, PetscReal, PetscInt, Ptr{PetscReal}, PetscInt, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDTPKDEvalJet(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDTPKDEvalJet, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscReal}, PetscInt, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDTPTrimmedSize(arg1, arg2, arg3, arg4)
    ccall((:PetscDTPTrimmedSize, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscDTPTrimmedEvalJet(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDTPTrimmedEvalJet, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscReal}, PetscInt, PetscInt, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDTGaussQuadrature(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDTGaussQuadrature, $petsc_library), PetscErrorCode, (PetscInt, PetscReal, PetscReal, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDTGaussJacobiQuadrature(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDTGaussJacobiQuadrature, $petsc_library), PetscErrorCode, (PetscInt, PetscReal, PetscReal, PetscReal, PetscReal, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDTGaussLobattoJacobiQuadrature(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDTGaussLobattoJacobiQuadrature, $petsc_library), PetscErrorCode, (PetscInt, PetscReal, PetscReal, PetscReal, PetscReal, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDTGaussLobattoLegendreQuadrature(arg1, arg2, arg3, arg4)
    ccall((:PetscDTGaussLobattoLegendreQuadrature, $petsc_library), PetscErrorCode, (PetscInt, PetscGaussLobattoLegendreCreateType, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function PetscDTReconstructPoly(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDTReconstructPoly, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscReal}, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDTGaussTensorQuadrature(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDTGaussTensorQuadrature, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, PetscReal, PetscReal, Ptr{PetscQuadrature}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDTStroudConicalQuadrature(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDTStroudConicalQuadrature, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, PetscReal, PetscReal, Ptr{PetscQuadrature}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDTSimplexQuadrature(arg1, arg2, arg3, arg4)
    ccall((:PetscDTSimplexQuadrature, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscDTSimplexQuadratureType, Ptr{PetscQuadrature}), arg1, arg2, arg3, arg4)
end

function PetscDTCreateDefaultQuadrature(arg1, arg2, arg3, arg4)
    ccall((:PetscDTCreateDefaultQuadrature, $petsc_library), PetscErrorCode, (DMPolytopeType, PetscInt, Ptr{PetscQuadrature}, Ptr{PetscQuadrature}), arg1, arg2, arg3, arg4)
end

function PetscDTTanhSinhTensorQuadrature(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDTTanhSinhTensorQuadrature, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscReal, PetscReal, Ptr{PetscQuadrature}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDTTanhSinhIntegrate(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDTTanhSinhIntegrate, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, PetscReal, PetscReal, PetscInt, Ptr{Cvoid}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDTTanhSinhIntegrateMPFR(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDTTanhSinhIntegrateMPFR, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, PetscReal, PetscReal, PetscInt, Ptr{Cvoid}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscGaussLobattoLegendreIntegrate(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscGaussLobattoLegendreIntegrate, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscGaussLobattoLegendreElementLaplacianCreate(arg1, arg2, arg3, arg4)
    ccall((:PetscGaussLobattoLegendreElementLaplacianCreate, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{Ptr{Ptr{PetscReal}}}), arg1, arg2, arg3, arg4)
end

function PetscGaussLobattoLegendreElementLaplacianDestroy(arg1, arg2, arg3, arg4)
    ccall((:PetscGaussLobattoLegendreElementLaplacianDestroy, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{Ptr{Ptr{PetscReal}}}), arg1, arg2, arg3, arg4)
end

function PetscGaussLobattoLegendreElementGradientCreate(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscGaussLobattoLegendreElementGradientCreate, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{Ptr{Ptr{PetscReal}}}, Ptr{Ptr{Ptr{PetscReal}}}), arg1, arg2, arg3, arg4, arg5)
end

function PetscGaussLobattoLegendreElementGradientDestroy(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscGaussLobattoLegendreElementGradientDestroy, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{Ptr{Ptr{PetscReal}}}, Ptr{Ptr{Ptr{PetscReal}}}), arg1, arg2, arg3, arg4, arg5)
end

function PetscGaussLobattoLegendreElementAdvectionCreate(arg1, arg2, arg3, arg4)
    ccall((:PetscGaussLobattoLegendreElementAdvectionCreate, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{Ptr{Ptr{PetscReal}}}), arg1, arg2, arg3, arg4)
end

function PetscGaussLobattoLegendreElementAdvectionDestroy(arg1, arg2, arg3, arg4)
    ccall((:PetscGaussLobattoLegendreElementAdvectionDestroy, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{Ptr{Ptr{PetscReal}}}), arg1, arg2, arg3, arg4)
end

function PetscGaussLobattoLegendreElementMassCreate(arg1, arg2, arg3, arg4)
    ccall((:PetscGaussLobattoLegendreElementMassCreate, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{Ptr{Ptr{PetscReal}}}), arg1, arg2, arg3, arg4)
end

function PetscGaussLobattoLegendreElementMassDestroy(arg1, arg2, arg3, arg4)
    ccall((:PetscGaussLobattoLegendreElementMassDestroy, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{Ptr{Ptr{PetscReal}}}), arg1, arg2, arg3, arg4)
end

function PetscDTAltVApply(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDTAltVApply, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDTAltVWedge(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDTAltVWedge, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDTAltVWedgeMatrix(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDTAltVWedgeMatrix, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDTAltVPullback(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDTAltVPullback, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscReal}, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDTAltVPullbackMatrix(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDTAltVPullbackMatrix, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscReal}, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDTAltVInterior(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDTAltVInterior, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDTAltVInteriorMatrix(arg1, arg2, arg3, arg4)
    ccall((:PetscDTAltVInteriorMatrix, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function PetscDTAltVInteriorPattern(arg1, arg2, arg3)
    ccall((:PetscDTAltVInteriorPattern, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{NTuple{3, PetscInt}}), arg1, arg2, arg3)
end

function PetscDTAltVStar(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDTAltVStar, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDTBaryToIndex(arg1, arg2, arg3, arg4)
    ccall((:PetscDTBaryToIndex, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscDTIndexToBary(arg1, arg2, arg3, arg4)
    ccall((:PetscDTIndexToBary, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscDTGradedOrderToIndex(arg1, arg2, arg3)
    ccall((:PetscDTGradedOrderToIndex, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscDTIndexToGradedOrder(arg1, arg2, arg3)
    ccall((:PetscDTIndexToGradedOrder, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscDTFactorial(n, factorial)
    ccall((:PetscDTFactorial, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscReal}), n, factorial)
end

function PetscDTFactorialInt(n, factorial)
    ccall((:PetscDTFactorialInt, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}), n, factorial)
end

function PetscDTBinomial(n, k, binomial)
    ccall((:PetscDTBinomial, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscReal}), n, k, binomial)
end

function PetscDTBinomialInt(n, k, binomial)
    ccall((:PetscDTBinomialInt, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscInt}), n, k, binomial)
end

function PetscDTEnumPerm(n, k, perm, isOdd)
    ccall((:PetscDTEnumPerm, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscBool}), n, k, perm, isOdd)
end

function PetscDTPermIndex(n, perm, k, isOdd)
    ccall((:PetscDTPermIndex, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscBool}), n, perm, k, isOdd)
end

function PetscDTEnumSubset(n, k, j, subset)
    ccall((:PetscDTEnumSubset, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, Ptr{PetscInt}), n, k, j, subset)
end

function PetscDTSubsetIndex(n, k, subset, index)
    ccall((:PetscDTSubsetIndex, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), n, k, subset, index)
end

function PetscDTEnumSplit(n, k, j, perm, isOdd)
    ccall((:PetscDTEnumSplit, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscBool}), n, k, j, perm, isOdd)
end

# typedef PetscErrorCode ( * PetscProbFunc ) ( const PetscReal [ ] , const PetscReal [ ] , PetscReal [ ] )
const PetscProbFunc = Ptr{Cvoid}

@enum DTProbDensityType::UInt32 begin
    DTPROB_DENSITY_CONSTANT = 0
    DTPROB_DENSITY_GAUSSIAN = 1
    DTPROB_DENSITY_MAXWELL_BOLTZMANN = 2
    DTPROB_NUM_DENSITY = 3
end

function PetscPDFMaxwellBoltzmann1D(arg1, arg2, arg3)
    ccall((:PetscPDFMaxwellBoltzmann1D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscCDFMaxwellBoltzmann1D(arg1, arg2, arg3)
    ccall((:PetscCDFMaxwellBoltzmann1D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFMaxwellBoltzmann2D(arg1, arg2, arg3)
    ccall((:PetscPDFMaxwellBoltzmann2D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscCDFMaxwellBoltzmann2D(arg1, arg2, arg3)
    ccall((:PetscCDFMaxwellBoltzmann2D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFMaxwellBoltzmann3D(arg1, arg2, arg3)
    ccall((:PetscPDFMaxwellBoltzmann3D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscCDFMaxwellBoltzmann3D(arg1, arg2, arg3)
    ccall((:PetscCDFMaxwellBoltzmann3D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFGaussian1D(arg1, arg2, arg3)
    ccall((:PetscPDFGaussian1D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscCDFGaussian1D(arg1, arg2, arg3)
    ccall((:PetscCDFGaussian1D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFSampleGaussian1D(arg1, arg2, arg3)
    ccall((:PetscPDFSampleGaussian1D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFGaussian2D(arg1, arg2, arg3)
    ccall((:PetscPDFGaussian2D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFSampleGaussian2D(arg1, arg2, arg3)
    ccall((:PetscPDFSampleGaussian2D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFGaussian3D(arg1, arg2, arg3)
    ccall((:PetscPDFGaussian3D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFSampleGaussian3D(arg1, arg2, arg3)
    ccall((:PetscPDFSampleGaussian3D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFConstant1D(arg1, arg2, arg3)
    ccall((:PetscPDFConstant1D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscCDFConstant1D(arg1, arg2, arg3)
    ccall((:PetscCDFConstant1D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFSampleConstant1D(arg1, arg2, arg3)
    ccall((:PetscPDFSampleConstant1D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFConstant2D(arg1, arg2, arg3)
    ccall((:PetscPDFConstant2D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscCDFConstant2D(arg1, arg2, arg3)
    ccall((:PetscCDFConstant2D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFSampleConstant2D(arg1, arg2, arg3)
    ccall((:PetscPDFSampleConstant2D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFConstant3D(arg1, arg2, arg3)
    ccall((:PetscPDFConstant3D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscCDFConstant3D(arg1, arg2, arg3)
    ccall((:PetscCDFConstant3D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscPDFSampleConstant3D(arg1, arg2, arg3)
    ccall((:PetscPDFSampleConstant3D, $petsc_library), PetscErrorCode, (Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscProbCreateFromOptions(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscProbCreateFromOptions, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Cchar}, Ptr{Cchar}, Ptr{PetscProbFunc}, Ptr{PetscProbFunc}, Ptr{PetscProbFunc}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscProbComputeKSStatistic(arg1, arg2, arg3)
    ccall((:PetscProbComputeKSStatistic, $petsc_library), PetscErrorCode, (Vec, PetscProbFunc, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMInitializePackage()
    ccall((:DMInitializePackage, $petsc_library), PetscErrorCode, ())
end

function DMCreate(arg1, arg2)
    ccall((:DMCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{DM}), arg1, arg2)
end

function DMClone(arg1, arg2)
    ccall((:DMClone, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMSetType(arg1, arg2)
    ccall((:DMSetType, $petsc_library), PetscErrorCode, (DM, DMType), arg1, arg2)
end

function DMGetType(arg1, arg2)
    ccall((:DMGetType, $petsc_library), PetscErrorCode, (DM, Ptr{DMType}), arg1, arg2)
end

function DMRegister(arg1, arg2)
    ccall((:DMRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function DMRegisterDestroy()
    ccall((:DMRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function DMView(arg1, arg2)
    ccall((:DMView, $petsc_library), PetscErrorCode, (DM, PetscViewer), arg1, arg2)
end

function DMLoad(arg1, arg2)
    ccall((:DMLoad, $petsc_library), PetscErrorCode, (DM, PetscViewer), arg1, arg2)
end

function DMDestroy(arg1)
    ccall((:DMDestroy, $petsc_library), PetscErrorCode, (Ptr{DM},), arg1)
end

function DMCreateGlobalVector(arg1, arg2)
    ccall((:DMCreateGlobalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMCreateLocalVector(arg1, arg2)
    ccall((:DMCreateLocalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMGetLocalVector(arg1, arg2)
    ccall((:DMGetLocalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMRestoreLocalVector(arg1, arg2)
    ccall((:DMRestoreLocalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMGetGlobalVector(arg1, arg2)
    ccall((:DMGetGlobalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMRestoreGlobalVector(arg1, arg2)
    ccall((:DMRestoreGlobalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMClearGlobalVectors(arg1)
    ccall((:DMClearGlobalVectors, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMClearLocalVectors(arg1)
    ccall((:DMClearLocalVectors, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMClearNamedGlobalVectors(arg1)
    ccall((:DMClearNamedGlobalVectors, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMClearNamedLocalVectors(arg1)
    ccall((:DMClearNamedLocalVectors, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMHasNamedGlobalVector(arg1, arg2, arg3)
    ccall((:DMHasNamedGlobalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMGetNamedGlobalVector(arg1, arg2, arg3)
    ccall((:DMGetNamedGlobalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{Vec}), arg1, arg2, arg3)
end

function DMRestoreNamedGlobalVector(arg1, arg2, arg3)
    ccall((:DMRestoreNamedGlobalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{Vec}), arg1, arg2, arg3)
end

function DMHasNamedLocalVector(arg1, arg2, arg3)
    ccall((:DMHasNamedLocalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMGetNamedLocalVector(arg1, arg2, arg3)
    ccall((:DMGetNamedLocalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{Vec}), arg1, arg2, arg3)
end

function DMRestoreNamedLocalVector(arg1, arg2, arg3)
    ccall((:DMRestoreNamedLocalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{Vec}), arg1, arg2, arg3)
end

function DMGetLocalToGlobalMapping(arg1, arg2)
    ccall((:DMGetLocalToGlobalMapping, $petsc_library), PetscErrorCode, (DM, Ptr{ISLocalToGlobalMapping}), arg1, arg2)
end

function DMCreateFieldIS(arg1, arg2, arg3, arg4)
    ccall((:DMCreateFieldIS, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cchar}}}, Ptr{Ptr{IS}}), arg1, arg2, arg3, arg4)
end

function DMGetBlockSize(arg1, arg2)
    ccall((:DMGetBlockSize, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMCreateColoring(arg1, arg2, arg3)
    ccall((:DMCreateColoring, $petsc_library), PetscErrorCode, (DM, ISColoringType, Ptr{ISColoring}), arg1, arg2, arg3)
end

function DMCreateMatrix(arg1, arg2)
    ccall((:DMCreateMatrix, $petsc_library), PetscErrorCode, (DM, Ptr{Mat}), arg1, arg2)
end

function DMSetMatrixPreallocateSkip(arg1, arg2)
    ccall((:DMSetMatrixPreallocateSkip, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMSetMatrixPreallocateOnly(arg1, arg2)
    ccall((:DMSetMatrixPreallocateOnly, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMSetMatrixStructureOnly(arg1, arg2)
    ccall((:DMSetMatrixStructureOnly, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMSetBlockingType(arg1, arg2)
    ccall((:DMSetBlockingType, $petsc_library), PetscErrorCode, (DM, DMBlockingType), arg1, arg2)
end

function DMGetBlockingType(arg1, arg2)
    ccall((:DMGetBlockingType, $petsc_library), PetscErrorCode, (DM, Ptr{DMBlockingType}), arg1, arg2)
end

function DMCreateInterpolation(arg1, arg2, arg3, arg4)
    ccall((:DMCreateInterpolation, $petsc_library), PetscErrorCode, (DM, DM, Ptr{Mat}, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function DMCreateRestriction(arg1, arg2, arg3)
    ccall((:DMCreateRestriction, $petsc_library), PetscErrorCode, (DM, DM, Ptr{Mat}), arg1, arg2, arg3)
end

function DMCreateInjection(arg1, arg2, arg3)
    ccall((:DMCreateInjection, $petsc_library), PetscErrorCode, (DM, DM, Ptr{Mat}), arg1, arg2, arg3)
end

function DMCreateMassMatrix(arg1, arg2, arg3)
    ccall((:DMCreateMassMatrix, $petsc_library), PetscErrorCode, (DM, DM, Ptr{Mat}), arg1, arg2, arg3)
end

function DMCreateMassMatrixLumped(arg1, arg2)
    ccall((:DMCreateMassMatrixLumped, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMGetWorkArray(arg1, arg2, arg3, arg4)
    ccall((:DMGetWorkArray, $petsc_library), PetscErrorCode, (DM, PetscInt, MPI_Datatype, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMRestoreWorkArray(arg1, arg2, arg3, arg4)
    ccall((:DMRestoreWorkArray, $petsc_library), PetscErrorCode, (DM, PetscInt, MPI_Datatype, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMRefine(arg1, arg2, arg3)
    ccall((:DMRefine, $petsc_library), PetscErrorCode, (DM, MPI_Comm, Ptr{DM}), arg1, arg2, arg3)
end

function DMCoarsen(arg1, arg2, arg3)
    ccall((:DMCoarsen, $petsc_library), PetscErrorCode, (DM, MPI_Comm, Ptr{DM}), arg1, arg2, arg3)
end

function DMGetCoarseDM(arg1, arg2)
    ccall((:DMGetCoarseDM, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMSetCoarseDM(arg1, arg2)
    ccall((:DMSetCoarseDM, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMGetFineDM(arg1, arg2)
    ccall((:DMGetFineDM, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMSetFineDM(arg1, arg2)
    ccall((:DMSetFineDM, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMRefineHierarchy(arg1, arg2, arg3)
    ccall((:DMRefineHierarchy, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DM}), arg1, arg2, arg3)
end

function DMCoarsenHierarchy(arg1, arg2, arg3)
    ccall((:DMCoarsenHierarchy, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DM}), arg1, arg2, arg3)
end

function DMCoarsenHookAdd(arg1, arg2, arg3, arg4)
    ccall((:DMCoarsenHookAdd, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMCoarsenHookRemove(arg1, arg2, arg3, arg4)
    ccall((:DMCoarsenHookRemove, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMRefineHookAdd(arg1, arg2, arg3, arg4)
    ccall((:DMRefineHookAdd, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMRefineHookRemove(arg1, arg2, arg3, arg4)
    ccall((:DMRefineHookRemove, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMRestrict(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMRestrict, $petsc_library), PetscErrorCode, (DM, Mat, Vec, Mat, DM), arg1, arg2, arg3, arg4, arg5)
end

function DMInterpolate(arg1, arg2, arg3)
    ccall((:DMInterpolate, $petsc_library), PetscErrorCode, (DM, Mat, DM), arg1, arg2, arg3)
end

function DMInterpolateSolution(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMInterpolateSolution, $petsc_library), PetscErrorCode, (DM, DM, Mat, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function DMExtrude(arg1, arg2, arg3)
    ccall((:DMExtrude, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DM}), arg1, arg2, arg3)
end

function DMSetFromOptions(arg1)
    ccall((:DMSetFromOptions, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMViewFromOptions(arg1, arg2, arg3)
    ccall((:DMViewFromOptions, $petsc_library), PetscErrorCode, (DM, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function DMGenerate(arg1, arg2, arg3, arg4)
    ccall((:DMGenerate, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMGenerateRegister(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMGenerateRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, PetscInt), arg1, arg2, arg3, arg4, arg5)
end

function DMGenerateRegisterAll()
    ccall((:DMGenerateRegisterAll, $petsc_library), PetscErrorCode, ())
end

function DMGenerateRegisterDestroy()
    ccall((:DMGenerateRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function DMAdaptLabel(arg1, arg2, arg3)
    ccall((:DMAdaptLabel, $petsc_library), PetscErrorCode, (DM, DMLabel, Ptr{DM}), arg1, arg2, arg3)
end

function DMAdaptMetric(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMAdaptMetric, $petsc_library), PetscErrorCode, (DM, Vec, DMLabel, DMLabel, Ptr{DM}), arg1, arg2, arg3, arg4, arg5)
end

function DMSetUp(arg1)
    ccall((:DMSetUp, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMCreateInterpolationScale(arg1, arg2, arg3, arg4)
    ccall((:DMCreateInterpolationScale, $petsc_library), PetscErrorCode, (DM, DM, Mat, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function DMCreateAggregates(arg1, arg2, arg3)
    ccall((:DMCreateAggregates, $petsc_library), PetscErrorCode, (DM, DM, Ptr{Mat}), arg1, arg2, arg3)
end

function DMGlobalToLocalHookAdd(arg1, arg2, arg3, arg4)
    ccall((:DMGlobalToLocalHookAdd, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMLocalToGlobalHookAdd(arg1, arg2, arg3, arg4)
    ccall((:DMLocalToGlobalHookAdd, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMGlobalToLocal(arg1, arg2, arg3, arg4)
    ccall((:DMGlobalToLocal, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMGlobalToLocalBegin(arg1, arg2, arg3, arg4)
    ccall((:DMGlobalToLocalBegin, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMGlobalToLocalEnd(arg1, arg2, arg3, arg4)
    ccall((:DMGlobalToLocalEnd, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMLocalToGlobal(arg1, arg2, arg3, arg4)
    ccall((:DMLocalToGlobal, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMLocalToGlobalBegin(arg1, arg2, arg3, arg4)
    ccall((:DMLocalToGlobalBegin, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMLocalToGlobalEnd(arg1, arg2, arg3, arg4)
    ccall((:DMLocalToGlobalEnd, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMLocalToLocalBegin(arg1, arg2, arg3, arg4)
    ccall((:DMLocalToLocalBegin, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMLocalToLocalEnd(arg1, arg2, arg3, arg4)
    ccall((:DMLocalToLocalEnd, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMConvert(arg1, arg2, arg3)
    ccall((:DMConvert, $petsc_library), PetscErrorCode, (DM, DMType, Ptr{DM}), arg1, arg2, arg3)
end

function DMGetDimension(arg1, arg2)
    ccall((:DMGetDimension, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMSetDimension(arg1, arg2)
    ccall((:DMSetDimension, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMGetDimPoints(arg1, arg2, arg3, arg4)
    ccall((:DMGetDimPoints, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMGetUseNatural(arg1, arg2)
    ccall((:DMGetUseNatural, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMSetUseNatural(arg1, arg2)
    ccall((:DMSetUseNatural, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMGetNeighbors(arg1, arg2, arg3)
    ccall((:DMGetNeighbors, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{Ptr{PetscMPIInt}}), arg1, arg2, arg3)
end

function DMGetCoordinateDM(arg1, arg2)
    ccall((:DMGetCoordinateDM, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMSetCoordinateDM(arg1, arg2)
    ccall((:DMSetCoordinateDM, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMGetCellCoordinateDM(arg1, arg2)
    ccall((:DMGetCellCoordinateDM, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMSetCellCoordinateDM(arg1, arg2)
    ccall((:DMSetCellCoordinateDM, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMGetCoordinateDim(arg1, arg2)
    ccall((:DMGetCoordinateDim, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMSetCoordinateDim(arg1, arg2)
    ccall((:DMSetCoordinateDim, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMGetCoordinateSection(arg1, arg2)
    ccall((:DMGetCoordinateSection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}), arg1, arg2)
end

function DMSetCoordinateSection(arg1, arg2, arg3)
    ccall((:DMSetCoordinateSection, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscSection), arg1, arg2, arg3)
end

function DMGetCellCoordinateSection(arg1, arg2)
    ccall((:DMGetCellCoordinateSection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}), arg1, arg2)
end

function DMSetCellCoordinateSection(arg1, arg2, arg3)
    ccall((:DMSetCellCoordinateSection, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscSection), arg1, arg2, arg3)
end

function DMGetCoordinates(arg1, arg2)
    ccall((:DMGetCoordinates, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMSetCoordinates(arg1, arg2)
    ccall((:DMSetCoordinates, $petsc_library), PetscErrorCode, (DM, Vec), arg1, arg2)
end

function DMGetCellCoordinates(arg1, arg2)
    ccall((:DMGetCellCoordinates, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMSetCellCoordinates(arg1, arg2)
    ccall((:DMSetCellCoordinates, $petsc_library), PetscErrorCode, (DM, Vec), arg1, arg2)
end

function DMGetCoordinatesLocalSetUp(arg1)
    ccall((:DMGetCoordinatesLocalSetUp, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMGetCoordinatesLocal(arg1, arg2)
    ccall((:DMGetCoordinatesLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMGetCoordinatesLocalNoncollective(arg1, arg2)
    ccall((:DMGetCoordinatesLocalNoncollective, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMGetCoordinatesLocalTuple(arg1, arg2, arg3, arg4)
    ccall((:DMGetCoordinatesLocalTuple, $petsc_library), PetscErrorCode, (DM, IS, Ptr{PetscSection}, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function DMSetCoordinatesLocal(arg1, arg2)
    ccall((:DMSetCoordinatesLocal, $petsc_library), PetscErrorCode, (DM, Vec), arg1, arg2)
end

function DMGetCellCoordinatesLocalSetUp(arg1)
    ccall((:DMGetCellCoordinatesLocalSetUp, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMGetCellCoordinatesLocal(arg1, arg2)
    ccall((:DMGetCellCoordinatesLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMGetCellCoordinatesLocalNoncollective(arg1, arg2)
    ccall((:DMGetCellCoordinatesLocalNoncollective, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMSetCellCoordinatesLocal(arg1, arg2)
    ccall((:DMSetCellCoordinatesLocal, $petsc_library), PetscErrorCode, (DM, Vec), arg1, arg2)
end

function DMGetCoordinateField(arg1, arg2)
    ccall((:DMGetCoordinateField, $petsc_library), PetscErrorCode, (DM, Ptr{DMField}), arg1, arg2)
end

function DMSetCoordinateField(arg1, arg2)
    ccall((:DMSetCoordinateField, $petsc_library), PetscErrorCode, (DM, DMField), arg1, arg2)
end

function DMGetLocalBoundingBox(arg1, arg2, arg3)
    ccall((:DMGetLocalBoundingBox, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMGetBoundingBox(arg1, arg2, arg3)
    ccall((:DMGetBoundingBox, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMSetCoordinateDisc(arg1, arg2, arg3)
    ccall((:DMSetCoordinateDisc, $petsc_library), PetscErrorCode, (DM, PetscFE, PetscBool), arg1, arg2, arg3)
end

function DMLocatePoints(arg1, arg2, arg3, arg4)
    ccall((:DMLocatePoints, $petsc_library), PetscErrorCode, (DM, Vec, DMPointLocationType, Ptr{PetscSF}), arg1, arg2, arg3, arg4)
end

function DMGetPeriodicity(arg1, arg2, arg3, arg4)
    ccall((:DMGetPeriodicity, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}), arg1, arg2, arg3, arg4)
end

function DMSetPeriodicity(arg1, arg2, arg3, arg4)
    ccall((:DMSetPeriodicity, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function DMLocalizeCoordinate(arg1, arg2, arg3, arg4)
    ccall((:DMLocalizeCoordinate, $petsc_library), PetscErrorCode, (DM, Ptr{PetscScalar}, PetscBool, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function DMLocalizeCoordinates(arg1)
    ccall((:DMLocalizeCoordinates, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMGetCoordinatesLocalized(arg1, arg2)
    ccall((:DMGetCoordinatesLocalized, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMGetCoordinatesLocalizedLocal(arg1, arg2)
    ccall((:DMGetCoordinatesLocalizedLocal, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMSubDomainHookAdd(arg1, arg2, arg3, arg4)
    ccall((:DMSubDomainHookAdd, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMSubDomainHookRemove(arg1, arg2, arg3, arg4)
    ccall((:DMSubDomainHookRemove, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMSubDomainRestrict(arg1, arg2, arg3, arg4)
    ccall((:DMSubDomainRestrict, $petsc_library), PetscErrorCode, (DM, VecScatter, VecScatter, DM), arg1, arg2, arg3, arg4)
end

function DMSetOptionsPrefix(arg1, arg2)
    ccall((:DMSetOptionsPrefix, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}), arg1, arg2)
end

function DMAppendOptionsPrefix(arg1, arg2)
    ccall((:DMAppendOptionsPrefix, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}), arg1, arg2)
end

function DMGetOptionsPrefix(arg1, arg2)
    ccall((:DMGetOptionsPrefix, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function DMSetVecType(arg1, arg2)
    ccall((:DMSetVecType, $petsc_library), PetscErrorCode, (DM, VecType), arg1, arg2)
end

function DMGetVecType(arg1, arg2)
    ccall((:DMGetVecType, $petsc_library), PetscErrorCode, (DM, Ptr{VecType}), arg1, arg2)
end

function DMSetMatType(arg1, arg2)
    ccall((:DMSetMatType, $petsc_library), PetscErrorCode, (DM, MatType), arg1, arg2)
end

function DMGetMatType(arg1, arg2)
    ccall((:DMGetMatType, $petsc_library), PetscErrorCode, (DM, Ptr{MatType}), arg1, arg2)
end

function DMSetISColoringType(arg1, arg2)
    ccall((:DMSetISColoringType, $petsc_library), PetscErrorCode, (DM, ISColoringType), arg1, arg2)
end

function DMGetISColoringType(arg1, arg2)
    ccall((:DMGetISColoringType, $petsc_library), PetscErrorCode, (DM, Ptr{ISColoringType}), arg1, arg2)
end

function DMSetApplicationContext(arg1, arg2)
    ccall((:DMSetApplicationContext, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMSetApplicationContextDestroy(arg1, arg2)
    ccall((:DMSetApplicationContextDestroy, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMGetApplicationContext(arg1, arg2)
    ccall((:DMGetApplicationContext, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMSetVariableBounds(arg1, arg2)
    ccall((:DMSetVariableBounds, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMHasVariableBounds(arg1, arg2)
    ccall((:DMHasVariableBounds, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMHasColoring(arg1, arg2)
    ccall((:DMHasColoring, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMHasCreateRestriction(arg1, arg2)
    ccall((:DMHasCreateRestriction, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMHasCreateInjection(arg1, arg2)
    ccall((:DMHasCreateInjection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMComputeVariableBounds(arg1, arg2, arg3)
    ccall((:DMComputeVariableBounds, $petsc_library), PetscErrorCode, (DM, Vec, Vec), arg1, arg2, arg3)
end

function DMCreateSubDM(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMCreateSubDM, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{IS}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5)
end

function DMCreateSuperDM(arg1, arg2, arg3, arg4)
    ccall((:DMCreateSuperDM, $petsc_library), PetscErrorCode, (Ptr{DM}, PetscInt, Ptr{Ptr{IS}}, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMCreateSectionSubDM(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMCreateSectionSubDM, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{IS}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMCreateSectionSuperDM(arg1, arg2, arg3, arg4)
    ccall((:DMCreateSectionSuperDM, $petsc_library), PetscErrorCode, (Ptr{DM}, PetscInt, Ptr{Ptr{IS}}, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMCreateFieldDecomposition(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMCreateFieldDecomposition, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cchar}}}, Ptr{Ptr{IS}}, Ptr{Ptr{DM}}), arg1, arg2, arg3, arg4, arg5)
end

function DMCreateDomainDecomposition(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMCreateDomainDecomposition, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cchar}}}, Ptr{Ptr{IS}}, Ptr{Ptr{IS}}, Ptr{Ptr{DM}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMCreateDomainDecompositionScatters(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMCreateDomainDecompositionScatters, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DM}, Ptr{Ptr{VecScatter}}, Ptr{Ptr{VecScatter}}, Ptr{Ptr{VecScatter}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMGetRefineLevel(arg1, arg2)
    ccall((:DMGetRefineLevel, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMSetRefineLevel(arg1, arg2)
    ccall((:DMSetRefineLevel, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMGetCoarsenLevel(arg1, arg2)
    ccall((:DMGetCoarsenLevel, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMSetCoarsenLevel(arg1, arg2)
    ccall((:DMSetCoarsenLevel, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMFinalizePackage()
    ccall((:DMFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function VecGetDM(arg1, arg2)
    ccall((:VecGetDM, $petsc_library), PetscErrorCode, (Vec, Ptr{DM}), arg1, arg2)
end

function VecSetDM(arg1, arg2)
    ccall((:VecSetDM, $petsc_library), PetscErrorCode, (Vec, DM), arg1, arg2)
end

function MatGetDM(arg1, arg2)
    ccall((:MatGetDM, $petsc_library), PetscErrorCode, (Mat, Ptr{DM}), arg1, arg2)
end

function MatSetDM(arg1, arg2)
    ccall((:MatSetDM, $petsc_library), PetscErrorCode, (Mat, DM), arg1, arg2)
end

function MatFDColoringUseDM(arg1, arg2)
    ccall((:MatFDColoringUseDM, $petsc_library), PetscErrorCode, (Mat, MatFDColoring), arg1, arg2)
end

mutable struct NLF_DAAD end

const NLF = Ptr{NLF_DAAD}

function DMPrintCellIndices(arg1, arg2, arg3, arg4)
    ccall((:DMPrintCellIndices, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Cchar}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPrintCellVector(arg1, arg2, arg3, arg4)
    ccall((:DMPrintCellVector, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Cchar}, PetscInt, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function DMPrintCellVectorReal(arg1, arg2, arg3, arg4)
    ccall((:DMPrintCellVectorReal, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Cchar}, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function DMPrintCellMatrix(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPrintCellMatrix, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Cchar}, PetscInt, PetscInt, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5)
end

function DMPrintLocalVec(arg1, arg2, arg3, arg4)
    ccall((:DMPrintLocalVec, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscReal, Vec), arg1, arg2, arg3, arg4)
end

function DMSetNullSpaceConstructor(arg1, arg2, arg3)
    ccall((:DMSetNullSpaceConstructor, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMGetNullSpaceConstructor(arg1, arg2, arg3)
    ccall((:DMGetNullSpaceConstructor, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMSetNearNullSpaceConstructor(arg1, arg2, arg3)
    ccall((:DMSetNearNullSpaceConstructor, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMGetNearNullSpaceConstructor(arg1, arg2, arg3)
    ccall((:DMGetNearNullSpaceConstructor, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMGetSection(arg1, arg2)
    ccall((:DMGetSection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}), arg1, arg2)
end

function DMSetSection(arg1, arg2)
    ccall((:DMSetSection, $petsc_library), PetscErrorCode, (DM, PetscSection), arg1, arg2)
end

function DMGetLocalSection(arg1, arg2)
    ccall((:DMGetLocalSection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}), arg1, arg2)
end

function DMSetLocalSection(arg1, arg2)
    ccall((:DMSetLocalSection, $petsc_library), PetscErrorCode, (DM, PetscSection), arg1, arg2)
end

function DMGetGlobalSection(arg1, arg2)
    ccall((:DMGetGlobalSection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}), arg1, arg2)
end

function DMSetGlobalSection(arg1, arg2)
    ccall((:DMSetGlobalSection, $petsc_library), PetscErrorCode, (DM, PetscSection), arg1, arg2)
end

function DMCreateSectionPermutation(arg1, arg2, arg3)
    ccall((:DMCreateSectionPermutation, $petsc_library), PetscErrorCode, (DM, Ptr{IS}, Ptr{PetscBT}), arg1, arg2, arg3)
end

function DMReorderSectionGetDefault(arg1, arg2)
    ccall((:DMReorderSectionGetDefault, $petsc_library), PetscErrorCode, (DM, Ptr{DMReorderDefaultFlag}), arg1, arg2)
end

function DMReorderSectionSetDefault(arg1, arg2)
    ccall((:DMReorderSectionSetDefault, $petsc_library), PetscErrorCode, (DM, DMReorderDefaultFlag), arg1, arg2)
end

function DMReorderSectionGetType(arg1, arg2)
    ccall((:DMReorderSectionGetType, $petsc_library), PetscErrorCode, (DM, Ptr{MatOrderingType}), arg1, arg2)
end

function DMReorderSectionSetType(arg1, arg2)
    ccall((:DMReorderSectionSetType, $petsc_library), PetscErrorCode, (DM, MatOrderingType), arg1, arg2)
end

function DMUseTensorOrder(arg1, arg2)
    ccall((:DMUseTensorOrder, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMGetDefaultSection(dm, s)
    ccall((:DMGetDefaultSection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}), dm, s)
end

function DMSetDefaultSection(dm, s)
    ccall((:DMSetDefaultSection, $petsc_library), PetscErrorCode, (DM, PetscSection), dm, s)
end

function DMGetDefaultGlobalSection(dm, s)
    ccall((:DMGetDefaultGlobalSection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}), dm, s)
end

function DMSetDefaultGlobalSection(dm, s)
    ccall((:DMSetDefaultGlobalSection, $petsc_library), PetscErrorCode, (DM, PetscSection), dm, s)
end

function DMGetSectionSF(arg1, arg2)
    ccall((:DMGetSectionSF, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSF}), arg1, arg2)
end

function DMSetSectionSF(arg1, arg2)
    ccall((:DMSetSectionSF, $petsc_library), PetscErrorCode, (DM, PetscSF), arg1, arg2)
end

function DMCreateSectionSF(arg1, arg2, arg3)
    ccall((:DMCreateSectionSF, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscSection), arg1, arg2, arg3)
end

function DMGetDefaultSF(dm, s)
    ccall((:DMGetDefaultSF, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSF}), dm, s)
end

function DMSetDefaultSF(dm, s)
    ccall((:DMSetDefaultSF, $petsc_library), PetscErrorCode, (DM, PetscSF), dm, s)
end

function DMCreateDefaultSF(dm, l, g)
    ccall((:DMCreateDefaultSF, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscSection), dm, l, g)
end

function DMGetPointSF(arg1, arg2)
    ccall((:DMGetPointSF, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSF}), arg1, arg2)
end

function DMSetPointSF(arg1, arg2)
    ccall((:DMSetPointSF, $petsc_library), PetscErrorCode, (DM, PetscSF), arg1, arg2)
end

function DMGetNaturalSF(arg1, arg2)
    ccall((:DMGetNaturalSF, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSF}), arg1, arg2)
end

function DMSetNaturalSF(arg1, arg2)
    ccall((:DMSetNaturalSF, $petsc_library), PetscErrorCode, (DM, PetscSF), arg1, arg2)
end

function DMGetDefaultConstraints(arg1, arg2, arg3, arg4)
    ccall((:DMGetDefaultConstraints, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}, Ptr{Mat}, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function DMSetDefaultConstraints(arg1, arg2, arg3, arg4)
    ccall((:DMSetDefaultConstraints, $petsc_library), PetscErrorCode, (DM, PetscSection, Mat, Vec), arg1, arg2, arg3, arg4)
end

function DMGetOutputDM(arg1, arg2)
    ccall((:DMGetOutputDM, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMGetOutputSequenceNumber(arg1, arg2, arg3)
    ccall((:DMGetOutputSequenceNumber, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMSetOutputSequenceNumber(arg1, arg2, arg3)
    ccall((:DMSetOutputSequenceNumber, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscReal), arg1, arg2, arg3)
end

function DMOutputSequenceLoad(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMOutputSequenceLoad, $petsc_library), PetscErrorCode, (DM, PetscViewer, Ptr{Cchar}, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function DMGetNumFields(arg1, arg2)
    ccall((:DMGetNumFields, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMSetNumFields(arg1, arg2)
    ccall((:DMSetNumFields, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMGetField(arg1, arg2, arg3, arg4)
    ccall((:DMGetField, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DMLabel}, Ptr{PetscObject}), arg1, arg2, arg3, arg4)
end

function DMSetField(arg1, arg2, arg3, arg4)
    ccall((:DMSetField, $petsc_library), PetscErrorCode, (DM, PetscInt, DMLabel, PetscObject), arg1, arg2, arg3, arg4)
end

function DMAddField(arg1, arg2, arg3)
    ccall((:DMAddField, $petsc_library), PetscErrorCode, (DM, DMLabel, PetscObject), arg1, arg2, arg3)
end

function DMSetFieldAvoidTensor(arg1, arg2, arg3)
    ccall((:DMSetFieldAvoidTensor, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscBool), arg1, arg2, arg3)
end

function DMGetFieldAvoidTensor(arg1, arg2, arg3)
    ccall((:DMGetFieldAvoidTensor, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMClearFields(arg1)
    ccall((:DMClearFields, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMCopyFields(arg1, arg2)
    ccall((:DMCopyFields, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMGetAdjacency(arg1, arg2, arg3, arg4)
    ccall((:DMGetAdjacency, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function DMSetAdjacency(arg1, arg2, arg3, arg4)
    ccall((:DMSetAdjacency, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscBool, PetscBool), arg1, arg2, arg3, arg4)
end

function DMGetBasicAdjacency(arg1, arg2, arg3)
    ccall((:DMGetBasicAdjacency, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMSetBasicAdjacency(arg1, arg2, arg3)
    ccall((:DMSetBasicAdjacency, $petsc_library), PetscErrorCode, (DM, PetscBool, PetscBool), arg1, arg2, arg3)
end

function DMGetNumDS(arg1, arg2)
    ccall((:DMGetNumDS, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMGetDS(arg1, arg2)
    ccall((:DMGetDS, $petsc_library), PetscErrorCode, (DM, Ptr{PetscDS}), arg1, arg2)
end

function DMGetCellDS(arg1, arg2, arg3, arg4)
    ccall((:DMGetCellDS, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscDS}, Ptr{PetscDS}), arg1, arg2, arg3, arg4)
end

function DMGetRegionDS(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMGetRegionDS, $petsc_library), PetscErrorCode, (DM, DMLabel, Ptr{IS}, Ptr{PetscDS}, Ptr{PetscDS}), arg1, arg2, arg3, arg4, arg5)
end

function DMSetRegionDS(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMSetRegionDS, $petsc_library), PetscErrorCode, (DM, DMLabel, IS, PetscDS, PetscDS), arg1, arg2, arg3, arg4, arg5)
end

function DMGetRegionNumDS(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMGetRegionNumDS, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DMLabel}, Ptr{IS}, Ptr{PetscDS}, Ptr{PetscDS}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMSetRegionNumDS(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMSetRegionNumDS, $petsc_library), PetscErrorCode, (DM, PetscInt, DMLabel, IS, PetscDS, PetscDS), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMFindRegionNum(arg1, arg2, arg3)
    ccall((:DMFindRegionNum, $petsc_library), PetscErrorCode, (DM, PetscDS, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMCreateFEDefault(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMCreateFEDefault, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Cchar}, PetscInt, Ptr{PetscFE}), arg1, arg2, arg3, arg4, arg5)
end

function DMCreateDS(arg1)
    ccall((:DMCreateDS, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMClearDS(arg1)
    ccall((:DMClearDS, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMCopyDS(arg1, arg2)
    ccall((:DMCopyDS, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMCopyDisc(arg1, arg2)
    ccall((:DMCopyDisc, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMComputeExactSolution(arg1, arg2, arg3, arg4)
    ccall((:DMComputeExactSolution, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, Vec), arg1, arg2, arg3, arg4)
end

function DMGetNumAuxiliaryVec(arg1, arg2)
    ccall((:DMGetNumAuxiliaryVec, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMGetAuxiliaryVec(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMGetAuxiliaryVec, $petsc_library), PetscErrorCode, (DM, DMLabel, PetscInt, PetscInt, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function DMSetAuxiliaryVec(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMSetAuxiliaryVec, $petsc_library), PetscErrorCode, (DM, DMLabel, PetscInt, PetscInt, Vec), arg1, arg2, arg3, arg4, arg5)
end

function DMGetAuxiliaryLabels(arg1, arg2, arg3, arg4)
    ccall((:DMGetAuxiliaryLabels, $petsc_library), PetscErrorCode, (DM, Ptr{DMLabel}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMCopyAuxiliaryVec(arg1, arg2)
    ccall((:DMCopyAuxiliaryVec, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMClearAuxiliaryVec(arg1)
    ccall((:DMClearAuxiliaryVec, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMCreateLabel(arg1, arg2)
    ccall((:DMCreateLabel, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}), arg1, arg2)
end

function DMCreateLabelAtIndex(arg1, arg2, arg3)
    ccall((:DMCreateLabelAtIndex, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Cchar}), arg1, arg2, arg3)
end

function DMGetLabelValue(arg1, arg2, arg3, arg4)
    ccall((:DMGetLabelValue, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMSetLabelValue(arg1, arg2, arg3, arg4)
    ccall((:DMSetLabelValue, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMClearLabelValue(arg1, arg2, arg3, arg4)
    ccall((:DMClearLabelValue, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMGetLabelSize(arg1, arg2, arg3)
    ccall((:DMGetLabelSize, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMGetLabelIdIS(arg1, arg2, arg3)
    ccall((:DMGetLabelIdIS, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{IS}), arg1, arg2, arg3)
end

function DMGetStratumSize(arg1, arg2, arg3, arg4)
    ccall((:DMGetStratumSize, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMGetStratumIS(arg1, arg2, arg3, arg4)
    ccall((:DMGetStratumIS, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscInt, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function DMSetStratumIS(arg1, arg2, arg3, arg4)
    ccall((:DMSetStratumIS, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscInt, IS), arg1, arg2, arg3, arg4)
end

function DMClearLabelStratum(arg1, arg2, arg3)
    ccall((:DMClearLabelStratum, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscInt), arg1, arg2, arg3)
end

function DMGetLabelOutput(arg1, arg2, arg3)
    ccall((:DMGetLabelOutput, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMSetLabelOutput(arg1, arg2, arg3)
    ccall((:DMSetLabelOutput, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscBool), arg1, arg2, arg3)
end

function DMGetFirstLabeledPoint(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMGetFirstLabeledPoint, $petsc_library), PetscErrorCode, (DM, DM, DMLabel, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscDS}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

@enum DMCopyLabelsMode::UInt32 begin
    DM_COPY_LABELS_REPLACE = 0
    DM_COPY_LABELS_KEEP = 1
    DM_COPY_LABELS_FAIL = 2
end

function DMGetNumLabels(arg1, arg2)
    ccall((:DMGetNumLabels, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMGetLabelName(arg1, arg2, arg3)
    ccall((:DMGetLabelName, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Ptr{Cchar}}), arg1, arg2, arg3)
end

function DMHasLabel(arg1, arg2, arg3)
    ccall((:DMHasLabel, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMGetLabel(arg1, arg2, arg3)
    ccall((:DMGetLabel, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{DMLabel}), arg1, arg2, arg3)
end

function DMSetLabel(arg1, arg2)
    ccall((:DMSetLabel, $petsc_library), PetscErrorCode, (DM, DMLabel), arg1, arg2)
end

function DMGetLabelByNum(arg1, arg2, arg3)
    ccall((:DMGetLabelByNum, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DMLabel}), arg1, arg2, arg3)
end

function DMAddLabel(arg1, arg2)
    ccall((:DMAddLabel, $petsc_library), PetscErrorCode, (DM, DMLabel), arg1, arg2)
end

function DMRemoveLabel(arg1, arg2, arg3)
    ccall((:DMRemoveLabel, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{DMLabel}), arg1, arg2, arg3)
end

function DMRemoveLabelBySelf(arg1, arg2, arg3)
    ccall((:DMRemoveLabelBySelf, $petsc_library), PetscErrorCode, (DM, Ptr{DMLabel}, PetscBool), arg1, arg2, arg3)
end

function DMCopyLabels(arg1, arg2, arg3, arg4, emode)
    ccall((:DMCopyLabels, $petsc_library), PetscErrorCode, (DM, DM, PetscCopyMode, PetscBool, DMCopyLabelsMode), arg1, arg2, arg3, arg4, emode)
end

function DMCompareLabels(arg1, arg2, arg3, arg4)
    ccall((:DMCompareLabels, $petsc_library), PetscErrorCode, (DM, DM, Ptr{PetscBool}, Ptr{Ptr{Cchar}}), arg1, arg2, arg3, arg4)
end

function DMAddBoundary(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
    ccall((:DMAddBoundary, $petsc_library), PetscErrorCode, (DM, DMBoundaryConditionType, Ptr{Cchar}, DMLabel, PetscInt, Ptr{PetscInt}, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
end

function DMIsBoundaryPoint(arg1, arg2, arg3)
    ccall((:DMIsBoundaryPoint, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMProjectFunction(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMProjectFunction, $petsc_library), PetscErrorCode, (DM, PetscReal, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, InsertMode, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMProjectFunctionLocal(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMProjectFunctionLocal, $petsc_library), PetscErrorCode, (DM, PetscReal, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, InsertMode, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMProjectFunctionLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:DMProjectFunctionLabel, $petsc_library), PetscErrorCode, (DM, PetscReal, DMLabel, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, InsertMode, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function DMProjectFunctionLabelLocal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:DMProjectFunctionLabelLocal, $petsc_library), PetscErrorCode, (DM, PetscReal, DMLabel, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, InsertMode, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function DMProjectFieldLocal(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMProjectFieldLocal, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, Ptr{Ptr{Cvoid}}, InsertMode, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMProjectFieldLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, funcs, arg10, arg11)
    ccall((:DMProjectFieldLabel, $petsc_library), PetscErrorCode, (DM, PetscReal, DMLabel, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Vec, Ptr{Ptr{Cvoid}}, InsertMode, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, funcs, arg10, arg11)
end

function DMProjectFieldLabelLocal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:DMProjectFieldLabelLocal, $petsc_library), PetscErrorCode, (DM, PetscReal, DMLabel, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Vec, Ptr{Ptr{Cvoid}}, InsertMode, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function DMProjectBdFieldLabelLocal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:DMProjectBdFieldLabelLocal, $petsc_library), PetscErrorCode, (DM, PetscReal, DMLabel, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Vec, Ptr{Ptr{Cvoid}}, InsertMode, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function DMComputeL2Diff(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMComputeL2Diff, $petsc_library), PetscErrorCode, (DM, PetscReal, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Vec, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMComputeL2GradientDiff(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMComputeL2GradientDiff, $petsc_library), PetscErrorCode, (DM, PetscReal, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Vec, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMComputeL2FieldDiff(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMComputeL2FieldDiff, $petsc_library), PetscErrorCode, (DM, PetscReal, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Vec, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMComputeError(arg1, arg2, arg3, arg4)
    ccall((:DMComputeError, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{PetscReal}, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function DMHasBasisTransform(arg1, arg2)
    ccall((:DMHasBasisTransform, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMCopyTransform(arg1, arg2)
    ccall((:DMCopyTransform, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMGetCompatibility(arg1, arg2, arg3, arg4)
    ccall((:DMGetCompatibility, $petsc_library), PetscErrorCode, (DM, DM, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function DMMonitorSet(arg1, arg2, arg3, arg4)
    ccall((:DMMonitorSet, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMMonitorCancel(arg1)
    ccall((:DMMonitorCancel, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMMonitorSetFromOptions(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMMonitorSetFromOptions, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMMonitor(arg1)
    ccall((:DMMonitor, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPolytopeTypeIsHybrid(ct)
    ccall((:DMPolytopeTypeIsHybrid, $petsc_library), PetscBool, (DMPolytopeType,), ct)
end

function DMPolytopeTypeGetDim(ct)
    ccall((:DMPolytopeTypeGetDim, $petsc_library), PetscInt, (DMPolytopeType,), ct)
end

function DMPolytopeTypeGetConeSize(ct)
    ccall((:DMPolytopeTypeGetConeSize, $petsc_library), PetscInt, (DMPolytopeType,), ct)
end

function DMPolytopeTypeGetNumVertices(ct)
    ccall((:DMPolytopeTypeGetNumVertices, $petsc_library), PetscInt, (DMPolytopeType,), ct)
end

function DMPolytopeTypeSimpleShape(dim, simplex)
    ccall((:DMPolytopeTypeSimpleShape, $petsc_library), DMPolytopeType, (PetscInt, PetscBool), dim, simplex)
end

function DMPolytopeTypeGetNumArrangements(ct)
    ccall((:DMPolytopeTypeGetNumArrangements, $petsc_library), PetscInt, (DMPolytopeType,), ct)
end

function DMPolytopeTypeGetArrangement(ct, o)
    ccall((:DMPolytopeTypeGetArrangement, $petsc_library), Ptr{PetscInt}, (DMPolytopeType, PetscInt), ct, o)
end

function DMPolytopeTypeGetVertexArrangement(ct, o)
    ccall((:DMPolytopeTypeGetVertexArrangement, $petsc_library), Ptr{PetscInt}, (DMPolytopeType, PetscInt), ct, o)
end

function DMPolytopeTypeComposeOrientation(ct, o1, o2)
    ccall((:DMPolytopeTypeComposeOrientation, $petsc_library), PetscInt, (DMPolytopeType, PetscInt, PetscInt), ct, o1, o2)
end

function DMPolytopeTypeComposeOrientationInv(ct, o1, o2)
    ccall((:DMPolytopeTypeComposeOrientationInv, $petsc_library), PetscInt, (DMPolytopeType, PetscInt, PetscInt), ct, o1, o2)
end

function DMPolytopeMatchOrientation(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPolytopeMatchOrientation, $petsc_library), PetscErrorCode, (DMPolytopeType, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function DMPolytopeMatchVertexOrientation(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPolytopeMatchVertexOrientation, $petsc_library), PetscErrorCode, (DMPolytopeType, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function DMPolytopeGetOrientation(arg1, arg2, arg3, arg4)
    ccall((:DMPolytopeGetOrientation, $petsc_library), PetscErrorCode, (DMPolytopeType, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPolytopeGetVertexOrientation(arg1, arg2, arg3, arg4)
    ccall((:DMPolytopeGetVertexOrientation, $petsc_library), PetscErrorCode, (DMPolytopeType, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPolytopeInCellTest(arg1, arg2, arg3)
    ccall((:DMPolytopeInCellTest, $petsc_library), PetscErrorCode, (DMPolytopeType, Ptr{PetscReal}, Ptr{PetscBool}), arg1, arg2, arg3)
end

@enum DMDAStencilType::UInt32 begin
    DMDA_STENCIL_STAR = 0
    DMDA_STENCIL_BOX = 1
end

@enum DMDAInterpolationType::UInt32 begin
    DMDA_Q0 = 0
    DMDA_Q1 = 1
end

@enum DMDAElementType::UInt32 begin
    DMDA_ELEMENT_P1 = 0
    DMDA_ELEMENT_Q1 = 1
end

const PFType = Ptr{Cchar}

mutable struct _p_PF end

const PF = Ptr{_p_PF}

function PFCreate(arg1, arg2, arg3, arg4)
    ccall((:PFCreate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{PF}), arg1, arg2, arg3, arg4)
end

function PFSetType(arg1, arg2, arg3)
    ccall((:PFSetType, $petsc_library), PetscErrorCode, (PF, PFType, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PFSet(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PFSet, $petsc_library), PetscErrorCode, (PF, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PFApply(arg1, arg2, arg3, arg4)
    ccall((:PFApply, $petsc_library), PetscErrorCode, (PF, PetscInt, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function PFApplyVec(arg1, arg2, arg3)
    ccall((:PFApplyVec, $petsc_library), PetscErrorCode, (PF, Vec, Vec), arg1, arg2, arg3)
end

function PFStringSetFunction(arg1, arg2)
    ccall((:PFStringSetFunction, $petsc_library), PetscErrorCode, (PF, Ptr{Cchar}), arg1, arg2)
end

function PFInitializePackage()
    ccall((:PFInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PFFinalizePackage()
    ccall((:PFFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PFRegister(arg1, arg2)
    ccall((:PFRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PFDestroy(arg1)
    ccall((:PFDestroy, $petsc_library), PetscErrorCode, (Ptr{PF},), arg1)
end

function PFSetFromOptions(arg1)
    ccall((:PFSetFromOptions, $petsc_library), PetscErrorCode, (PF,), arg1)
end

function PFGetType(arg1, arg2)
    ccall((:PFGetType, $petsc_library), PetscErrorCode, (PF, Ptr{PFType}), arg1, arg2)
end

function PFView(arg1, arg2)
    ccall((:PFView, $petsc_library), PetscErrorCode, (PF, PetscViewer), arg1, arg2)
end

function PFViewFromOptions(arg1, arg2, arg3)
    ccall((:PFViewFromOptions, $petsc_library), PetscErrorCode, (PF, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

mutable struct _p_AO end

const AO = Ptr{_p_AO}

const AOType = Ptr{Cchar}

function AOInitializePackage()
    ccall((:AOInitializePackage, $petsc_library), PetscErrorCode, ())
end

function AOFinalizePackage()
    ccall((:AOFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function AOCreate(arg1, arg2)
    ccall((:AOCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{AO}), arg1, arg2)
end

function AOSetIS(arg1, arg2, arg3)
    ccall((:AOSetIS, $petsc_library), PetscErrorCode, (AO, IS, IS), arg1, arg2, arg3)
end

function AOSetFromOptions(arg1)
    ccall((:AOSetFromOptions, $petsc_library), PetscErrorCode, (AO,), arg1)
end

function AOCreateBasic(arg1, arg2, arg3, arg4, arg5)
    ccall((:AOCreateBasic, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{AO}), arg1, arg2, arg3, arg4, arg5)
end

function AOCreateBasicIS(arg1, arg2, arg3)
    ccall((:AOCreateBasicIS, $petsc_library), PetscErrorCode, (IS, IS, Ptr{AO}), arg1, arg2, arg3)
end

function AOCreateMemoryScalable(arg1, arg2, arg3, arg4, arg5)
    ccall((:AOCreateMemoryScalable, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{AO}), arg1, arg2, arg3, arg4, arg5)
end

function AOCreateMemoryScalableIS(arg1, arg2, arg3)
    ccall((:AOCreateMemoryScalableIS, $petsc_library), PetscErrorCode, (IS, IS, Ptr{AO}), arg1, arg2, arg3)
end

function AOCreateMapping(arg1, arg2, arg3, arg4, arg5)
    ccall((:AOCreateMapping, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{AO}), arg1, arg2, arg3, arg4, arg5)
end

function AOCreateMappingIS(arg1, arg2, arg3)
    ccall((:AOCreateMappingIS, $petsc_library), PetscErrorCode, (IS, IS, Ptr{AO}), arg1, arg2, arg3)
end

function AOView(arg1, arg2)
    ccall((:AOView, $petsc_library), PetscErrorCode, (AO, PetscViewer), arg1, arg2)
end

function AOViewFromOptions(arg1, arg2, arg3)
    ccall((:AOViewFromOptions, $petsc_library), PetscErrorCode, (AO, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function AODestroy(arg1)
    ccall((:AODestroy, $petsc_library), PetscErrorCode, (Ptr{AO},), arg1)
end

function AOSetType(arg1, arg2)
    ccall((:AOSetType, $petsc_library), PetscErrorCode, (AO, AOType), arg1, arg2)
end

function AOGetType(arg1, arg2)
    ccall((:AOGetType, $petsc_library), PetscErrorCode, (AO, Ptr{AOType}), arg1, arg2)
end

function AORegister(arg1, arg2)
    ccall((:AORegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function AORegisterAll()
    ccall((:AORegisterAll, $petsc_library), PetscErrorCode, ())
end

function AOPetscToApplication(arg1, arg2, arg3)
    ccall((:AOPetscToApplication, $petsc_library), PetscErrorCode, (AO, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function AOApplicationToPetsc(arg1, arg2, arg3)
    ccall((:AOApplicationToPetsc, $petsc_library), PetscErrorCode, (AO, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function AOPetscToApplicationIS(arg1, arg2)
    ccall((:AOPetscToApplicationIS, $petsc_library), PetscErrorCode, (AO, IS), arg1, arg2)
end

function AOApplicationToPetscIS(arg1, arg2)
    ccall((:AOApplicationToPetscIS, $petsc_library), PetscErrorCode, (AO, IS), arg1, arg2)
end

function AOPetscToApplicationPermuteInt(arg1, arg2, arg3)
    ccall((:AOPetscToApplicationPermuteInt, $petsc_library), PetscErrorCode, (AO, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function AOApplicationToPetscPermuteInt(arg1, arg2, arg3)
    ccall((:AOApplicationToPetscPermuteInt, $petsc_library), PetscErrorCode, (AO, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function AOPetscToApplicationPermuteReal(arg1, arg2, arg3)
    ccall((:AOPetscToApplicationPermuteReal, $petsc_library), PetscErrorCode, (AO, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function AOApplicationToPetscPermuteReal(arg1, arg2, arg3)
    ccall((:AOApplicationToPetscPermuteReal, $petsc_library), PetscErrorCode, (AO, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function AOMappingHasApplicationIndex(arg1, arg2, arg3)
    ccall((:AOMappingHasApplicationIndex, $petsc_library), PetscErrorCode, (AO, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3)
end

function AOMappingHasPetscIndex(arg1, arg2, arg3)
    ccall((:AOMappingHasPetscIndex, $petsc_library), PetscErrorCode, (AO, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3)
end

mutable struct _p_PetscSpace end

const PetscSpace = Ptr{_p_PetscSpace}

function PetscFEInitializePackage()
    ccall((:PetscFEInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscFEFinalizePackage()
    ccall((:PetscFEFinalizePackage, $petsc_library), PetscErrorCode, ())
end

const PetscSpaceType = Ptr{Cchar}

function PetscSpaceCreate(arg1, arg2)
    ccall((:PetscSpaceCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscSpace}), arg1, arg2)
end

function PetscSpaceDestroy(arg1)
    ccall((:PetscSpaceDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscSpace},), arg1)
end

function PetscSpaceSetType(arg1, arg2)
    ccall((:PetscSpaceSetType, $petsc_library), PetscErrorCode, (PetscSpace, PetscSpaceType), arg1, arg2)
end

function PetscSpaceGetType(arg1, arg2)
    ccall((:PetscSpaceGetType, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscSpaceType}), arg1, arg2)
end

function PetscSpaceSetUp(arg1)
    ccall((:PetscSpaceSetUp, $petsc_library), PetscErrorCode, (PetscSpace,), arg1)
end

function PetscSpaceSetFromOptions(arg1)
    ccall((:PetscSpaceSetFromOptions, $petsc_library), PetscErrorCode, (PetscSpace,), arg1)
end

function PetscSpaceViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscSpaceViewFromOptions, $petsc_library), PetscErrorCode, (PetscSpace, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscSpaceView(arg1, arg2)
    ccall((:PetscSpaceView, $petsc_library), PetscErrorCode, (PetscSpace, PetscViewer), arg1, arg2)
end

function PetscSpaceRegister(arg1, arg2)
    ccall((:PetscSpaceRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscSpaceRegisterDestroy()
    ccall((:PetscSpaceRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function PetscSpaceGetDimension(arg1, arg2)
    ccall((:PetscSpaceGetDimension, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscSpaceSetNumComponents(arg1, arg2)
    ccall((:PetscSpaceSetNumComponents, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt), arg1, arg2)
end

function PetscSpaceGetNumComponents(arg1, arg2)
    ccall((:PetscSpaceGetNumComponents, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscSpaceSetNumVariables(arg1, arg2)
    ccall((:PetscSpaceSetNumVariables, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt), arg1, arg2)
end

function PetscSpaceGetNumVariables(arg1, arg2)
    ccall((:PetscSpaceGetNumVariables, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscSpaceSetDegree(arg1, arg2, arg3)
    ccall((:PetscSpaceSetDegree, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscSpaceGetDegree(arg1, arg2, arg3)
    ccall((:PetscSpaceGetDegree, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscSpaceEvaluate(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscSpaceEvaluate, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscSpaceGetHeightSubspace(arg1, arg2, arg3)
    ccall((:PetscSpaceGetHeightSubspace, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt, Ptr{PetscSpace}), arg1, arg2, arg3)
end

function PetscSpacePolynomialSetSymmetric(sp, s)
    ccall((:PetscSpacePolynomialSetSymmetric, $petsc_library), PetscErrorCode, (PetscSpace, PetscBool), sp, s)
end

function PetscSpacePolynomialGetSymmetric(sp, s)
    ccall((:PetscSpacePolynomialGetSymmetric, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscBool}), sp, s)
end

function PetscSpacePolynomialSetTensor(arg1, arg2)
    ccall((:PetscSpacePolynomialSetTensor, $petsc_library), PetscErrorCode, (PetscSpace, PetscBool), arg1, arg2)
end

function PetscSpacePolynomialGetTensor(arg1, arg2)
    ccall((:PetscSpacePolynomialGetTensor, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscBool}), arg1, arg2)
end

function PetscSpacePTrimmedSetFormDegree(arg1, arg2)
    ccall((:PetscSpacePTrimmedSetFormDegree, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt), arg1, arg2)
end

function PetscSpacePTrimmedGetFormDegree(arg1, arg2)
    ccall((:PetscSpacePTrimmedGetFormDegree, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscSpaceTensorSetNumSubspaces(arg1, arg2)
    ccall((:PetscSpaceTensorSetNumSubspaces, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt), arg1, arg2)
end

function PetscSpaceTensorGetNumSubspaces(arg1, arg2)
    ccall((:PetscSpaceTensorGetNumSubspaces, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscSpaceTensorSetSubspace(arg1, arg2, arg3)
    ccall((:PetscSpaceTensorSetSubspace, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt, PetscSpace), arg1, arg2, arg3)
end

function PetscSpaceTensorGetSubspace(arg1, arg2, arg3)
    ccall((:PetscSpaceTensorGetSubspace, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt, Ptr{PetscSpace}), arg1, arg2, arg3)
end

function PetscSpaceSumSetNumSubspaces(arg1, arg2)
    ccall((:PetscSpaceSumSetNumSubspaces, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt), arg1, arg2)
end

function PetscSpaceSumGetNumSubspaces(arg1, arg2)
    ccall((:PetscSpaceSumGetNumSubspaces, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscSpaceSumSetSubspace(arg1, arg2, arg3)
    ccall((:PetscSpaceSumSetSubspace, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt, PetscSpace), arg1, arg2, arg3)
end

function PetscSpaceSumGetSubspace(arg1, arg2, arg3)
    ccall((:PetscSpaceSumGetSubspace, $petsc_library), PetscErrorCode, (PetscSpace, PetscInt, Ptr{PetscSpace}), arg1, arg2, arg3)
end

function PetscSpaceSumSetConcatenate(arg1, arg2)
    ccall((:PetscSpaceSumSetConcatenate, $petsc_library), PetscErrorCode, (PetscSpace, PetscBool), arg1, arg2)
end

function PetscSpaceSumGetConcatenate(arg1, arg2)
    ccall((:PetscSpaceSumGetConcatenate, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscBool}), arg1, arg2)
end

function PetscSpaceSumSetInterleave(arg1, arg2, arg3)
    ccall((:PetscSpaceSumSetInterleave, $petsc_library), PetscErrorCode, (PetscSpace, PetscBool, PetscBool), arg1, arg2, arg3)
end

function PetscSpaceSumGetInterleave(arg1, arg2, arg3)
    ccall((:PetscSpaceSumGetInterleave, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscSpaceCreateSum(arg1, arg2, arg3, arg4)
    ccall((:PetscSpaceCreateSum, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscSpace}, PetscBool, Ptr{PetscSpace}), arg1, arg2, arg3, arg4)
end

function PetscSpacePointGetPoints(arg1, arg2)
    ccall((:PetscSpacePointGetPoints, $petsc_library), PetscErrorCode, (PetscSpace, Ptr{PetscQuadrature}), arg1, arg2)
end

function PetscSpacePointSetPoints(arg1, arg2)
    ccall((:PetscSpacePointSetPoints, $petsc_library), PetscErrorCode, (PetscSpace, PetscQuadrature), arg1, arg2)
end

mutable struct _p_PetscDualSpace end

const PetscDualSpace = Ptr{_p_PetscDualSpace}

@enum PetscDualSpaceReferenceCell::UInt32 begin
    PETSCDUALSPACE_REFCELL_SIMPLEX = 0
    PETSCDUALSPACE_REFCELL_TENSOR = 1
end

@enum PetscDualSpaceTransformType::UInt32 begin
    IDENTITY_TRANSFORM = 0
    COVARIANT_PIOLA_TRANSFORM = 1
    CONTRAVARIANT_PIOLA_TRANSFORM = 2
end

const PetscDualSpaceType = Ptr{Cchar}

function PetscDualSpaceCreate(arg1, arg2)
    ccall((:PetscDualSpaceCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscDualSpace}), arg1, arg2)
end

function PetscDualSpaceDestroy(arg1)
    ccall((:PetscDualSpaceDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscDualSpace},), arg1)
end

function PetscDualSpaceDuplicate(arg1, arg2)
    ccall((:PetscDualSpaceDuplicate, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscDualSpace}), arg1, arg2)
end

function PetscDualSpaceSetType(arg1, arg2)
    ccall((:PetscDualSpaceSetType, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscDualSpaceType), arg1, arg2)
end

function PetscDualSpaceGetType(arg1, arg2)
    ccall((:PetscDualSpaceGetType, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscDualSpaceType}), arg1, arg2)
end

function PetscDualSpaceGetUniform(arg1, arg2)
    ccall((:PetscDualSpaceGetUniform, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscBool}), arg1, arg2)
end

function PetscDualSpaceGetNumDof(arg1, arg2)
    ccall((:PetscDualSpaceGetNumDof, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function PetscDualSpaceGetSection(arg1, arg2)
    ccall((:PetscDualSpaceGetSection, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscSection}), arg1, arg2)
end

function PetscDualSpaceGetInteriorSection(arg1, arg2)
    ccall((:PetscDualSpaceGetInteriorSection, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscSection}), arg1, arg2)
end

function PetscDualSpaceSetUp(arg1)
    ccall((:PetscDualSpaceSetUp, $petsc_library), PetscErrorCode, (PetscDualSpace,), arg1)
end

function PetscDualSpaceSetFromOptions(arg1)
    ccall((:PetscDualSpaceSetFromOptions, $petsc_library), PetscErrorCode, (PetscDualSpace,), arg1)
end

function PetscDualSpaceViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscDualSpaceViewFromOptions, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscDualSpaceView(arg1, arg2)
    ccall((:PetscDualSpaceView, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscViewer), arg1, arg2)
end

function PetscDualSpaceRegister(arg1, arg2)
    ccall((:PetscDualSpaceRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscDualSpaceRegisterDestroy()
    ccall((:PetscDualSpaceRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function PetscDualSpaceGetDimension(arg1, arg2)
    ccall((:PetscDualSpaceGetDimension, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscDualSpaceGetInteriorDimension(arg1, arg2)
    ccall((:PetscDualSpaceGetInteriorDimension, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscDualSpaceSetNumComponents(arg1, arg2)
    ccall((:PetscDualSpaceSetNumComponents, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt), arg1, arg2)
end

function PetscDualSpaceGetNumComponents(arg1, arg2)
    ccall((:PetscDualSpaceGetNumComponents, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscDualSpaceSetOrder(arg1, arg2)
    ccall((:PetscDualSpaceSetOrder, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt), arg1, arg2)
end

function PetscDualSpaceGetOrder(arg1, arg2)
    ccall((:PetscDualSpaceGetOrder, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscDualSpaceSetDM(arg1, arg2)
    ccall((:PetscDualSpaceSetDM, $petsc_library), PetscErrorCode, (PetscDualSpace, DM), arg1, arg2)
end

function PetscDualSpaceGetDM(arg1, arg2)
    ccall((:PetscDualSpaceGetDM, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{DM}), arg1, arg2)
end

function PetscDualSpaceGetFunctional(arg1, arg2, arg3)
    ccall((:PetscDualSpaceGetFunctional, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt, Ptr{PetscQuadrature}), arg1, arg2, arg3)
end

function PetscDualSpaceGetSymmetries(arg1, arg2, arg3)
    ccall((:PetscDualSpaceGetSymmetries, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{Ptr{Ptr{Ptr{PetscInt}}}}, Ptr{Ptr{Ptr{Ptr{PetscScalar}}}}), arg1, arg2, arg3)
end

function PetscDualSpaceGetAllData(arg1, arg2, arg3)
    ccall((:PetscDualSpaceGetAllData, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscQuadrature}, Ptr{Mat}), arg1, arg2, arg3)
end

function PetscDualSpaceCreateAllDataDefault(arg1, arg2, arg3)
    ccall((:PetscDualSpaceCreateAllDataDefault, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscQuadrature}, Ptr{Mat}), arg1, arg2, arg3)
end

function PetscDualSpaceGetInteriorData(arg1, arg2, arg3)
    ccall((:PetscDualSpaceGetInteriorData, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscQuadrature}, Ptr{Mat}), arg1, arg2, arg3)
end

function PetscDualSpaceCreateInteriorDataDefault(arg1, arg2, arg3)
    ccall((:PetscDualSpaceCreateInteriorDataDefault, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscQuadrature}, Ptr{Mat}), arg1, arg2, arg3)
end

function PetscDualSpaceEqual(arg1, arg2, arg3)
    ccall((:PetscDualSpaceEqual, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscDualSpace, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscDualSpaceApplyAll(arg1, arg2, arg3)
    ccall((:PetscDualSpaceApplyAll, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function PetscDualSpaceApplyAllDefault(arg1, arg2, arg3)
    ccall((:PetscDualSpaceApplyAllDefault, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function PetscDualSpaceApplyInterior(arg1, arg2, arg3)
    ccall((:PetscDualSpaceApplyInterior, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function PetscDualSpaceApplyInteriorDefault(arg1, arg2, arg3)
    ccall((:PetscDualSpaceApplyInteriorDefault, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function PetscDualSpaceGetFormDegree(arg1, arg2)
    ccall((:PetscDualSpaceGetFormDegree, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscDualSpaceSetFormDegree(arg1, arg2)
    ccall((:PetscDualSpaceSetFormDegree, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt), arg1, arg2)
end

function PetscDualSpaceGetDeRahm(arg1, arg2)
    ccall((:PetscDualSpaceGetDeRahm, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscDualSpaceLagrangeGetContinuity(arg1, arg2)
    ccall((:PetscDualSpaceLagrangeGetContinuity, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscBool}), arg1, arg2)
end

function PetscDualSpaceLagrangeSetContinuity(arg1, arg2)
    ccall((:PetscDualSpaceLagrangeSetContinuity, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscBool), arg1, arg2)
end

function PetscDualSpaceLagrangeGetTensor(arg1, arg2)
    ccall((:PetscDualSpaceLagrangeGetTensor, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscBool}), arg1, arg2)
end

function PetscDualSpaceLagrangeSetTensor(arg1, arg2)
    ccall((:PetscDualSpaceLagrangeSetTensor, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscBool), arg1, arg2)
end

function PetscDualSpaceLagrangeGetTrimmed(arg1, arg2)
    ccall((:PetscDualSpaceLagrangeGetTrimmed, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscBool}), arg1, arg2)
end

function PetscDualSpaceLagrangeSetTrimmed(arg1, arg2)
    ccall((:PetscDualSpaceLagrangeSetTrimmed, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscBool), arg1, arg2)
end

function PetscDualSpaceLagrangeGetNodeType(arg1, arg2, arg3, arg4)
    ccall((:PetscDualSpaceLagrangeGetNodeType, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscDTNodeType}, Ptr{PetscBool}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function PetscDualSpaceLagrangeSetNodeType(arg1, arg2, arg3, arg4)
    ccall((:PetscDualSpaceLagrangeSetNodeType, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscDTNodeType, PetscBool, PetscReal), arg1, arg2, arg3, arg4)
end

function PetscDualSpaceLagrangeGetUseMoments(arg1, arg2)
    ccall((:PetscDualSpaceLagrangeGetUseMoments, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscBool}), arg1, arg2)
end

function PetscDualSpaceLagrangeSetUseMoments(arg1, arg2)
    ccall((:PetscDualSpaceLagrangeSetUseMoments, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscBool), arg1, arg2)
end

function PetscDualSpaceLagrangeGetMomentOrder(arg1, arg2)
    ccall((:PetscDualSpaceLagrangeGetMomentOrder, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscDualSpaceLagrangeSetMomentOrder(arg1, arg2)
    ccall((:PetscDualSpaceLagrangeSetMomentOrder, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt), arg1, arg2)
end

function PetscDualSpaceGetHeightSubspace(arg1, arg2, arg3)
    ccall((:PetscDualSpaceGetHeightSubspace, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt, Ptr{PetscDualSpace}), arg1, arg2, arg3)
end

function PetscDualSpaceGetPointSubspace(arg1, arg2, arg3)
    ccall((:PetscDualSpaceGetPointSubspace, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt, Ptr{PetscDualSpace}), arg1, arg2, arg3)
end

function PetscDualSpaceSimpleSetDimension(arg1, arg2)
    ccall((:PetscDualSpaceSimpleSetDimension, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt), arg1, arg2)
end

function PetscDualSpaceSimpleSetFunctional(arg1, arg2, arg3)
    ccall((:PetscDualSpaceSimpleSetFunctional, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt, PetscQuadrature), arg1, arg2, arg3)
end

function PetscDualSpaceRefinedSetCellSpaces(arg1, arg2)
    ccall((:PetscDualSpaceRefinedSetCellSpaces, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscDualSpace}), arg1, arg2)
end

function PetscSpaceCreateSubspace(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:PetscSpaceCreateSubspace, $petsc_library), PetscErrorCode, (PetscSpace, PetscDualSpace, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, PetscCopyMode, Ptr{PetscSpace}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function PetscDualSpaceSumSetNumSubspaces(arg1, arg2)
    ccall((:PetscDualSpaceSumSetNumSubspaces, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt), arg1, arg2)
end

function PetscDualSpaceSumGetNumSubspaces(arg1, arg2)
    ccall((:PetscDualSpaceSumGetNumSubspaces, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscInt}), arg1, arg2)
end

function PetscDualSpaceSumSetSubspace(arg1, arg2, arg3)
    ccall((:PetscDualSpaceSumSetSubspace, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt, PetscDualSpace), arg1, arg2, arg3)
end

function PetscDualSpaceSumGetSubspace(arg1, arg2, arg3)
    ccall((:PetscDualSpaceSumGetSubspace, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscInt, Ptr{PetscDualSpace}), arg1, arg2, arg3)
end

function PetscDualSpaceSumSetConcatenate(arg1, arg2)
    ccall((:PetscDualSpaceSumSetConcatenate, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscBool), arg1, arg2)
end

function PetscDualSpaceSumGetConcatenate(arg1, arg2)
    ccall((:PetscDualSpaceSumGetConcatenate, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscBool}), arg1, arg2)
end

function PetscDualSpaceSumSetInterleave(arg1, arg2, arg3)
    ccall((:PetscDualSpaceSumSetInterleave, $petsc_library), PetscErrorCode, (PetscDualSpace, PetscBool, PetscBool), arg1, arg2, arg3)
end

function PetscDualSpaceSumGetInterleave(arg1, arg2, arg3)
    ccall((:PetscDualSpaceSumGetInterleave, $petsc_library), PetscErrorCode, (PetscDualSpace, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscDualSpaceCreateSum(arg1, arg2, arg3, arg4)
    ccall((:PetscDualSpaceCreateSum, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscDualSpace}, PetscBool, Ptr{PetscDualSpace}), arg1, arg2, arg3, arg4)
end

function PetscFEGeomGetPoint(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscFEGeomGetPoint, $petsc_library), PetscErrorCode, (Ptr{PetscFEGeom}, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscFEGeom}), arg1, arg2, arg3, arg4, arg5)
end

function PetscFEGeomGetCellPoint(arg1, arg2, arg3, arg4)
    ccall((:PetscFEGeomGetCellPoint, $petsc_library), PetscErrorCode, (Ptr{PetscFEGeom}, PetscInt, PetscInt, Ptr{PetscFEGeom}), arg1, arg2, arg3, arg4)
end

const PetscFEType = Ptr{Cchar}

function PetscFECreate(arg1, arg2)
    ccall((:PetscFECreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscFE}), arg1, arg2)
end

function PetscFEDestroy(arg1)
    ccall((:PetscFEDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscFE},), arg1)
end

function PetscFESetType(arg1, arg2)
    ccall((:PetscFESetType, $petsc_library), PetscErrorCode, (PetscFE, PetscFEType), arg1, arg2)
end

function PetscFEGetType(arg1, arg2)
    ccall((:PetscFEGetType, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscFEType}), arg1, arg2)
end

function PetscFESetUp(arg1)
    ccall((:PetscFESetUp, $petsc_library), PetscErrorCode, (PetscFE,), arg1)
end

function PetscFESetFromOptions(arg1)
    ccall((:PetscFESetFromOptions, $petsc_library), PetscErrorCode, (PetscFE,), arg1)
end

function PetscFEViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscFEViewFromOptions, $petsc_library), PetscErrorCode, (PetscFE, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscFESetName(arg1, arg2)
    ccall((:PetscFESetName, $petsc_library), PetscErrorCode, (PetscFE, Ptr{Cchar}), arg1, arg2)
end

function PetscFECreateVector(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscFECreateVector, $petsc_library), PetscErrorCode, (PetscFE, PetscInt, PetscBool, PetscBool, Ptr{PetscFE}), arg1, arg2, arg3, arg4, arg5)
end

function PetscFEView(arg1, arg2)
    ccall((:PetscFEView, $petsc_library), PetscErrorCode, (PetscFE, PetscViewer), arg1, arg2)
end

function PetscFERegister(arg1, arg2)
    ccall((:PetscFERegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscFERegisterDestroy()
    ccall((:PetscFERegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function PetscFECreateDefault(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscFECreateDefault, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscBool, Ptr{Cchar}, PetscInt, Ptr{PetscFE}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscFECreateByCell(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscFECreateByCell, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, DMPolytopeType, Ptr{Cchar}, PetscInt, Ptr{PetscFE}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscFECreateLagrange(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscFECreateLagrange, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscBool, PetscInt, PetscInt, Ptr{PetscFE}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscFECreateLagrangeByCell(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscFECreateLagrangeByCell, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, DMPolytopeType, PetscInt, PetscInt, Ptr{PetscFE}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscFECreateFromSpaces(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscFECreateFromSpaces, $petsc_library), PetscErrorCode, (PetscSpace, PetscDualSpace, PetscQuadrature, PetscQuadrature, Ptr{PetscFE}), arg1, arg2, arg3, arg4, arg5)
end

function PetscFEGetDimension(arg1, arg2)
    ccall((:PetscFEGetDimension, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscInt}), arg1, arg2)
end

function PetscFEGetSpatialDimension(arg1, arg2)
    ccall((:PetscFEGetSpatialDimension, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscInt}), arg1, arg2)
end

function PetscFESetNumComponents(arg1, arg2)
    ccall((:PetscFESetNumComponents, $petsc_library), PetscErrorCode, (PetscFE, PetscInt), arg1, arg2)
end

function PetscFEGetNumComponents(arg1, arg2)
    ccall((:PetscFEGetNumComponents, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscInt}), arg1, arg2)
end

function PetscFEGetTileSizes(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscFEGetTileSizes, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function PetscFESetTileSizes(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscFESetTileSizes, $petsc_library), PetscErrorCode, (PetscFE, PetscInt, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4, arg5)
end

function PetscFESetBasisSpace(arg1, arg2)
    ccall((:PetscFESetBasisSpace, $petsc_library), PetscErrorCode, (PetscFE, PetscSpace), arg1, arg2)
end

function PetscFEGetBasisSpace(arg1, arg2)
    ccall((:PetscFEGetBasisSpace, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscSpace}), arg1, arg2)
end

function PetscFESetDualSpace(arg1, arg2)
    ccall((:PetscFESetDualSpace, $petsc_library), PetscErrorCode, (PetscFE, PetscDualSpace), arg1, arg2)
end

function PetscFEGetDualSpace(arg1, arg2)
    ccall((:PetscFEGetDualSpace, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscDualSpace}), arg1, arg2)
end

function PetscFESetQuadrature(arg1, arg2)
    ccall((:PetscFESetQuadrature, $petsc_library), PetscErrorCode, (PetscFE, PetscQuadrature), arg1, arg2)
end

function PetscFEGetQuadrature(arg1, arg2)
    ccall((:PetscFEGetQuadrature, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscQuadrature}), arg1, arg2)
end

function PetscFESetFaceQuadrature(arg1, arg2)
    ccall((:PetscFESetFaceQuadrature, $petsc_library), PetscErrorCode, (PetscFE, PetscQuadrature), arg1, arg2)
end

function PetscFEGetFaceQuadrature(arg1, arg2)
    ccall((:PetscFEGetFaceQuadrature, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscQuadrature}), arg1, arg2)
end

function PetscFECopyQuadrature(arg1, arg2)
    ccall((:PetscFECopyQuadrature, $petsc_library), PetscErrorCode, (PetscFE, PetscFE), arg1, arg2)
end

function PetscFEGetNumDof(arg1, arg2)
    ccall((:PetscFEGetNumDof, $petsc_library), PetscErrorCode, (PetscFE, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function PetscFERefine(arg1, arg2)
    ccall((:PetscFERefine, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscFE}), arg1, arg2)
end

function PetscFEGetHeightSubspace(arg1, arg2, arg3)
    ccall((:PetscFEGetHeightSubspace, $petsc_library), PetscErrorCode, (PetscFE, PetscInt, Ptr{PetscFE}), arg1, arg2, arg3)
end

function PetscFECompositeGetMapping(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscFECompositeGetMapping, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscInt}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}), arg1, arg2, arg3, arg4, arg5)
end

function PetscFECreateHeightTrace(arg1, arg2, arg3)
    ccall((:PetscFECreateHeightTrace, $petsc_library), PetscErrorCode, (PetscFE, PetscInt, Ptr{PetscFE}), arg1, arg2, arg3)
end

function PetscFECreatePointTrace(arg1, arg2, arg3)
    ccall((:PetscFECreatePointTrace, $petsc_library), PetscErrorCode, (PetscFE, PetscInt, Ptr{PetscFE}), arg1, arg2, arg3)
end

function PetscFEOpenCLSetRealType(arg1, arg2)
    ccall((:PetscFEOpenCLSetRealType, $petsc_library), PetscErrorCode, (PetscFE, PetscDataType), arg1, arg2)
end

function PetscFEOpenCLGetRealType(arg1, arg2)
    ccall((:PetscFEOpenCLGetRealType, $petsc_library), PetscErrorCode, (PetscFE, Ptr{PetscDataType}), arg1, arg2)
end

function DMDASetInterpolationType(arg1, arg2)
    ccall((:DMDASetInterpolationType, $petsc_library), PetscErrorCode, (DM, DMDAInterpolationType), arg1, arg2)
end

function DMDAGetInterpolationType(arg1, arg2)
    ccall((:DMDAGetInterpolationType, $petsc_library), PetscErrorCode, (DM, Ptr{DMDAInterpolationType}), arg1, arg2)
end

function DMDACreateAggregates(arg1, arg2, arg3)
    ccall((:DMDACreateAggregates, $petsc_library), PetscErrorCode, (DM, DM, Ptr{Mat}), arg1, arg2, arg3)
end

function DMDASetElementType(arg1, arg2)
    ccall((:DMDASetElementType, $petsc_library), PetscErrorCode, (DM, DMDAElementType), arg1, arg2)
end

function DMDAGetElementType(arg1, arg2)
    ccall((:DMDAGetElementType, $petsc_library), PetscErrorCode, (DM, Ptr{DMDAElementType}), arg1, arg2)
end

function DMDAGetElements(arg1, arg2, arg3, arg4)
    ccall((:DMDAGetElements, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMDARestoreElements(arg1, arg2, arg3, arg4)
    ccall((:DMDARestoreElements, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMDAGetElementsSizes(arg1, arg2, arg3, arg4)
    ccall((:DMDAGetElementsSizes, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMDAGetElementsCorners(arg1, arg2, arg3, arg4)
    ccall((:DMDAGetElementsCorners, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMDAGetSubdomainCornersIS(arg1, arg2)
    ccall((:DMDAGetSubdomainCornersIS, $petsc_library), PetscErrorCode, (DM, Ptr{IS}), arg1, arg2)
end

function DMDARestoreSubdomainCornersIS(arg1, arg2)
    ccall((:DMDARestoreSubdomainCornersIS, $petsc_library), PetscErrorCode, (DM, Ptr{IS}), arg1, arg2)
end

function DMDACreate(arg1, arg2)
    ccall((:DMDACreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{DM}), arg1, arg2)
end

function DMDASetSizes(arg1, arg2, arg3, arg4)
    ccall((:DMDASetSizes, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMDACreate1d(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMDACreate1d, $petsc_library), PetscErrorCode, (MPI_Comm, DMBoundaryType, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMDACreate2d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
    ccall((:DMDACreate2d, $petsc_library), PetscErrorCode, (MPI_Comm, DMBoundaryType, DMBoundaryType, DMDAStencilType, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
end

function DMDACreate3d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
    ccall((:DMDACreate3d, $petsc_library), PetscErrorCode, (MPI_Comm, DMBoundaryType, DMBoundaryType, DMBoundaryType, DMDAStencilType, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
end

function DMDAGlobalToNaturalBegin(arg1, arg2, arg3, arg4)
    ccall((:DMDAGlobalToNaturalBegin, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMDAGlobalToNaturalEnd(arg1, arg2, arg3, arg4)
    ccall((:DMDAGlobalToNaturalEnd, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMDANaturalToGlobalBegin(arg1, arg2, arg3, arg4)
    ccall((:DMDANaturalToGlobalBegin, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMDANaturalToGlobalEnd(arg1, arg2, arg3, arg4)
    ccall((:DMDANaturalToGlobalEnd, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMDALocalToLocalBegin(dm, g, mode, l)
    ccall((:DMDALocalToLocalBegin, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), dm, g, mode, l)
end

function DMDALocalToLocalEnd(dm, g, mode, l)
    ccall((:DMDALocalToLocalEnd, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), dm, g, mode, l)
end

function DMDACreateNaturalVector(arg1, arg2)
    ccall((:DMDACreateNaturalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMDAGetCorners(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMDAGetCorners, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMDAGetGhostCorners(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMDAGetGhostCorners, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMDAGetInfo(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:DMDAGetInfo, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}, Ptr{DMDAStencilType}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function DMDAGetProcessorSubset(arg1, arg2, arg3, arg4)
    ccall((:DMDAGetProcessorSubset, $petsc_library), PetscErrorCode, (DM, DMDirection, PetscInt, Ptr{MPI_Comm}), arg1, arg2, arg3, arg4)
end

function DMDAGetProcessorSubsets(arg1, arg2, arg3)
    ccall((:DMDAGetProcessorSubsets, $petsc_library), PetscErrorCode, (DM, DMDirection, Ptr{MPI_Comm}), arg1, arg2, arg3)
end

function DMDAGetRay(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMDAGetRay, $petsc_library), PetscErrorCode, (DM, DMDirection, PetscInt, Ptr{Vec}, Ptr{VecScatter}), arg1, arg2, arg3, arg4, arg5)
end

function DMDAGlobalToNaturalAllCreate(arg1, arg2)
    ccall((:DMDAGlobalToNaturalAllCreate, $petsc_library), PetscErrorCode, (DM, Ptr{VecScatter}), arg1, arg2)
end

function DMDANaturalAllToGlobalCreate(arg1, arg2)
    ccall((:DMDANaturalAllToGlobalCreate, $petsc_library), PetscErrorCode, (DM, Ptr{VecScatter}), arg1, arg2)
end

function DMDAGetScatter(arg1, arg2, arg3)
    ccall((:DMDAGetScatter, $petsc_library), PetscErrorCode, (DM, Ptr{VecScatter}, Ptr{VecScatter}), arg1, arg2, arg3)
end

function DMDAGetNeighbors(arg1, arg2)
    ccall((:DMDAGetNeighbors, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{PetscMPIInt}}), arg1, arg2)
end

function DMDASetAOType(arg1, arg2)
    ccall((:DMDASetAOType, $petsc_library), PetscErrorCode, (DM, AOType), arg1, arg2)
end

function DMDAGetAO(arg1, arg2)
    ccall((:DMDAGetAO, $petsc_library), PetscErrorCode, (DM, Ptr{AO}), arg1, arg2)
end

function DMDASetUniformCoordinates(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMDASetUniformCoordinates, $petsc_library), PetscErrorCode, (DM, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMDASetGLLCoordinates(arg1, arg2, arg3)
    ccall((:DMDASetGLLCoordinates, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMDAGetCoordinateArray(arg1, arg2)
    ccall((:DMDAGetCoordinateArray, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMDARestoreCoordinateArray(arg1, arg2)
    ccall((:DMDARestoreCoordinateArray, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMDAGetLogicalCoordinate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:DMDAGetLogicalCoordinate, $petsc_library), PetscErrorCode, (DM, PetscScalar, PetscScalar, PetscScalar, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function DMDAMapCoordsToPeriodicDomain(arg1, arg2, arg3)
    ccall((:DMDAMapCoordsToPeriodicDomain, $petsc_library), PetscErrorCode, (DM, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function DMDACreateCompatibleDMDA(arg1, arg2, arg3)
    ccall((:DMDACreateCompatibleDMDA, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DM}), arg1, arg2, arg3)
end

function DMDAGetReducedDMDA(arg1, arg2, arg3)
    ccall((:DMDAGetReducedDMDA, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DM}), arg1, arg2, arg3)
end

function DMDASetFieldName(arg1, arg2, arg3)
    ccall((:DMDASetFieldName, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Cchar}), arg1, arg2, arg3)
end

function DMDAGetFieldName(arg1, arg2, arg3)
    ccall((:DMDAGetFieldName, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Ptr{Cchar}}), arg1, arg2, arg3)
end

function DMDASetFieldNames(arg1, arg2)
    ccall((:DMDASetFieldNames, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function DMDAGetFieldNames(arg1, arg2)
    ccall((:DMDAGetFieldNames, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Ptr{Cchar}}}), arg1, arg2)
end

function DMDASetCoordinateName(arg1, arg2, arg3)
    ccall((:DMDASetCoordinateName, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Cchar}), arg1, arg2, arg3)
end

function DMDAGetCoordinateName(arg1, arg2, arg3)
    ccall((:DMDAGetCoordinateName, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Ptr{Cchar}}), arg1, arg2, arg3)
end

function DMDASetBoundaryType(arg1, arg2, arg3, arg4)
    ccall((:DMDASetBoundaryType, $petsc_library), PetscErrorCode, (DM, DMBoundaryType, DMBoundaryType, DMBoundaryType), arg1, arg2, arg3, arg4)
end

function DMDAGetBoundaryType(arg1, arg2, arg3, arg4)
    ccall((:DMDAGetBoundaryType, $petsc_library), PetscErrorCode, (DM, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}), arg1, arg2, arg3, arg4)
end

function DMDASetDof(arg1, arg2)
    ccall((:DMDASetDof, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMDAGetDof(arg1, arg2)
    ccall((:DMDAGetDof, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMDASetOverlap(arg1, arg2, arg3, arg4)
    ccall((:DMDASetOverlap, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMDAGetOverlap(arg1, arg2, arg3, arg4)
    ccall((:DMDAGetOverlap, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMDASetNumLocalSubDomains(arg1, arg2)
    ccall((:DMDASetNumLocalSubDomains, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMDAGetNumLocalSubDomains(arg1, arg2)
    ccall((:DMDAGetNumLocalSubDomains, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMDAGetOffset(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMDAGetOffset, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMDASetOffset(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMDASetOffset, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMDAGetNonOverlappingRegion(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMDAGetNonOverlappingRegion, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMDASetNonOverlappingRegion(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMDASetNonOverlappingRegion, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMDASetStencilWidth(arg1, arg2)
    ccall((:DMDASetStencilWidth, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMDAGetStencilWidth(arg1, arg2)
    ccall((:DMDAGetStencilWidth, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMDAMapMatStencilToGlobal(arg1, arg2, arg3, arg4)
    ccall((:DMDAMapMatStencilToGlobal, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{MatStencil}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMDASetOwnershipRanges(arg1, arg2, arg3, arg4)
    ccall((:DMDASetOwnershipRanges, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMDAGetOwnershipRanges(arg1, arg2, arg3, arg4)
    ccall((:DMDAGetOwnershipRanges, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMDASetNumProcs(arg1, arg2, arg3, arg4)
    ccall((:DMDASetNumProcs, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMDASetStencilType(arg1, arg2)
    ccall((:DMDASetStencilType, $petsc_library), PetscErrorCode, (DM, DMDAStencilType), arg1, arg2)
end

function DMDAGetStencilType(arg1, arg2)
    ccall((:DMDAGetStencilType, $petsc_library), PetscErrorCode, (DM, Ptr{DMDAStencilType}), arg1, arg2)
end

function DMDAVecGetArray(arg1, arg2, arg3)
    ccall((:DMDAVecGetArray, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecRestoreArray(arg1, arg2, arg3)
    ccall((:DMDAVecRestoreArray, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecGetArrayWrite(arg1, arg2, arg3)
    ccall((:DMDAVecGetArrayWrite, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecRestoreArrayWrite(arg1, arg2, arg3)
    ccall((:DMDAVecRestoreArrayWrite, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecGetArrayDOF(arg1, arg2, arg3)
    ccall((:DMDAVecGetArrayDOF, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecRestoreArrayDOF(arg1, arg2, arg3)
    ccall((:DMDAVecRestoreArrayDOF, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecGetArrayRead(arg1, arg2, arg3)
    ccall((:DMDAVecGetArrayRead, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecRestoreArrayRead(arg1, arg2, arg3)
    ccall((:DMDAVecRestoreArrayRead, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecGetArrayDOFRead(arg1, arg2, arg3)
    ccall((:DMDAVecGetArrayDOFRead, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecRestoreArrayDOFRead(arg1, arg2, arg3)
    ccall((:DMDAVecRestoreArrayDOFRead, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecGetArrayDOFWrite(arg1, arg2, arg3)
    ccall((:DMDAVecGetArrayDOFWrite, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDAVecRestoreArrayDOFWrite(arg1, arg2, arg3)
    ccall((:DMDAVecRestoreArrayDOFWrite, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDACreatePatchIS(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMDACreatePatchIS, $petsc_library), PetscErrorCode, (DM, Ptr{MatStencil}, Ptr{MatStencil}, Ptr{IS}, PetscBool), arg1, arg2, arg3, arg4, arg5)
end

function MatRegisterDAAD()
    ccall((:MatRegisterDAAD, $petsc_library), PetscErrorCode, ())
end

function MatCreateSeqUSFFT(arg1, arg2, arg3)
    ccall((:MatCreateSeqUSFFT, $petsc_library), PetscErrorCode, (Vec, DM, Ptr{Mat}), arg1, arg2, arg3)
end

function DMDASetGetMatrix(arg1, arg2)
    ccall((:DMDASetGetMatrix, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMDASetBlockFills(arg1, arg2, arg3)
    ccall((:DMDASetBlockFills, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMDASetBlockFillsSparse(arg1, arg2, arg3)
    ccall((:DMDASetBlockFillsSparse, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMDASetRefinementFactor(arg1, arg2, arg3, arg4)
    ccall((:DMDASetRefinementFactor, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMDAGetRefinementFactor(arg1, arg2, arg3, arg4)
    ccall((:DMDAGetRefinementFactor, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMDAGetArray(arg1, arg2, arg3)
    ccall((:DMDAGetArray, $petsc_library), PetscErrorCode, (DM, PetscBool, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDARestoreArray(arg1, arg2, arg3)
    ccall((:DMDARestoreArray, $petsc_library), PetscErrorCode, (DM, PetscBool, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDACreatePF(arg1, arg2)
    ccall((:DMDACreatePF, $petsc_library), PetscErrorCode, (DM, Ptr{PF}), arg1, arg2)
end

function DMDAGetNumCells(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMDAGetNumCells, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function DMDAGetCellPoint(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMDAGetCellPoint, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function DMDAGetNumVertices(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMDAGetNumVertices, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function DMDAGetNumFaces(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMDAGetNumFaces, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMDAGetHeightStratum(arg1, arg2, arg3, arg4)
    ccall((:DMDAGetHeightStratum, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMDAGetDepthStratum(arg1, arg2, arg3, arg4)
    ccall((:DMDAGetDepthStratum, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMDAConvertToCell(arg1, arg2, arg3)
    ccall((:DMDAConvertToCell, $petsc_library), PetscErrorCode, (DM, MatStencil, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMDASetVertexCoordinates(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMDASetVertexCoordinates, $petsc_library), PetscErrorCode, (DM, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMDASetPreallocationCenterDimension(arg1, arg2)
    ccall((:DMDASetPreallocationCenterDimension, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMDAGetPreallocationCenterDimension(arg1, arg2)
    ccall((:DMDAGetPreallocationCenterDimension, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMCompositeCreate(arg1, arg2)
    ccall((:DMCompositeCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{DM}), arg1, arg2)
end

function DMCompositeAddDM(arg1, arg2)
    ccall((:DMCompositeAddDM, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMCompositeSetCoupling(arg1, arg2)
    ccall((:DMCompositeSetCoupling, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMCompositeAddVecScatter(arg1, arg2)
    ccall((:DMCompositeAddVecScatter, $petsc_library), PetscErrorCode, (DM, VecScatter), arg1, arg2)
end

function DMCompositeScatterArray(arg1, arg2, arg3)
    ccall((:DMCompositeScatterArray, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Vec}), arg1, arg2, arg3)
end

function DMCompositeGatherArray(arg1, arg2, arg3, arg4)
    ccall((:DMCompositeGatherArray, $petsc_library), PetscErrorCode, (DM, InsertMode, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function DMCompositeGetNumberDM(arg1, arg2)
    ccall((:DMCompositeGetNumberDM, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMCompositeGetAccessArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMCompositeGetAccessArray, $petsc_library), PetscErrorCode, (DM, Vec, PetscInt, Ptr{PetscInt}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function DMCompositeRestoreAccessArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMCompositeRestoreAccessArray, $petsc_library), PetscErrorCode, (DM, Vec, PetscInt, Ptr{PetscInt}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function DMCompositeGetLocalAccessArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMCompositeGetLocalAccessArray, $petsc_library), PetscErrorCode, (DM, Vec, PetscInt, Ptr{PetscInt}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function DMCompositeRestoreLocalAccessArray(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMCompositeRestoreLocalAccessArray, $petsc_library), PetscErrorCode, (DM, Vec, PetscInt, Ptr{PetscInt}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function DMCompositeGetEntriesArray(arg1, arg2)
    ccall((:DMCompositeGetEntriesArray, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMCompositeGetGlobalISs(arg1, arg2)
    ccall((:DMCompositeGetGlobalISs, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{IS}}), arg1, arg2)
end

function DMCompositeGetLocalISs(arg1, arg2)
    ccall((:DMCompositeGetLocalISs, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{IS}}), arg1, arg2)
end

function DMCompositeGetISLocalToGlobalMappings(arg1, arg2)
    ccall((:DMCompositeGetISLocalToGlobalMappings, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{ISLocalToGlobalMapping}}), arg1, arg2)
end

function DMPatchCreate(arg1, arg2)
    ccall((:DMPatchCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{DM}), arg1, arg2)
end

function DMPatchZoom(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPatchZoom, $petsc_library), PetscErrorCode, (DM, MatStencil, MatStencil, MPI_Comm, Ptr{DM}, Ptr{PetscSF}, Ptr{PetscSF}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPatchSolve(arg1)
    ccall((:DMPatchSolve, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPatchGetPatchSize(arg1, arg2)
    ccall((:DMPatchGetPatchSize, $petsc_library), PetscErrorCode, (DM, Ptr{MatStencil}), arg1, arg2)
end

function DMPatchSetPatchSize(arg1, arg2)
    ccall((:DMPatchSetPatchSize, $petsc_library), PetscErrorCode, (DM, MatStencil), arg1, arg2)
end

function DMPatchGetCommSize(arg1, arg2)
    ccall((:DMPatchGetCommSize, $petsc_library), PetscErrorCode, (DM, Ptr{MatStencil}), arg1, arg2)
end

function DMPatchSetCommSize(arg1, arg2)
    ccall((:DMPatchSetCommSize, $petsc_library), PetscErrorCode, (DM, MatStencil), arg1, arg2)
end

function DMPatchGetCoarse(arg1, arg2)
    ccall((:DMPatchGetCoarse, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMPatchCreateGrid(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPatchCreateGrid, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, MatStencil, MatStencil, MatStencil, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6)
end

mutable struct _p_PetscPartitioner end

const PetscPartitioner = Ptr{_p_PetscPartitioner}

function PetscPartitionerInitializePackage()
    ccall((:PetscPartitionerInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscPartitionerFinalizePackage()
    ccall((:PetscPartitionerFinalizePackage, $petsc_library), PetscErrorCode, ())
end

const PetscPartitionerType = Ptr{Cchar}

function PetscPartitionerRegister(arg1, arg2)
    ccall((:PetscPartitionerRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscPartitionerCreate(arg1, arg2)
    ccall((:PetscPartitionerCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscPartitioner}), arg1, arg2)
end

function PetscPartitionerDestroy(arg1)
    ccall((:PetscPartitionerDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscPartitioner},), arg1)
end

function PetscPartitionerSetType(arg1, arg2)
    ccall((:PetscPartitionerSetType, $petsc_library), PetscErrorCode, (PetscPartitioner, PetscPartitionerType), arg1, arg2)
end

function PetscPartitionerGetType(arg1, arg2)
    ccall((:PetscPartitionerGetType, $petsc_library), PetscErrorCode, (PetscPartitioner, Ptr{PetscPartitionerType}), arg1, arg2)
end

function PetscPartitionerSetUp(arg1)
    ccall((:PetscPartitionerSetUp, $petsc_library), PetscErrorCode, (PetscPartitioner,), arg1)
end

function PetscPartitionerReset(arg1)
    ccall((:PetscPartitionerReset, $petsc_library), PetscErrorCode, (PetscPartitioner,), arg1)
end

function PetscPartitionerSetFromOptions(arg1)
    ccall((:PetscPartitionerSetFromOptions, $petsc_library), PetscErrorCode, (PetscPartitioner,), arg1)
end

function PetscPartitionerViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscPartitionerViewFromOptions, $petsc_library), PetscErrorCode, (PetscPartitioner, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscPartitionerView(arg1, arg2)
    ccall((:PetscPartitionerView, $petsc_library), PetscErrorCode, (PetscPartitioner, PetscViewer), arg1, arg2)
end

function PetscPartitionerPartition(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:PetscPartitionerPartition, $petsc_library), PetscErrorCode, (PetscPartitioner, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, PetscSection, PetscSection, PetscSection, PetscSection, Ptr{IS}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function PetscPartitionerShellSetPartition(arg1, arg2, arg3, arg4)
    ccall((:PetscPartitionerShellSetPartition, $petsc_library), PetscErrorCode, (PetscPartitioner, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscPartitionerShellSetRandom(arg1, arg2)
    ccall((:PetscPartitionerShellSetRandom, $petsc_library), PetscErrorCode, (PetscPartitioner, PetscBool), arg1, arg2)
end

function PetscPartitionerShellGetRandom(arg1, arg2)
    ccall((:PetscPartitionerShellGetRandom, $petsc_library), PetscErrorCode, (PetscPartitioner, Ptr{PetscBool}), arg1, arg2)
end

function PetscPartitionerMatPartitioningGetMatPartitioning(arg1, arg2)
    ccall((:PetscPartitionerMatPartitioningGetMatPartitioning, $petsc_library), PetscErrorCode, (PetscPartitioner, Ptr{MatPartitioning}), arg1, arg2)
end

@enum DMPlexShape::UInt32 begin
    DM_SHAPE_BOX = 0
    DM_SHAPE_BOX_SURFACE = 1
    DM_SHAPE_BALL = 2
    DM_SHAPE_SPHERE = 3
    DM_SHAPE_CYLINDER = 4
    DM_SHAPE_SCHWARZ_P = 5
    DM_SHAPE_GYROID = 6
    DM_SHAPE_DOUBLET = 7
    DM_SHAPE_ANNULUS = 8
    DM_SHAPE_HYPERCUBIC = 9
    DM_SHAPE_ZBOX = 10
    DM_SHAPE_UNKNOWN = 11
end

@enum DMPlexCoordMap::UInt32 begin
    DM_COORD_MAP_NONE = 0
    DM_COORD_MAP_SHEAR = 1
    DM_COORD_MAP_FLARE = 2
    DM_COORD_MAP_ANNULUS = 3
    DM_COORD_MAP_SHELL = 4
    DM_COORD_MAP_UNKNOWN = 5
end

@enum DMPlexCSRAlgorithm::UInt32 begin
    DM_PLEX_CSR_MAT = 0
    DM_PLEX_CSR_GRAPH = 1
    DM_PLEX_CSR_OVERLAP = 2
end

mutable struct _p_DMPlexPointQueue
    size::PetscInt
    points::Ptr{PetscInt}
    front::PetscInt
    back::PetscInt
    num::PetscInt
    _p_DMPlexPointQueue() = new()
end

const DMPlexPointQueue = Ptr{_p_DMPlexPointQueue}

mutable struct _p_PetscLimiter end

const PetscLimiter = Ptr{_p_PetscLimiter}

mutable struct _p_PetscFV end

const PetscFV = Ptr{_p_PetscFV}

const PetscLimiterType = Ptr{Cchar}

function PetscLimiterCreate(arg1, arg2)
    ccall((:PetscLimiterCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscLimiter}), arg1, arg2)
end

function PetscLimiterDestroy(arg1)
    ccall((:PetscLimiterDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscLimiter},), arg1)
end

function PetscLimiterSetType(arg1, arg2)
    ccall((:PetscLimiterSetType, $petsc_library), PetscErrorCode, (PetscLimiter, PetscLimiterType), arg1, arg2)
end

function PetscLimiterGetType(arg1, arg2)
    ccall((:PetscLimiterGetType, $petsc_library), PetscErrorCode, (PetscLimiter, Ptr{PetscLimiterType}), arg1, arg2)
end

function PetscLimiterSetUp(arg1)
    ccall((:PetscLimiterSetUp, $petsc_library), PetscErrorCode, (PetscLimiter,), arg1)
end

function PetscLimiterSetFromOptions(arg1)
    ccall((:PetscLimiterSetFromOptions, $petsc_library), PetscErrorCode, (PetscLimiter,), arg1)
end

function PetscLimiterViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscLimiterViewFromOptions, $petsc_library), PetscErrorCode, (PetscLimiter, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscLimiterView(arg1, arg2)
    ccall((:PetscLimiterView, $petsc_library), PetscErrorCode, (PetscLimiter, PetscViewer), arg1, arg2)
end

function PetscLimiterRegister(arg1, arg2)
    ccall((:PetscLimiterRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscLimiterRegisterDestroy()
    ccall((:PetscLimiterRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function PetscLimiterLimit(arg1, arg2, arg3)
    ccall((:PetscLimiterLimit, $petsc_library), PetscErrorCode, (PetscLimiter, PetscReal, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscFVInitializePackage()
    ccall((:PetscFVInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscFVFinalizePackage()
    ccall((:PetscFVFinalizePackage, $petsc_library), PetscErrorCode, ())
end

const PetscFVType = Ptr{Cchar}

function PetscFVCreate(arg1, arg2)
    ccall((:PetscFVCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscFV}), arg1, arg2)
end

function PetscFVDestroy(arg1)
    ccall((:PetscFVDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscFV},), arg1)
end

function PetscFVSetType(arg1, arg2)
    ccall((:PetscFVSetType, $petsc_library), PetscErrorCode, (PetscFV, PetscFVType), arg1, arg2)
end

function PetscFVGetType(arg1, arg2)
    ccall((:PetscFVGetType, $petsc_library), PetscErrorCode, (PetscFV, Ptr{PetscFVType}), arg1, arg2)
end

function PetscFVSetUp(arg1)
    ccall((:PetscFVSetUp, $petsc_library), PetscErrorCode, (PetscFV,), arg1)
end

function PetscFVSetFromOptions(arg1)
    ccall((:PetscFVSetFromOptions, $petsc_library), PetscErrorCode, (PetscFV,), arg1)
end

function PetscFVViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscFVViewFromOptions, $petsc_library), PetscErrorCode, (PetscFV, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscFVView(arg1, arg2)
    ccall((:PetscFVView, $petsc_library), PetscErrorCode, (PetscFV, PetscViewer), arg1, arg2)
end

function PetscFVRegister(arg1, arg2)
    ccall((:PetscFVRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscFVRegisterDestroy()
    ccall((:PetscFVRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function PetscFVSetComponentName(arg1, arg2, arg3)
    ccall((:PetscFVSetComponentName, $petsc_library), PetscErrorCode, (PetscFV, PetscInt, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscFVGetComponentName(arg1, arg2, arg3)
    ccall((:PetscFVGetComponentName, $petsc_library), PetscErrorCode, (PetscFV, PetscInt, Ptr{Ptr{Cchar}}), arg1, arg2, arg3)
end

function PetscFVSetLimiter(arg1, arg2)
    ccall((:PetscFVSetLimiter, $petsc_library), PetscErrorCode, (PetscFV, PetscLimiter), arg1, arg2)
end

function PetscFVGetLimiter(arg1, arg2)
    ccall((:PetscFVGetLimiter, $petsc_library), PetscErrorCode, (PetscFV, Ptr{PetscLimiter}), arg1, arg2)
end

function PetscFVSetNumComponents(arg1, arg2)
    ccall((:PetscFVSetNumComponents, $petsc_library), PetscErrorCode, (PetscFV, PetscInt), arg1, arg2)
end

function PetscFVGetNumComponents(arg1, arg2)
    ccall((:PetscFVGetNumComponents, $petsc_library), PetscErrorCode, (PetscFV, Ptr{PetscInt}), arg1, arg2)
end

function PetscFVSetSpatialDimension(arg1, arg2)
    ccall((:PetscFVSetSpatialDimension, $petsc_library), PetscErrorCode, (PetscFV, PetscInt), arg1, arg2)
end

function PetscFVGetSpatialDimension(arg1, arg2)
    ccall((:PetscFVGetSpatialDimension, $petsc_library), PetscErrorCode, (PetscFV, Ptr{PetscInt}), arg1, arg2)
end

function PetscFVSetComputeGradients(arg1, arg2)
    ccall((:PetscFVSetComputeGradients, $petsc_library), PetscErrorCode, (PetscFV, PetscBool), arg1, arg2)
end

function PetscFVGetComputeGradients(arg1, arg2)
    ccall((:PetscFVGetComputeGradients, $petsc_library), PetscErrorCode, (PetscFV, Ptr{PetscBool}), arg1, arg2)
end

function PetscFVSetQuadrature(arg1, arg2)
    ccall((:PetscFVSetQuadrature, $petsc_library), PetscErrorCode, (PetscFV, PetscQuadrature), arg1, arg2)
end

function PetscFVGetQuadrature(arg1, arg2)
    ccall((:PetscFVGetQuadrature, $petsc_library), PetscErrorCode, (PetscFV, Ptr{PetscQuadrature}), arg1, arg2)
end

function PetscFVSetDualSpace(arg1, arg2)
    ccall((:PetscFVSetDualSpace, $petsc_library), PetscErrorCode, (PetscFV, PetscDualSpace), arg1, arg2)
end

function PetscFVGetDualSpace(arg1, arg2)
    ccall((:PetscFVGetDualSpace, $petsc_library), PetscErrorCode, (PetscFV, Ptr{PetscDualSpace}), arg1, arg2)
end

function PetscFVCreateDualSpace(arg1, arg2)
    ccall((:PetscFVCreateDualSpace, $petsc_library), PetscErrorCode, (PetscFV, DMPolytopeType), arg1, arg2)
end

function PetscFVClone(arg1, arg2)
    ccall((:PetscFVClone, $petsc_library), PetscErrorCode, (PetscFV, Ptr{PetscFV}), arg1, arg2)
end

function PetscFVRefine(arg1, arg2)
    ccall((:PetscFVRefine, $petsc_library), PetscErrorCode, (PetscFV, Ptr{PetscFV}), arg1, arg2)
end

function PetscFVComputeGradient(arg1, arg2, arg3, arg4)
    ccall((:PetscFVComputeGradient, $petsc_library), PetscErrorCode, (PetscFV, PetscInt, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4)
end

function PetscFVLeastSquaresSetMaxFaces(arg1, arg2)
    ccall((:PetscFVLeastSquaresSetMaxFaces, $petsc_library), PetscErrorCode, (PetscFV, PetscInt), arg1, arg2)
end

function DMFieldInitializePackage()
    ccall((:DMFieldInitializePackage, $petsc_library), PetscErrorCode, ())
end

function DMFieldFinalizePackage()
    ccall((:DMFieldFinalizePackage, $petsc_library), PetscErrorCode, ())
end

const DMFieldType = Ptr{Cchar}

function DMFieldSetType(arg1, arg2)
    ccall((:DMFieldSetType, $petsc_library), PetscErrorCode, (DMField, DMFieldType), arg1, arg2)
end

function DMFieldGetType(arg1, arg2)
    ccall((:DMFieldGetType, $petsc_library), PetscErrorCode, (DMField, Ptr{DMFieldType}), arg1, arg2)
end

function DMFieldRegister(arg1, arg2)
    ccall((:DMFieldRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

@enum DMFieldContinuity::UInt32 begin
    DMFIELD_VERTEX = 0
    DMFIELD_EDGE = 1
    DMFIELD_FACET = 2
    DMFIELD_CELL = 3
end

function DMFieldDestroy(arg1)
    ccall((:DMFieldDestroy, $petsc_library), PetscErrorCode, (Ptr{DMField},), arg1)
end

function DMFieldView(arg1, arg2)
    ccall((:DMFieldView, $petsc_library), PetscErrorCode, (DMField, PetscViewer), arg1, arg2)
end

function DMFieldGetDM(arg1, arg2)
    ccall((:DMFieldGetDM, $petsc_library), PetscErrorCode, (DMField, Ptr{DM}), arg1, arg2)
end

function DMFieldGetNumComponents(arg1, arg2)
    ccall((:DMFieldGetNumComponents, $petsc_library), PetscErrorCode, (DMField, Ptr{PetscInt}), arg1, arg2)
end

function DMFieldEvaluate(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMFieldEvaluate, $petsc_library), PetscErrorCode, (DMField, Vec, PetscDataType, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMFieldEvaluateFE(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMFieldEvaluateFE, $petsc_library), PetscErrorCode, (DMField, IS, PetscQuadrature, PetscDataType, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMFieldEvaluateFV(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMFieldEvaluateFV, $petsc_library), PetscErrorCode, (DMField, IS, PetscDataType, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMFieldCreateDefaultQuadrature(arg1, arg2, arg3)
    ccall((:DMFieldCreateDefaultQuadrature, $petsc_library), PetscErrorCode, (DMField, IS, Ptr{PetscQuadrature}), arg1, arg2, arg3)
end

function DMFieldGetDegree(arg1, arg2, arg3, arg4)
    ccall((:DMFieldGetDegree, $petsc_library), PetscErrorCode, (DMField, IS, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMFieldCreateDA(arg1, arg2, arg3, arg4)
    ccall((:DMFieldCreateDA, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscScalar}, Ptr{DMField}), arg1, arg2, arg3, arg4)
end

function DMFieldCreateDS(arg1, arg2, arg3, arg4)
    ccall((:DMFieldCreateDS, $petsc_library), PetscErrorCode, (DM, PetscInt, Vec, Ptr{DMField}), arg1, arg2, arg3, arg4)
end

function DMFieldCreateDSWithDG(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMFieldCreateDSWithDG, $petsc_library), PetscErrorCode, (DM, DM, PetscInt, Vec, Vec, Ptr{DMField}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMFieldCreateShell(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMFieldCreateShell, $petsc_library), PetscErrorCode, (DM, PetscInt, DMFieldContinuity, Ptr{Cvoid}, Ptr{DMField}), arg1, arg2, arg3, arg4, arg5)
end

function DMFieldShellSetDestroy(arg1, arg2)
    ccall((:DMFieldShellSetDestroy, $petsc_library), PetscErrorCode, (DMField, Ptr{Cvoid}), arg1, arg2)
end

function DMFieldShellGetContext(arg1, arg2)
    ccall((:DMFieldShellGetContext, $petsc_library), PetscErrorCode, (DMField, Ptr{Cvoid}), arg1, arg2)
end

function DMFieldShellSetEvaluate(arg1, arg2)
    ccall((:DMFieldShellSetEvaluate, $petsc_library), PetscErrorCode, (DMField, Ptr{Cvoid}), arg1, arg2)
end

function DMFieldShellSetEvaluateFE(arg1, arg2)
    ccall((:DMFieldShellSetEvaluateFE, $petsc_library), PetscErrorCode, (DMField, Ptr{Cvoid}), arg1, arg2)
end

function DMFieldShellEvaluateFEDefault(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMFieldShellEvaluateFEDefault, $petsc_library), PetscErrorCode, (DMField, IS, PetscQuadrature, PetscDataType, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMFieldShellSetEvaluateFV(arg1, arg2)
    ccall((:DMFieldShellSetEvaluateFV, $petsc_library), PetscErrorCode, (DMField, Ptr{Cvoid}), arg1, arg2)
end

function DMFieldShellEvaluateFVDefault(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMFieldShellEvaluateFVDefault, $petsc_library), PetscErrorCode, (DMField, IS, PetscDataType, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMFieldShellSetGetDegree(arg1, arg2)
    ccall((:DMFieldShellSetGetDegree, $petsc_library), PetscErrorCode, (DMField, Ptr{Cvoid}), arg1, arg2)
end

function DMFieldShellSetCreateDefaultQuadrature(arg1, arg2)
    ccall((:DMFieldShellSetCreateDefaultQuadrature, $petsc_library), PetscErrorCode, (DMField, Ptr{Cvoid}), arg1, arg2)
end

function PetscPartitionerDMPlexPartition(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscPartitionerDMPlexPartition, $petsc_library), PetscErrorCode, (PetscPartitioner, DM, PetscSection, PetscSection, Ptr{IS}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexBuildFromCellList(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexBuildFromCellList, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexBuildFromCellListParallel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexBuildFromCellListParallel, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscSF}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexBuildCoordinatesFromCellList(arg1, arg2, arg3)
    ccall((:DMPlexBuildCoordinatesFromCellList, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMPlexBuildCoordinatesFromCellListParallel(arg1, arg2, arg3, arg4)
    ccall((:DMPlexBuildCoordinatesFromCellListParallel, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscSF, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function DMPlexCreate(arg1, arg2)
    ccall((:DMPlexCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{DM}), arg1, arg2)
end

function DMPlexCreateCohesiveSubmesh(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexCreateCohesiveSubmesh, $petsc_library), PetscErrorCode, (DM, PetscBool, Ptr{Cchar}, PetscInt, Ptr{DM}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexCreateFromCellListPetsc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:DMPlexCreateFromCellListPetsc, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscBool, Ptr{PetscInt}, PetscInt, Ptr{PetscReal}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function DMPlexCreateFromCellListParallelPetsc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
    ccall((:DMPlexCreateFromCellListParallelPetsc, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscBool, Ptr{PetscInt}, PetscInt, Ptr{PetscReal}, Ptr{PetscSF}, Ptr{Ptr{PetscInt}}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
end

function DMPlexCreateFromDAG(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexCreateFromDAG, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexCreateReferenceCell(arg1, arg2, arg3)
    ccall((:DMPlexCreateReferenceCell, $petsc_library), PetscErrorCode, (MPI_Comm, DMPolytopeType, Ptr{DM}), arg1, arg2, arg3)
end

function DMPlexSetOptionsPrefix(arg1, arg2)
    ccall((:DMPlexSetOptionsPrefix, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}), arg1, arg2)
end

function DMPlexGetChart(arg1, arg2, arg3)
    ccall((:DMPlexGetChart, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexSetChart(arg1, arg2, arg3)
    ccall((:DMPlexSetChart, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt), arg1, arg2, arg3)
end

function DMPlexGetConeSize(arg1, arg2, arg3)
    ccall((:DMPlexGetConeSize, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexSetConeSize(arg1, arg2, arg3)
    ccall((:DMPlexSetConeSize, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt), arg1, arg2, arg3)
end

function DMPlexGetCone(arg1, arg2, arg3)
    ccall((:DMPlexGetCone, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function DMPlexGetConeTuple(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetConeTuple, $petsc_library), PetscErrorCode, (DM, IS, Ptr{PetscSection}, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function DMPlexGetConeRecursive(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexGetConeRecursive, $petsc_library), PetscErrorCode, (DM, IS, Ptr{PetscInt}, Ptr{Ptr{IS}}, Ptr{Ptr{PetscSection}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexRestoreConeRecursive(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexRestoreConeRecursive, $petsc_library), PetscErrorCode, (DM, IS, Ptr{PetscInt}, Ptr{Ptr{IS}}, Ptr{Ptr{PetscSection}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetConeRecursiveVertices(arg1, arg2, arg3)
    ccall((:DMPlexGetConeRecursiveVertices, $petsc_library), PetscErrorCode, (DM, IS, Ptr{IS}), arg1, arg2, arg3)
end

function DMPlexGetOrientedCone(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetOrientedCone, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMPlexRestoreOrientedCone(arg1, arg2, arg3, arg4)
    ccall((:DMPlexRestoreOrientedCone, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMPlexSetCone(arg1, arg2, arg3)
    ccall((:DMPlexSetCone, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexInsertCone(arg1, arg2, arg3, arg4)
    ccall((:DMPlexInsertCone, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMPlexInsertConeOrientation(arg1, arg2, arg3, arg4)
    ccall((:DMPlexInsertConeOrientation, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMPlexGetConeOrientation(arg1, arg2, arg3)
    ccall((:DMPlexGetConeOrientation, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function DMPlexSetConeOrientation(arg1, arg2, arg3)
    ccall((:DMPlexSetConeOrientation, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexGetSupportSize(arg1, arg2, arg3)
    ccall((:DMPlexGetSupportSize, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexSetSupportSize(arg1, arg2, arg3)
    ccall((:DMPlexSetSupportSize, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt), arg1, arg2, arg3)
end

function DMPlexGetSupport(arg1, arg2, arg3)
    ccall((:DMPlexGetSupport, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function DMPlexSetSupport(arg1, arg2, arg3)
    ccall((:DMPlexSetSupport, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexInsertSupport(arg1, arg2, arg3, arg4)
    ccall((:DMPlexInsertSupport, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMPlexGetConeSection(arg1, arg2)
    ccall((:DMPlexGetConeSection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}), arg1, arg2)
end

function DMPlexGetSupportSection(arg1, arg2)
    ccall((:DMPlexGetSupportSection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}), arg1, arg2)
end

function DMPlexGetCones(arg1, arg2)
    ccall((:DMPlexGetCones, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function DMPlexGetConeOrientations(arg1, arg2)
    ccall((:DMPlexGetConeOrientations, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function DMPlexGetMaxSizes(arg1, arg2, arg3)
    ccall((:DMPlexGetMaxSizes, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexSymmetrize(arg1)
    ccall((:DMPlexSymmetrize, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexStratify(arg1)
    ccall((:DMPlexStratify, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexEqual(arg1, arg2, arg3)
    ccall((:DMPlexEqual, $petsc_library), PetscErrorCode, (DM, DM, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMPlexOrientPoint(arg1, arg2, arg3)
    ccall((:DMPlexOrientPoint, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt), arg1, arg2, arg3)
end

function DMPlexOrient(arg1)
    ccall((:DMPlexOrient, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexPreallocateOperator(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexPreallocateOperator, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Mat, PetscBool), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexGetPointLocal(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetPointLocal, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexPointLocalRead(arg1, arg2, arg3, arg4)
    ccall((:DMPlexPointLocalRead, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscScalar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexPointLocalRef(arg1, arg2, arg3, arg4)
    ccall((:DMPlexPointLocalRef, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscScalar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexGetPointLocalField(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexGetPointLocalField, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexPointLocalFieldRef(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexPointLocalFieldRef, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexPointLocalFieldRead(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexPointLocalFieldRead, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetPointGlobal(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetPointGlobal, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexPointGlobalRead(arg1, arg2, arg3, arg4)
    ccall((:DMPlexPointGlobalRead, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscScalar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexPointGlobalRef(arg1, arg2, arg3, arg4)
    ccall((:DMPlexPointGlobalRef, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscScalar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexGetPointGlobalField(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexGetPointGlobalField, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexPointGlobalFieldRef(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexPointGlobalFieldRef, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexPointGlobalFieldRead(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexPointGlobalFieldRead, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

@enum DMPlexInterpolatedFlag::Int32 begin
    DMPLEX_INTERPOLATED_INVALID = -1
    DMPLEX_INTERPOLATED_NONE = 0
    DMPLEX_INTERPOLATED_PARTIAL = 1
    DMPLEX_INTERPOLATED_MIXED = 2
    DMPLEX_INTERPOLATED_FULL = 3
end

function DMPlexInterpolate(arg1, arg2)
    ccall((:DMPlexInterpolate, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMPlexUninterpolate(arg1, arg2)
    ccall((:DMPlexUninterpolate, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMPlexInterpolatePointSF(arg1, arg2)
    ccall((:DMPlexInterpolatePointSF, $petsc_library), PetscErrorCode, (DM, PetscSF), arg1, arg2)
end

function DMPlexIsInterpolated(arg1, arg2)
    ccall((:DMPlexIsInterpolated, $petsc_library), PetscErrorCode, (DM, Ptr{DMPlexInterpolatedFlag}), arg1, arg2)
end

function DMPlexIsInterpolatedCollective(arg1, arg2)
    ccall((:DMPlexIsInterpolatedCollective, $petsc_library), PetscErrorCode, (DM, Ptr{DMPlexInterpolatedFlag}), arg1, arg2)
end

function DMPlexFilter(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexFilter, $petsc_library), PetscErrorCode, (DM, DMLabel, PetscInt, PetscBool, PetscBool, Ptr{PetscSF}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexGetCellNumbering(arg1, arg2)
    ccall((:DMPlexGetCellNumbering, $petsc_library), PetscErrorCode, (DM, Ptr{IS}), arg1, arg2)
end

function DMPlexGetVertexNumbering(arg1, arg2)
    ccall((:DMPlexGetVertexNumbering, $petsc_library), PetscErrorCode, (DM, Ptr{IS}), arg1, arg2)
end

function DMPlexCreatePointNumbering(arg1, arg2)
    ccall((:DMPlexCreatePointNumbering, $petsc_library), PetscErrorCode, (DM, Ptr{IS}), arg1, arg2)
end

function DMPlexCreateRankField(arg1, arg2)
    ccall((:DMPlexCreateRankField, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMPlexCreateLabelField(arg1, arg2, arg3)
    ccall((:DMPlexCreateLabelField, $petsc_library), PetscErrorCode, (DM, DMLabel, Ptr{Vec}), arg1, arg2, arg3)
end

function DMPlexGetDepth(arg1, arg2)
    ccall((:DMPlexGetDepth, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexGetDepthLabel(arg1, arg2)
    ccall((:DMPlexGetDepthLabel, $petsc_library), PetscErrorCode, (DM, Ptr{DMLabel}), arg1, arg2)
end

function DMPlexGetDepthStratum(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetDepthStratum, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexGetHeightStratum(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetHeightStratum, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexGetCellTypeStratum(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetCellTypeStratum, $petsc_library), PetscErrorCode, (DM, DMPolytopeType, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexGetPointDepth(arg1, arg2, arg3)
    ccall((:DMPlexGetPointDepth, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexGetPointHeight(arg1, arg2, arg3)
    ccall((:DMPlexGetPointHeight, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexGetCellTypeLabel(arg1, arg2)
    ccall((:DMPlexGetCellTypeLabel, $petsc_library), PetscErrorCode, (DM, Ptr{DMLabel}), arg1, arg2)
end

function DMPlexGetCellType(arg1, arg2, arg3)
    ccall((:DMPlexGetCellType, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DMPolytopeType}), arg1, arg2, arg3)
end

function DMPlexSetCellType(arg1, arg2, arg3)
    ccall((:DMPlexSetCellType, $petsc_library), PetscErrorCode, (DM, PetscInt, DMPolytopeType), arg1, arg2, arg3)
end

function DMPlexComputeCellTypes(arg1)
    ccall((:DMPlexComputeCellTypes, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexInvertCell(arg1, arg2)
    ccall((:DMPlexInvertCell, $petsc_library), PetscErrorCode, (DMPolytopeType, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexReorderCell(arg1, arg2, arg3)
    ccall((:DMPlexReorderCell, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexGetMeet(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexGetMeet, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetFullMeet(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexGetFullMeet, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexRestoreMeet(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexRestoreMeet, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetJoin(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexGetJoin, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetFullJoin(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexGetFullJoin, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexRestoreJoin(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexRestoreJoin, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetTransitiveClosure(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexGetTransitiveClosure, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscBool, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexRestoreTransitiveClosure(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexRestoreTransitiveClosure, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscBool, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetCompressedClosure(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexGetCompressedClosure, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{PetscSection}, Ptr{IS}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexRestoreCompressedClosure(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexRestoreCompressedClosure, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{PetscSection}, Ptr{IS}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

@enum DMPlexTPSType::UInt32 begin
    DMPLEX_TPS_SCHWARZ_P = 0
    DMPLEX_TPS_GYROID = 1
end

function DMPlexGenerate(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGenerate, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCopyCoordinates(arg1, arg2)
    ccall((:DMPlexCopyCoordinates, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMPlexCreateCoordinateSpace(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateCoordinateSpace, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscBool, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateDoublet(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexCreateDoublet, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscBool, PetscBool, PetscReal, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexCreateBoxMesh(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexCreateBoxMesh, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscBool, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{DMBoundaryType}, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexCreateBoxSurfaceMesh(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexCreateBoxSurfaceMesh, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexCreateSphereMesh(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexCreateSphereMesh, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscBool, PetscReal, Ptr{DM}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexCreateBallMesh(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateBallMesh, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscReal, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateHexCylinderMesh(arg1, arg2, arg3)
    ccall((:DMPlexCreateHexCylinderMesh, $petsc_library), PetscErrorCode, (MPI_Comm, DMBoundaryType, Ptr{DM}), arg1, arg2, arg3)
end

function DMPlexCreateTPSMesh(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexCreateTPSMesh, $petsc_library), PetscErrorCode, (MPI_Comm, DMPlexTPSType, Ptr{PetscInt}, Ptr{DMBoundaryType}, PetscBool, PetscInt, PetscInt, PetscReal, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexCreateWedgeCylinderMesh(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateWedgeCylinderMesh, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateWedgeBoxMesh(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexCreateWedgeBoxMesh, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{DMBoundaryType}, PetscBool, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexCreateHypercubicMesh(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexCreateHypercubicMesh, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexExtrude(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexExtrude, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscReal, PetscBool, PetscBool, PetscBool, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexInflateToGeomModel(arg1)
    ccall((:DMPlexInflateToGeomModel, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexSetIsoperiodicFaceSF(arg1, arg2, arg3)
    ccall((:DMPlexSetIsoperiodicFaceSF, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscSF}), arg1, arg2, arg3)
end

function DMPlexGetIsoperiodicFaceSF(arg1, arg2, arg3)
    ccall((:DMPlexGetIsoperiodicFaceSF, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{Ptr{PetscSF}}), arg1, arg2, arg3)
end

function DMPlexSetIsoperiodicFaceTransform(arg1, arg2, arg3)
    ccall((:DMPlexSetIsoperiodicFaceTransform, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function DMPlexCheck(arg1)
    ccall((:DMPlexCheck, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexCheckSymmetry(arg1)
    ccall((:DMPlexCheckSymmetry, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexCheckSkeleton(arg1, arg2)
    ccall((:DMPlexCheckSkeleton, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMPlexCheckFaces(arg1, arg2)
    ccall((:DMPlexCheckFaces, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMPlexCheckGeometry(arg1)
    ccall((:DMPlexCheckGeometry, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexCheckPointSF(arg1, arg2, arg3)
    ccall((:DMPlexCheckPointSF, $petsc_library), PetscErrorCode, (DM, PetscSF, PetscBool), arg1, arg2, arg3)
end

function DMPlexCheckInterfaceCones(arg1)
    ccall((:DMPlexCheckInterfaceCones, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexCheckCellShape(arg1, arg2, arg3)
    ccall((:DMPlexCheckCellShape, $petsc_library), PetscErrorCode, (DM, PetscBool, PetscReal), arg1, arg2, arg3)
end

function DMPlexComputeOrthogonalQuality(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexComputeOrthogonalQuality, $petsc_library), PetscErrorCode, (DM, PetscFV, PetscReal, Ptr{Vec}, Ptr{DMLabel}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexTriangleSetOptions(arg1, arg2)
    ccall((:DMPlexTriangleSetOptions, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}), arg1, arg2)
end

function DMPlexTetgenSetOptions(arg1, arg2)
    ccall((:DMPlexTetgenSetOptions, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}), arg1, arg2)
end

function DMPlexCreateFromFile(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexCreateFromFile, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexCreateExodus(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateExodus, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateExodusFromFile(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateExodusFromFile, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateCGNS(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateCGNS, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateCGNSFromFile(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateCGNSFromFile, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateGmsh(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateGmsh, $petsc_library), PetscErrorCode, (MPI_Comm, PetscViewer, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateGmshFromFile(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateGmshFromFile, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateFluent(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateFluent, $petsc_library), PetscErrorCode, (MPI_Comm, PetscViewer, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateFluentFromFile(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateFluentFromFile, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreatePLYFromFile(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreatePLYFromFile, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateEGADSFromFile(arg1, arg2, arg3)
    ccall((:DMPlexCreateEGADSFromFile, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{DM}), arg1, arg2, arg3)
end

function DMPlexCreateEGADSLiteFromFile(arg1, arg2, arg3)
    ccall((:DMPlexCreateEGADSLiteFromFile, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{DM}), arg1, arg2, arg3)
end

function PetscViewerExodusIIOpen(comm, name, type, exo)
    ccall((:PetscViewerExodusIIOpen, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, PetscFileMode, Ptr{PetscViewer}), comm, name, type, exo)
end

function PetscViewerExodusIIGetId(arg1, arg2)
    ccall((:PetscViewerExodusIIGetId, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{Cint}), arg1, arg2)
end

function PetscViewerExodusIISetOrder(arg1, arg2)
    ccall((:PetscViewerExodusIISetOrder, $petsc_library), PetscErrorCode, (PetscViewer, PetscInt), arg1, arg2)
end

function PetscViewerExodusIIGetOrder(arg1, arg2)
    ccall((:PetscViewerExodusIIGetOrder, $petsc_library), PetscErrorCode, (PetscViewer, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexCreateNeighborCSR(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexCreateNeighborCSR, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetPartitioner(arg1, arg2)
    ccall((:DMPlexGetPartitioner, $petsc_library), PetscErrorCode, (DM, Ptr{PetscPartitioner}), arg1, arg2)
end

function DMPlexSetPartitioner(arg1, arg2)
    ccall((:DMPlexSetPartitioner, $petsc_library), PetscErrorCode, (DM, PetscPartitioner), arg1, arg2)
end

function DMPlexCreatePartitionerGraph(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexCreatePartitionerGraph, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{IS}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexPartitionLabelInvert(arg1, arg2, arg3, arg4)
    ccall((:DMPlexPartitionLabelInvert, $petsc_library), PetscErrorCode, (DM, DMLabel, PetscSF, DMLabel), arg1, arg2, arg3, arg4)
end

function DMPlexPartitionLabelClosure(arg1, arg2)
    ccall((:DMPlexPartitionLabelClosure, $petsc_library), PetscErrorCode, (DM, DMLabel), arg1, arg2)
end

function DMPlexPartitionLabelAdjacency(arg1, arg2)
    ccall((:DMPlexPartitionLabelAdjacency, $petsc_library), PetscErrorCode, (DM, DMLabel), arg1, arg2)
end

function DMPlexPartitionLabelPropagate(arg1, arg2)
    ccall((:DMPlexPartitionLabelPropagate, $petsc_library), PetscErrorCode, (DM, DMLabel), arg1, arg2)
end

function DMPlexPartitionLabelCreateSF(arg1, arg2, arg3, arg4)
    ccall((:DMPlexPartitionLabelCreateSF, $petsc_library), PetscErrorCode, (DM, DMLabel, PetscBool, Ptr{PetscSF}), arg1, arg2, arg3, arg4)
end

function DMPlexSetPartitionBalance(arg1, arg2)
    ccall((:DMPlexSetPartitionBalance, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexGetPartitionBalance(arg1, arg2)
    ccall((:DMPlexGetPartitionBalance, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexIsDistributed(arg1, arg2)
    ccall((:DMPlexIsDistributed, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexDistribute(arg1, arg2, arg3, arg4)
    ccall((:DMPlexDistribute, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscSF}, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexDistributeOverlap(arg1, arg2, arg3, arg4)
    ccall((:DMPlexDistributeOverlap, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscSF}, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexRemapMigrationSF(arg1, arg2, arg3)
    ccall((:DMPlexRemapMigrationSF, $petsc_library), PetscErrorCode, (PetscSF, PetscSF, Ptr{PetscSF}), arg1, arg2, arg3)
end

function DMPlexGetOverlap(arg1, arg2)
    ccall((:DMPlexGetOverlap, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexSetOverlap(arg1, arg2, arg3)
    ccall((:DMPlexSetOverlap, $petsc_library), PetscErrorCode, (DM, DM, PetscInt), arg1, arg2, arg3)
end

function DMPlexDistributeGetDefault(arg1, arg2)
    ccall((:DMPlexDistributeGetDefault, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexDistributeSetDefault(arg1, arg2)
    ccall((:DMPlexDistributeSetDefault, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexDistributeField(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexDistributeField, $petsc_library), PetscErrorCode, (DM, PetscSF, PetscSection, Vec, PetscSection, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexDistributeFieldIS(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexDistributeFieldIS, $petsc_library), PetscErrorCode, (DM, PetscSF, PetscSection, IS, PetscSection, Ptr{IS}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexDistributeData(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexDistributeData, $petsc_library), PetscErrorCode, (DM, PetscSF, PetscSection, MPI_Datatype, Ptr{Cvoid}, PetscSection, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexRebalanceSharedPoints(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexRebalanceSharedPoints, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscBool, PetscBool, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexMigrate(arg1, arg2, arg3)
    ccall((:DMPlexMigrate, $petsc_library), PetscErrorCode, (DM, PetscSF, DM), arg1, arg2, arg3)
end

function DMPlexGetGatherDM(arg1, arg2, arg3)
    ccall((:DMPlexGetGatherDM, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSF}, Ptr{DM}), arg1, arg2, arg3)
end

function DMPlexGetRedundantDM(arg1, arg2, arg3)
    ccall((:DMPlexGetRedundantDM, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSF}, Ptr{DM}), arg1, arg2, arg3)
end

function DMPlexSetAdjacencyUser(arg1, arg2, arg3)
    ccall((:DMPlexSetAdjacencyUser, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMPlexGetAdjacencyUser(arg1, arg2, arg3)
    ccall((:DMPlexGetAdjacencyUser, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMPlexSetAdjacencyUseAnchors(arg1, arg2)
    ccall((:DMPlexSetAdjacencyUseAnchors, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexGetAdjacencyUseAnchors(arg1, arg2)
    ccall((:DMPlexGetAdjacencyUseAnchors, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexGetAdjacency(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetAdjacency, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMPlexSetMigrationSF(arg1, arg2)
    ccall((:DMPlexSetMigrationSF, $petsc_library), PetscErrorCode, (DM, PetscSF), arg1, arg2)
end

function DMPlexGetMigrationSF(arg1, arg2)
    ccall((:DMPlexGetMigrationSF, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSF}), arg1, arg2)
end

function DMPlexDistributionSetName(arg1, arg2)
    ccall((:DMPlexDistributionSetName, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}), arg1, arg2)
end

function DMPlexDistributionGetName(arg1, arg2)
    ccall((:DMPlexDistributionGetName, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function DMPlexGetOrdering(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetOrdering, $petsc_library), PetscErrorCode, (DM, MatOrderingType, DMLabel, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function DMPlexGetOrdering1D(arg1, arg2)
    ccall((:DMPlexGetOrdering1D, $petsc_library), PetscErrorCode, (DM, Ptr{IS}), arg1, arg2)
end

function DMPlexPermute(arg1, arg2, arg3)
    ccall((:DMPlexPermute, $petsc_library), PetscErrorCode, (DM, IS, Ptr{DM}), arg1, arg2, arg3)
end

function DMPlexReorderGetDefault(arg1, arg2)
    ccall((:DMPlexReorderGetDefault, $petsc_library), PetscErrorCode, (DM, Ptr{DMReorderDefaultFlag}), arg1, arg2)
end

function DMPlexReorderSetDefault(arg1, arg2)
    ccall((:DMPlexReorderSetDefault, $petsc_library), PetscErrorCode, (DM, DMReorderDefaultFlag), arg1, arg2)
end

function DMPlexCreateProcessSF(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateProcessSF, $petsc_library), PetscErrorCode, (DM, PetscSF, Ptr{IS}, Ptr{PetscSF}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateTwoSidedProcessSF(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexCreateTwoSidedProcessSF, $petsc_library), PetscErrorCode, (DM, PetscSF, PetscSection, IS, PetscSection, IS, Ptr{IS}, Ptr{PetscSF}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexDistributeOwnership(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexDistributeOwnership, $petsc_library), PetscErrorCode, (DM, PetscSection, Ptr{IS}, PetscSection, Ptr{IS}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexCreatePointSF(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreatePointSF, $petsc_library), PetscErrorCode, (DM, PetscSF, PetscBool, Ptr{PetscSF}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateOverlapLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexCreateOverlapLabel, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscSection, IS, PetscSection, IS, Ptr{DMLabel}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexCreateOverlapLabelFromLabels(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
    ccall((:DMPlexCreateOverlapLabelFromLabels, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DMLabel}, Ptr{PetscInt}, PetscInt, Ptr{DMLabel}, Ptr{PetscInt}, PetscSection, IS, PetscSection, IS, Ptr{DMLabel}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
end

function DMPlexCreateOverlapMigrationSF(arg1, arg2, arg3)
    ccall((:DMPlexCreateOverlapMigrationSF, $petsc_library), PetscErrorCode, (DM, PetscSF, Ptr{PetscSF}), arg1, arg2, arg3)
end

function DMPlexStratifyMigrationSF(arg1, arg2, arg3)
    ccall((:DMPlexStratifyMigrationSF, $petsc_library), PetscErrorCode, (DM, PetscSF, Ptr{PetscSF}), arg1, arg2, arg3)
end

function DMPlexCreateSubmesh(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexCreateSubmesh, $petsc_library), PetscErrorCode, (DM, DMLabel, PetscInt, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexCreateHybridMesh(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexCreateHybridMesh, $petsc_library), PetscErrorCode, (DM, DMLabel, DMLabel, PetscInt, Ptr{DMLabel}, Ptr{DMLabel}, Ptr{DM}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexGetSubpointMap(arg1, arg2)
    ccall((:DMPlexGetSubpointMap, $petsc_library), PetscErrorCode, (DM, Ptr{DMLabel}), arg1, arg2)
end

function DMPlexSetSubpointMap(arg1, arg2)
    ccall((:DMPlexSetSubpointMap, $petsc_library), PetscErrorCode, (DM, DMLabel), arg1, arg2)
end

function DMPlexGetSubpointIS(arg1, arg2)
    ccall((:DMPlexGetSubpointIS, $petsc_library), PetscErrorCode, (DM, Ptr{IS}), arg1, arg2)
end

function DMGetEnclosureRelation(arg1, arg2, arg3)
    ccall((:DMGetEnclosureRelation, $petsc_library), PetscErrorCode, (DM, DM, Ptr{DMEnclosureType}), arg1, arg2, arg3)
end

function DMGetEnclosurePoint(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMGetEnclosurePoint, $petsc_library), PetscErrorCode, (DM, DM, DMEnclosureType, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexLabelComplete(arg1, arg2)
    ccall((:DMPlexLabelComplete, $petsc_library), PetscErrorCode, (DM, DMLabel), arg1, arg2)
end

function DMPlexLabelCohesiveComplete(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexLabelCohesiveComplete, $petsc_library), PetscErrorCode, (DM, DMLabel, DMLabel, PetscInt, PetscBool, DM), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexLabelAddCells(arg1, arg2)
    ccall((:DMPlexLabelAddCells, $petsc_library), PetscErrorCode, (DM, DMLabel), arg1, arg2)
end

function DMPlexLabelAddFaceCells(arg1, arg2)
    ccall((:DMPlexLabelAddFaceCells, $petsc_library), PetscErrorCode, (DM, DMLabel), arg1, arg2)
end

function DMPlexLabelClearCells(arg1, arg2)
    ccall((:DMPlexLabelClearCells, $petsc_library), PetscErrorCode, (DM, DMLabel), arg1, arg2)
end

function DMPlexGetRefinementLimit(arg1, arg2)
    ccall((:DMPlexGetRefinementLimit, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexSetRefinementLimit(arg1, arg2)
    ccall((:DMPlexSetRefinementLimit, $petsc_library), PetscErrorCode, (DM, PetscReal), arg1, arg2)
end

function DMPlexGetRefinementUniform(arg1, arg2)
    ccall((:DMPlexGetRefinementUniform, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexSetRefinementUniform(arg1, arg2)
    ccall((:DMPlexSetRefinementUniform, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexGetRefinementFunction(arg1, arg2)
    ccall((:DMPlexGetRefinementFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMPlexSetRefinementFunction(arg1, arg2)
    ccall((:DMPlexSetRefinementFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMPlexCreateCoarsePointIS(arg1, arg2)
    ccall((:DMPlexCreateCoarsePointIS, $petsc_library), PetscErrorCode, (DM, Ptr{IS}), arg1, arg2)
end

function DMPlexGetRegularRefinement(arg1, arg2)
    ccall((:DMPlexGetRegularRefinement, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexSetRegularRefinement(arg1, arg2)
    ccall((:DMPlexSetRegularRefinement, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexGetNumFaceVertices(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetNumFaceVertices, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexGetOrientedFace(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexGetOrientedFace, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexGetMinRadius(arg1, arg2)
    ccall((:DMPlexGetMinRadius, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexSetMinRadius(arg1, arg2)
    ccall((:DMPlexSetMinRadius, $petsc_library), PetscErrorCode, (DM, PetscReal), arg1, arg2)
end

function DMPlexComputeProjection2Dto1D(arg1, arg2)
    ccall((:DMPlexComputeProjection2Dto1D, $petsc_library), PetscErrorCode, (Ptr{PetscScalar}, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexComputeProjection3Dto1D(arg1, arg2)
    ccall((:DMPlexComputeProjection3Dto1D, $petsc_library), PetscErrorCode, (Ptr{PetscScalar}, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexComputeProjection3Dto2D(arg1, arg2, arg3)
    ccall((:DMPlexComputeProjection3Dto2D, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscScalar}, Ptr{PetscReal}), arg1, arg2, arg3)
end

mutable struct _PetscGridHash end

const PetscGridHash = Ptr{_PetscGridHash}

function PetscGridHashCreate(arg1, arg2, arg3, arg4)
    ccall((:PetscGridHashCreate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, Ptr{PetscScalar}, Ptr{PetscGridHash}), arg1, arg2, arg3, arg4)
end

function PetscGridHashEnlarge(arg1, arg2)
    ccall((:PetscGridHashEnlarge, $petsc_library), PetscErrorCode, (PetscGridHash, Ptr{PetscScalar}), arg1, arg2)
end

function PetscGridHashSetGrid(arg1, arg2, arg3)
    ccall((:PetscGridHashSetGrid, $petsc_library), PetscErrorCode, (PetscGridHash, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PetscGridHashGetEnclosingBox(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscGridHashGetEnclosingBox, $petsc_library), PetscErrorCode, (PetscGridHash, PetscInt, Ptr{PetscScalar}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function PetscGridHashDestroy(arg1)
    ccall((:PetscGridHashDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscGridHash},), arg1)
end

function DMPlexFindVertices(arg1, arg2, arg3, arg4)
    ccall((:DMPlexFindVertices, $petsc_library), PetscErrorCode, (DM, Vec, PetscReal, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function DMPlexComputeCellGeometryFVM(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexComputeCellGeometryFVM, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexComputeGeometryFVM(arg1, arg2, arg3)
    ccall((:DMPlexComputeGeometryFVM, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3)
end

function DMPlexComputeGradientFVM(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexComputeGradientFVM, $petsc_library), PetscErrorCode, (DM, PetscFV, Vec, Vec, Ptr{DM}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetDataFVM(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexGetDataFVM, $petsc_library), PetscErrorCode, (DM, PetscFV, Ptr{Vec}, Ptr{Vec}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetGeometryFVM(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetGeometryFVM, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}, Ptr{Vec}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function DMPlexGetGradientDM(arg1, arg2, arg3)
    ccall((:DMPlexGetGradientDM, $petsc_library), PetscErrorCode, (DM, PetscFV, Ptr{DM}), arg1, arg2, arg3)
end

function DMPlexInsertBoundaryValues(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexInsertBoundaryValues, $petsc_library), PetscErrorCode, (DM, PetscBool, Vec, PetscReal, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexInsertTimeDerivativeBoundaryValues(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexInsertTimeDerivativeBoundaryValues, $petsc_library), PetscErrorCode, (DM, PetscBool, Vec, PetscReal, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexInsertBoundaryValuesFVM(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexInsertBoundaryValuesFVM, $petsc_library), PetscErrorCode, (DM, PetscFV, Vec, PetscReal, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexInsertBoundaryValuesEssential(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:DMPlexInsertBoundaryValuesEssential, $petsc_library), PetscErrorCode, (DM, PetscReal, PetscInt, PetscInt, Ptr{PetscInt}, DMLabel, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function DMPlexInsertBoundaryValuesEssentialField(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
    ccall((:DMPlexInsertBoundaryValuesEssentialField, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, PetscInt, PetscInt, Ptr{PetscInt}, DMLabel, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
end

function DMPlexInsertBoundaryValuesEssentialBdField(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
    ccall((:DMPlexInsertBoundaryValuesEssentialBdField, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, PetscInt, PetscInt, Ptr{PetscInt}, DMLabel, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
end

function DMPlexInsertBoundaryValuesRiemann(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:DMPlexInsertBoundaryValuesRiemann, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, Vec, Vec, PetscInt, PetscInt, Ptr{PetscInt}, DMLabel, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function DMPlexMarkBoundaryFaces(arg1, arg2, arg3)
    ccall((:DMPlexMarkBoundaryFaces, $petsc_library), PetscErrorCode, (DM, PetscInt, DMLabel), arg1, arg2, arg3)
end

function DMPlexCreateSection(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:DMPlexCreateSection, $petsc_library), PetscErrorCode, (DM, Ptr{DMLabel}, Ptr{PetscInt}, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, Ptr{IS}, Ptr{IS}, IS, Ptr{PetscSection}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function DMPlexGetSubdomainSection(arg1, arg2)
    ccall((:DMPlexGetSubdomainSection, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}), arg1, arg2)
end

function DMPlexComputeCellGeometryAffineFEM(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexComputeCellGeometryAffineFEM, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexComputeCellGeometryFEM(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexComputeCellGeometryFEM, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscQuadrature, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexGetCellCoordinates(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexGetCellCoordinates, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscBool}, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexRestoreCellCoordinates(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexRestoreCellCoordinates, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscBool}, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexCoordinatesToReference(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexCoordinatesToReference, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexReferenceToCoordinates(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexReferenceToCoordinates, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexShearGeometry(arg1, arg2, arg3)
    ccall((:DMPlexShearGeometry, $petsc_library), PetscErrorCode, (DM, DMDirection, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMPlexRemapGeometry(arg1, arg2, arg3)
    ccall((:DMPlexRemapGeometry, $petsc_library), PetscErrorCode, (DM, PetscReal, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMPlexVecGetClosure(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexVecGetClosure, $petsc_library), PetscErrorCode, (DM, PetscSection, Vec, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexVecRestoreClosure(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexVecRestoreClosure, $petsc_library), PetscErrorCode, (DM, PetscSection, Vec, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexVecSetClosure(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexVecSetClosure, $petsc_library), PetscErrorCode, (DM, PetscSection, Vec, PetscInt, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexMatSetClosure(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexMatSetClosure, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscSection, Mat, PetscInt, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexMatSetClosureGeneral(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
    ccall((:DMPlexMatSetClosureGeneral, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscSection, PetscBool, DM, PetscSection, PetscSection, PetscBool, Mat, PetscInt, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
end

function DMPlexGetClosureIndices(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexGetClosureIndices, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscSection, PetscInt, PetscBool, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexRestoreClosureIndices(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexRestoreClosureIndices, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscSection, PetscInt, PetscBool, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexMatSetClosureRefined(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:DMPlexMatSetClosureRefined, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscSection, DM, PetscSection, PetscSection, Mat, PetscInt, Ptr{PetscScalar}, InsertMode), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function DMPlexMatGetClosureIndicesRefined(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexMatGetClosureIndicesRefined, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscSection, DM, PetscSection, PetscSection, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexCreateClosureIndex(arg1, arg2)
    ccall((:DMPlexCreateClosureIndex, $petsc_library), PetscErrorCode, (DM, PetscSection), arg1, arg2)
end

function DMPlexSetClosurePermutationTensor(arg1, arg2, arg3)
    ccall((:DMPlexSetClosurePermutationTensor, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscSection), arg1, arg2, arg3)
end

function DMPlexConstructGhostCells(arg1, arg2, arg3, arg4)
    ccall((:DMPlexConstructGhostCells, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{PetscInt}, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexConstructCohesiveCells(arg1, arg2, arg3, arg4)
    ccall((:DMPlexConstructCohesiveCells, $petsc_library), PetscErrorCode, (DM, DMLabel, DMLabel, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexReorderCohesiveSupports(arg1)
    ccall((:DMPlexReorderCohesiveSupports, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexGetVTKCellHeight(arg1, arg2)
    ccall((:DMPlexGetVTKCellHeight, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexSetVTKCellHeight(arg1, arg2)
    ccall((:DMPlexSetVTKCellHeight, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMPlexVTKWriteAll(arg1, arg2)
    ccall((:DMPlexVTKWriteAll, $petsc_library), PetscErrorCode, (PetscObject, PetscViewer), arg1, arg2)
end

function DMPlexGetSimplexOrBoxCells(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetSimplexOrBoxCells, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexIsSimplex(arg1, arg2)
    ccall((:DMPlexIsSimplex, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexGetCellFields(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexGetCellFields, $petsc_library), PetscErrorCode, (DM, IS, Vec, Vec, Vec, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexRestoreCellFields(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexRestoreCellFields, $petsc_library), PetscErrorCode, (DM, IS, Vec, Vec, Vec, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexGetFaceFields(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:DMPlexGetFaceFields, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Vec, Vec, Vec, Vec, Vec, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function DMPlexRestoreFaceFields(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:DMPlexRestoreFaceFields, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Vec, Vec, Vec, Vec, Vec, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function DMPlexGetScale(arg1, arg2, arg3)
    ccall((:DMPlexGetScale, $petsc_library), PetscErrorCode, (DM, PetscUnit, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMPlexSetScale(arg1, arg2, arg3)
    ccall((:DMPlexSetScale, $petsc_library), PetscErrorCode, (DM, PetscUnit, PetscReal), arg1, arg2, arg3)
end

mutable struct JacActionCtx
    dm::DM
    u::Vec
    J::Mat
    user::Ptr{Cvoid}
    JacActionCtx() = new()
end

function DMPlexSetMaxProjectionHeight(arg1, arg2)
    ccall((:DMPlexSetMaxProjectionHeight, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMPlexGetMaxProjectionHeight(arg1, arg2)
    ccall((:DMPlexGetMaxProjectionHeight, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexGetActivePoint(arg1, arg2)
    ccall((:DMPlexGetActivePoint, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexSetActivePoint(arg1, arg2)
    ccall((:DMPlexSetActivePoint, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMPlexComputeL2DiffLocal(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexComputeL2DiffLocal, $petsc_library), PetscErrorCode, (DM, PetscReal, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Vec, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexComputeL2FieldDiff(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexComputeL2FieldDiff, $petsc_library), PetscErrorCode, (DM, PetscReal, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Vec, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexComputeL2DiffVec(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexComputeL2DiffVec, $petsc_library), PetscErrorCode, (DM, PetscReal, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexComputeCellwiseIntegralFEM(arg1, arg2, arg3, arg4)
    ccall((:DMPlexComputeCellwiseIntegralFEM, $petsc_library), PetscErrorCode, (DM, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexComputeIntegralFEM(arg1, arg2, arg3, arg4)
    ccall((:DMPlexComputeIntegralFEM, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{PetscScalar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexComputeBdIntegral(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexComputeBdIntegral, $petsc_library), PetscErrorCode, (DM, Vec, DMLabel, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{PetscScalar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexComputeInterpolatorNested(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexComputeInterpolatorNested, $petsc_library), PetscErrorCode, (DM, DM, PetscBool, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexComputeInterpolatorGeneral(arg1, arg2, arg3, arg4)
    ccall((:DMPlexComputeInterpolatorGeneral, $petsc_library), PetscErrorCode, (DM, DM, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexComputeClementInterpolant(arg1, arg2, arg3)
    ccall((:DMPlexComputeClementInterpolant, $petsc_library), PetscErrorCode, (DM, Vec, Vec), arg1, arg2, arg3)
end

function DMPlexComputeGradientClementInterpolant(arg1, arg2, arg3)
    ccall((:DMPlexComputeGradientClementInterpolant, $petsc_library), PetscErrorCode, (DM, Vec, Vec), arg1, arg2, arg3)
end

function DMPlexComputeInjectorFEM(arg1, arg2, arg3, arg4)
    ccall((:DMPlexComputeInjectorFEM, $petsc_library), PetscErrorCode, (DM, DM, Ptr{VecScatter}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexComputeMassMatrixNested(arg1, arg2, arg3, arg4)
    ccall((:DMPlexComputeMassMatrixNested, $petsc_library), PetscErrorCode, (DM, DM, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexComputeMassMatrixGeneral(arg1, arg2, arg3, arg4)
    ccall((:DMPlexComputeMassMatrixGeneral, $petsc_library), PetscErrorCode, (DM, DM, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexCreateRigidBody(arg1, arg2, arg3)
    ccall((:DMPlexCreateRigidBody, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{MatNullSpace}), arg1, arg2, arg3)
end

function DMPlexCreateRigidBodies(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexCreateRigidBodies, $petsc_library), PetscErrorCode, (DM, PetscInt, DMLabel, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{MatNullSpace}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexSetSNESLocalFEM(arg1, arg2, arg3)
    ccall((:DMPlexSetSNESLocalFEM, $petsc_library), PetscErrorCode, (DM, PetscBool, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMPlexSNESComputeBoundaryFEM(arg1, arg2, arg3)
    ccall((:DMPlexSNESComputeBoundaryFEM, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMPlexSNESComputeObjectiveFEM(arg1, arg2, arg3, arg4)
    ccall((:DMPlexSNESComputeObjectiveFEM, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{PetscReal}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexSNESComputeResidualFEM(arg1, arg2, arg3, arg4)
    ccall((:DMPlexSNESComputeResidualFEM, $petsc_library), PetscErrorCode, (DM, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexSNESComputeResidualCEED(arg1, arg2, arg3, arg4)
    ccall((:DMPlexSNESComputeResidualCEED, $petsc_library), PetscErrorCode, (DM, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexSNESComputeResidualDS(arg1, arg2, arg3, arg4)
    ccall((:DMPlexSNESComputeResidualDS, $petsc_library), PetscErrorCode, (DM, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMPlexSNESComputeJacobianFEM(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexSNESComputeJacobianFEM, $petsc_library), PetscErrorCode, (DM, Vec, Mat, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexComputeBdResidualSingle(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexComputeBdResidualSingle, $petsc_library), PetscErrorCode, (DM, PetscReal, PetscWeakForm, PetscFormKey, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexComputeBdJacobianSingle(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
    ccall((:DMPlexComputeBdJacobianSingle, $petsc_library), PetscErrorCode, (DM, PetscReal, PetscWeakForm, DMLabel, PetscInt, Ptr{PetscInt}, PetscInt, Vec, Vec, PetscReal, Mat, Mat), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
end

function DMPlexTSComputeBoundary(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexTSComputeBoundary, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexTSComputeRHSFunctionFVM(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexTSComputeRHSFunctionFVM, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexTSComputeRHSFunctionFVMCEED(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexTSComputeRHSFunctionFVMCEED, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexTSComputeIFunctionFEM(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexTSComputeIFunctionFEM, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexTSComputeIJacobianFEM(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexTSComputeIJacobianFEM, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, Vec, PetscReal, Mat, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexTSComputeRHSFunctionFEM(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexTSComputeRHSFunctionFEM, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexReconstructGradientsFVM(arg1, arg2, arg3)
    ccall((:DMPlexReconstructGradientsFVM, $petsc_library), PetscErrorCode, (DM, Vec, Vec), arg1, arg2, arg3)
end

function DMPlexGetUseCeed(arg1, arg2)
    ccall((:DMPlexGetUseCeed, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexSetUseCeed(arg1, arg2)
    ccall((:DMPlexSetUseCeed, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexGetUseMatClosurePermutation(arg1, arg2)
    ccall((:DMPlexGetUseMatClosurePermutation, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexSetUseMatClosurePermutation(arg1, arg2)
    ccall((:DMPlexSetUseMatClosurePermutation, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexGetAnchors(arg1, arg2, arg3)
    ccall((:DMPlexGetAnchors, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}, Ptr{IS}), arg1, arg2, arg3)
end

function DMPlexSetAnchors(arg1, arg2, arg3)
    ccall((:DMPlexSetAnchors, $petsc_library), PetscErrorCode, (DM, PetscSection, IS), arg1, arg2, arg3)
end

function DMPlexSetReferenceTree(arg1, arg2)
    ccall((:DMPlexSetReferenceTree, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMPlexGetReferenceTree(arg1, arg2)
    ccall((:DMPlexGetReferenceTree, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMPlexReferenceTreeGetChildSymmetry(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexReferenceTreeGetChildSymmetry, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexCreateDefaultReferenceTree(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateDefaultReferenceTree, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscBool, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexSetTree(arg1, arg2, arg3, arg4)
    ccall((:DMPlexSetTree, $petsc_library), PetscErrorCode, (DM, PetscSection, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexGetTree(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexGetTree, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSection}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{PetscSection}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexGetTreeParent(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetTreeParent, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexGetTreeChildren(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGetTreeChildren, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMPlexTreeRefineCell(arg1, arg2, arg3)
    ccall((:DMPlexTreeRefineCell, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DM}), arg1, arg2, arg3)
end

function DMPlexComputeInjectorReferenceTree(arg1, arg2)
    ccall((:DMPlexComputeInjectorReferenceTree, $petsc_library), PetscErrorCode, (DM, Ptr{Mat}), arg1, arg2)
end

function DMPlexTransferVecTree(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:DMPlexTransferVecTree, $petsc_library), PetscErrorCode, (DM, Vec, DM, Vec, PetscSF, PetscSF, Ptr{PetscInt}, Ptr{PetscInt}, PetscBool, PetscReal), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function DMPlexMonitorThroughput(arg1, arg2)
    ccall((:DMPlexMonitorThroughput, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMPlexCreateGlobalToNaturalSF(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateGlobalToNaturalSF, $petsc_library), PetscErrorCode, (DM, PetscSection, PetscSF, Ptr{PetscSF}), arg1, arg2, arg3, arg4)
end

function DMPlexSetGlobalToNaturalSF(arg1, arg2)
    ccall((:DMPlexSetGlobalToNaturalSF, $petsc_library), PetscErrorCode, (DM, PetscSF), arg1, arg2)
end

function DMPlexGetGlobalToNaturalSF(arg1, arg2)
    ccall((:DMPlexGetGlobalToNaturalSF, $petsc_library), PetscErrorCode, (DM, Ptr{PetscSF}), arg1, arg2)
end

function DMPlexGlobalToNaturalBegin(arg1, arg2, arg3)
    ccall((:DMPlexGlobalToNaturalBegin, $petsc_library), PetscErrorCode, (DM, Vec, Vec), arg1, arg2, arg3)
end

function DMPlexGlobalToNaturalEnd(arg1, arg2, arg3)
    ccall((:DMPlexGlobalToNaturalEnd, $petsc_library), PetscErrorCode, (DM, Vec, Vec), arg1, arg2, arg3)
end

function DMPlexNaturalToGlobalBegin(arg1, arg2, arg3)
    ccall((:DMPlexNaturalToGlobalBegin, $petsc_library), PetscErrorCode, (DM, Vec, Vec), arg1, arg2, arg3)
end

function DMPlexNaturalToGlobalEnd(arg1, arg2, arg3)
    ccall((:DMPlexNaturalToGlobalEnd, $petsc_library), PetscErrorCode, (DM, Vec, Vec), arg1, arg2, arg3)
end

function DMPlexCreateNaturalVector(arg1, arg2)
    ccall((:DMPlexCreateNaturalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMPlexSnapToGeomModel(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexSnapToGeomModel, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexMetricSetFromOptions(arg1)
    ccall((:DMPlexMetricSetFromOptions, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMPlexMetricSetIsotropic(arg1, arg2)
    ccall((:DMPlexMetricSetIsotropic, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexMetricIsIsotropic(arg1, arg2)
    ccall((:DMPlexMetricIsIsotropic, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexMetricSetUniform(arg1, arg2)
    ccall((:DMPlexMetricSetUniform, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexMetricIsUniform(arg1, arg2)
    ccall((:DMPlexMetricIsUniform, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexMetricSetRestrictAnisotropyFirst(arg1, arg2)
    ccall((:DMPlexMetricSetRestrictAnisotropyFirst, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexMetricRestrictAnisotropyFirst(arg1, arg2)
    ccall((:DMPlexMetricRestrictAnisotropyFirst, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexMetricSetNoInsertion(arg1, arg2)
    ccall((:DMPlexMetricSetNoInsertion, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexMetricNoInsertion(arg1, arg2)
    ccall((:DMPlexMetricNoInsertion, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexMetricSetNoSwapping(arg1, arg2)
    ccall((:DMPlexMetricSetNoSwapping, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexMetricNoSwapping(arg1, arg2)
    ccall((:DMPlexMetricNoSwapping, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexMetricSetNoMovement(arg1, arg2)
    ccall((:DMPlexMetricSetNoMovement, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexMetricNoMovement(arg1, arg2)
    ccall((:DMPlexMetricNoMovement, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexMetricSetNoSurf(arg1, arg2)
    ccall((:DMPlexMetricSetNoSurf, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMPlexMetricNoSurf(arg1, arg2)
    ccall((:DMPlexMetricNoSurf, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexMetricSetMinimumMagnitude(arg1, arg2)
    ccall((:DMPlexMetricSetMinimumMagnitude, $petsc_library), PetscErrorCode, (DM, PetscReal), arg1, arg2)
end

function DMPlexMetricGetMinimumMagnitude(arg1, arg2)
    ccall((:DMPlexMetricGetMinimumMagnitude, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexMetricSetMaximumMagnitude(arg1, arg2)
    ccall((:DMPlexMetricSetMaximumMagnitude, $petsc_library), PetscErrorCode, (DM, PetscReal), arg1, arg2)
end

function DMPlexMetricGetMaximumMagnitude(arg1, arg2)
    ccall((:DMPlexMetricGetMaximumMagnitude, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexMetricSetMaximumAnisotropy(arg1, arg2)
    ccall((:DMPlexMetricSetMaximumAnisotropy, $petsc_library), PetscErrorCode, (DM, PetscReal), arg1, arg2)
end

function DMPlexMetricGetMaximumAnisotropy(arg1, arg2)
    ccall((:DMPlexMetricGetMaximumAnisotropy, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexMetricSetTargetComplexity(arg1, arg2)
    ccall((:DMPlexMetricSetTargetComplexity, $petsc_library), PetscErrorCode, (DM, PetscReal), arg1, arg2)
end

function DMPlexMetricGetTargetComplexity(arg1, arg2)
    ccall((:DMPlexMetricGetTargetComplexity, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexMetricSetNormalizationOrder(arg1, arg2)
    ccall((:DMPlexMetricSetNormalizationOrder, $petsc_library), PetscErrorCode, (DM, PetscReal), arg1, arg2)
end

function DMPlexMetricGetNormalizationOrder(arg1, arg2)
    ccall((:DMPlexMetricGetNormalizationOrder, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexMetricSetGradationFactor(arg1, arg2)
    ccall((:DMPlexMetricSetGradationFactor, $petsc_library), PetscErrorCode, (DM, PetscReal), arg1, arg2)
end

function DMPlexMetricGetGradationFactor(arg1, arg2)
    ccall((:DMPlexMetricGetGradationFactor, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexMetricSetHausdorffNumber(arg1, arg2)
    ccall((:DMPlexMetricSetHausdorffNumber, $petsc_library), PetscErrorCode, (DM, PetscReal), arg1, arg2)
end

function DMPlexMetricGetHausdorffNumber(arg1, arg2)
    ccall((:DMPlexMetricGetHausdorffNumber, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexMetricSetVerbosity(arg1, arg2)
    ccall((:DMPlexMetricSetVerbosity, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMPlexMetricGetVerbosity(arg1, arg2)
    ccall((:DMPlexMetricGetVerbosity, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexMetricSetNumIterations(arg1, arg2)
    ccall((:DMPlexMetricSetNumIterations, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMPlexMetricGetNumIterations(arg1, arg2)
    ccall((:DMPlexMetricGetNumIterations, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexMetricCreate(arg1, arg2, arg3)
    ccall((:DMPlexMetricCreate, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function DMPlexMetricCreateUniform(arg1, arg2, arg3, arg4)
    ccall((:DMPlexMetricCreateUniform, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscReal, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function DMPlexMetricCreateIsotropic(arg1, arg2, arg3, arg4)
    ccall((:DMPlexMetricCreateIsotropic, $petsc_library), PetscErrorCode, (DM, PetscInt, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function DMPlexMetricDeterminantCreate(arg1, arg2, arg3, arg4)
    ccall((:DMPlexMetricDeterminantCreate, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Vec}, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMPlexMetricEnforceSPD(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexMetricEnforceSPD, $petsc_library), PetscErrorCode, (DM, Vec, PetscBool, PetscBool, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexMetricNormalize(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexMetricNormalize, $petsc_library), PetscErrorCode, (DM, Vec, PetscBool, PetscBool, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexMetricAverage(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexMetricAverage, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscReal}, Ptr{Vec}, Vec), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexMetricAverage2(arg1, arg2, arg3, arg4)
    ccall((:DMPlexMetricAverage2, $petsc_library), PetscErrorCode, (DM, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function DMPlexMetricAverage3(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexMetricAverage3, $petsc_library), PetscErrorCode, (DM, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexMetricIntersection(arg1, arg2, arg3, arg4)
    ccall((:DMPlexMetricIntersection, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Vec}, Vec), arg1, arg2, arg3, arg4)
end

function DMPlexMetricIntersection2(arg1, arg2, arg3, arg4)
    ccall((:DMPlexMetricIntersection2, $petsc_library), PetscErrorCode, (DM, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function DMPlexMetricIntersection3(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexMetricIntersection3, $petsc_library), PetscErrorCode, (DM, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGlobalToLocalBasis(arg1, arg2)
    ccall((:DMPlexGlobalToLocalBasis, $petsc_library), PetscErrorCode, (DM, Vec), arg1, arg2)
end

function DMPlexLocalToGlobalBasis(arg1, arg2)
    ccall((:DMPlexLocalToGlobalBasis, $petsc_library), PetscErrorCode, (DM, Vec), arg1, arg2)
end

function DMPlexCreateBasisRotation(arg1, arg2, arg3, arg4)
    ccall((:DMPlexCreateBasisRotation, $petsc_library), PetscErrorCode, (DM, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4)
end

function DMPlexTopologyView(arg1, arg2)
    ccall((:DMPlexTopologyView, $petsc_library), PetscErrorCode, (DM, PetscViewer), arg1, arg2)
end

function DMPlexCoordinatesView(arg1, arg2)
    ccall((:DMPlexCoordinatesView, $petsc_library), PetscErrorCode, (DM, PetscViewer), arg1, arg2)
end

function DMPlexLabelsView(arg1, arg2)
    ccall((:DMPlexLabelsView, $petsc_library), PetscErrorCode, (DM, PetscViewer), arg1, arg2)
end

function DMPlexSectionView(arg1, arg2, arg3)
    ccall((:DMPlexSectionView, $petsc_library), PetscErrorCode, (DM, PetscViewer, DM), arg1, arg2, arg3)
end

function DMPlexGlobalVectorView(arg1, arg2, arg3, arg4)
    ccall((:DMPlexGlobalVectorView, $petsc_library), PetscErrorCode, (DM, PetscViewer, DM, Vec), arg1, arg2, arg3, arg4)
end

function DMPlexLocalVectorView(arg1, arg2, arg3, arg4)
    ccall((:DMPlexLocalVectorView, $petsc_library), PetscErrorCode, (DM, PetscViewer, DM, Vec), arg1, arg2, arg3, arg4)
end

function DMPlexVecView1D(arg1, arg2, arg3, arg4)
    ccall((:DMPlexVecView1D, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{Vec}, PetscViewer), arg1, arg2, arg3, arg4)
end

function DMPlexTopologyLoad(arg1, arg2, arg3)
    ccall((:DMPlexTopologyLoad, $petsc_library), PetscErrorCode, (DM, PetscViewer, Ptr{PetscSF}), arg1, arg2, arg3)
end

function DMPlexCoordinatesLoad(arg1, arg2, arg3)
    ccall((:DMPlexCoordinatesLoad, $petsc_library), PetscErrorCode, (DM, PetscViewer, PetscSF), arg1, arg2, arg3)
end

function DMPlexLabelsLoad(arg1, arg2, arg3)
    ccall((:DMPlexLabelsLoad, $petsc_library), PetscErrorCode, (DM, PetscViewer, PetscSF), arg1, arg2, arg3)
end

function DMPlexSectionLoad(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexSectionLoad, $petsc_library), PetscErrorCode, (DM, PetscViewer, DM, PetscSF, Ptr{PetscSF}, Ptr{PetscSF}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexGlobalVectorLoad(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexGlobalVectorLoad, $petsc_library), PetscErrorCode, (DM, PetscViewer, DM, PetscSF, Vec), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexLocalVectorLoad(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexLocalVectorLoad, $petsc_library), PetscErrorCode, (DM, PetscViewer, DM, PetscSF, Vec), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexGetLocalOffsets(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:DMPlexGetLocalOffsets, $petsc_library), PetscErrorCode, (DM, DMLabel, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function DMPlexGetLocalOffsetsSupport(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMPlexGetLocalOffsetsSupport, $petsc_library), PetscErrorCode, (DM, DMLabel, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMPlexPointQueueCreate(arg1, arg2)
    ccall((:DMPlexPointQueueCreate, $petsc_library), PetscErrorCode, (PetscInt, Ptr{DMPlexPointQueue}), arg1, arg2)
end

function DMPlexPointQueueDestroy(arg1)
    ccall((:DMPlexPointQueueDestroy, $petsc_library), PetscErrorCode, (Ptr{DMPlexPointQueue},), arg1)
end

function DMPlexPointQueueEnsureSize(arg1)
    ccall((:DMPlexPointQueueEnsureSize, $petsc_library), PetscErrorCode, (DMPlexPointQueue,), arg1)
end

function DMPlexPointQueueEnqueue(arg1, arg2)
    ccall((:DMPlexPointQueueEnqueue, $petsc_library), PetscErrorCode, (DMPlexPointQueue, PetscInt), arg1, arg2)
end

function DMPlexPointQueueDequeue(arg1, arg2)
    ccall((:DMPlexPointQueueDequeue, $petsc_library), PetscErrorCode, (DMPlexPointQueue, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexPointQueueFront(arg1, arg2)
    ccall((:DMPlexPointQueueFront, $petsc_library), PetscErrorCode, (DMPlexPointQueue, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexPointQueueBack(arg1, arg2)
    ccall((:DMPlexPointQueueBack, $petsc_library), PetscErrorCode, (DMPlexPointQueue, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexPointQueueEmpty(arg1)
    ccall((:DMPlexPointQueueEmpty, $petsc_library), PetscBool, (DMPlexPointQueue,), arg1)
end

function DMPlexPointQueueEmptyCollective(arg1, arg2, arg3)
    ccall((:DMPlexPointQueueEmptyCollective, $petsc_library), PetscErrorCode, (PetscObject, DMPlexPointQueue, Ptr{PetscBool}), arg1, arg2, arg3)
end

mutable struct _p_DMPlexTransform end

const DMPlexTransform = Ptr{_p_DMPlexTransform}

const DMPlexTransformType = Ptr{Cchar}

function DMPlexTransformCreate(arg1, arg2)
    ccall((:DMPlexTransformCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{DMPlexTransform}), arg1, arg2)
end

function DMPlexTransformSetType(arg1, arg2)
    ccall((:DMPlexTransformSetType, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPlexTransformType), arg1, arg2)
end

function DMPlexTransformGetType(arg1, arg2)
    ccall((:DMPlexTransformGetType, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{DMPlexTransformType}), arg1, arg2)
end

function DMPlexTransformRegister(arg1, arg2)
    ccall((:DMPlexTransformRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function DMPlexTransformRegisterAll()
    ccall((:DMPlexTransformRegisterAll, $petsc_library), PetscErrorCode, ())
end

function DMPlexTransformRegisterDestroy()
    ccall((:DMPlexTransformRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function DMPlexTransformSetFromOptions(arg1)
    ccall((:DMPlexTransformSetFromOptions, $petsc_library), PetscErrorCode, (DMPlexTransform,), arg1)
end

function DMPlexTransformSetUp(arg1)
    ccall((:DMPlexTransformSetUp, $petsc_library), PetscErrorCode, (DMPlexTransform,), arg1)
end

function DMPlexTransformView(arg1, arg2)
    ccall((:DMPlexTransformView, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscViewer), arg1, arg2)
end

function DMPlexTransformDestroy(arg1)
    ccall((:DMPlexTransformDestroy, $petsc_library), PetscErrorCode, (Ptr{DMPlexTransform},), arg1)
end

function DMPlexGetTransformType(arg1, arg2)
    ccall((:DMPlexGetTransformType, $petsc_library), PetscErrorCode, (DM, Ptr{DMPlexTransformType}), arg1, arg2)
end

function DMPlexSetTransformType(arg1, arg2)
    ccall((:DMPlexSetTransformType, $petsc_library), PetscErrorCode, (DM, DMPlexTransformType), arg1, arg2)
end

function DMPlexTransformGetDM(arg1, arg2)
    ccall((:DMPlexTransformGetDM, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{DM}), arg1, arg2)
end

function DMPlexTransformSetDM(arg1, arg2)
    ccall((:DMPlexTransformSetDM, $petsc_library), PetscErrorCode, (DMPlexTransform, DM), arg1, arg2)
end

function DMPlexTransformSetDimensions(arg1, arg2, arg3)
    ccall((:DMPlexTransformSetDimensions, $petsc_library), PetscErrorCode, (DMPlexTransform, DM, DM), arg1, arg2, arg3)
end

function DMPlexTransformGetChart(arg1, arg2, arg3)
    ccall((:DMPlexTransformGetChart, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexTransformGetCellType(arg1, arg2, arg3)
    ccall((:DMPlexTransformGetCellType, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscInt, Ptr{DMPolytopeType}), arg1, arg2, arg3)
end

function DMPlexTransformGetCellTypeStratum(arg1, arg2, arg3, arg4)
    ccall((:DMPlexTransformGetCellTypeStratum, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexTransformGetDepth(arg1, arg2)
    ccall((:DMPlexTransformGetDepth, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexTransformGetDepthStratum(arg1, arg2, arg3, arg4)
    ccall((:DMPlexTransformGetDepthStratum, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMPlexTransformGetActive(arg1, arg2)
    ccall((:DMPlexTransformGetActive, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{DMLabel}), arg1, arg2)
end

function DMPlexTransformSetActive(arg1, arg2)
    ccall((:DMPlexTransformSetActive, $petsc_library), PetscErrorCode, (DMPlexTransform, DMLabel), arg1, arg2)
end

function DMPlexTransformGetTargetPoint(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexTransformGetTargetPoint, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, DMPolytopeType, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexTransformGetSourcePoint(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexTransformGetSourcePoint, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscInt, Ptr{DMPolytopeType}, Ptr{DMPolytopeType}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexTransformCellTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexTransformCellTransform, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{DMPolytopeType}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexTransformCellTransformIdentity(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexTransformCellTransformIdentity, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{DMPolytopeType}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexTransformGetSubcellOrientationIdentity(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexTransformGetSubcellOrientationIdentity, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, PetscInt, PetscInt, DMPolytopeType, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexTransformGetSubcellOrientation(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexTransformGetSubcellOrientation, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, PetscInt, PetscInt, DMPolytopeType, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexTransformMapCoordinates(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMPlexTransformMapCoordinates, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, DMPolytopeType, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMPlexTransformCreateDiscLabels(arg1, arg2)
    ccall((:DMPlexTransformCreateDiscLabels, $petsc_library), PetscErrorCode, (DMPlexTransform, DM), arg1, arg2)
end

function DMPlexTransformApply(arg1, arg2, arg3)
    ccall((:DMPlexTransformApply, $petsc_library), PetscErrorCode, (DMPlexTransform, DM, Ptr{DM}), arg1, arg2, arg3)
end

function DMPlexTransformGetConeSize(arg1, arg2, arg3)
    ccall((:DMPlexTransformGetConeSize, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMPlexTransformGetCone(arg1, arg2, arg3, arg4)
    ccall((:DMPlexTransformGetCone, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscInt, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMPlexTransformGetConeOriented(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexTransformGetConeOriented, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscInt, PetscInt, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexTransformRestoreCone(arg1, arg2, arg3, arg4)
    ccall((:DMPlexTransformRestoreCone, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscInt, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMPlexTransformGetCellVertices(arg1, arg2, arg3, arg4)
    ccall((:DMPlexTransformGetCellVertices, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function DMPlexTransformGetSubcellVertices(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexTransformGetSubcellVertices, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, DMPolytopeType, PetscInt, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexTransformAdaptLabel(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMPlexTransformAdaptLabel, $petsc_library), PetscErrorCode, (DM, Vec, DMLabel, DMLabel, Ptr{DM}), arg1, arg2, arg3, arg4, arg5)
end

function DMPlexRefineRegularGetAffineTransforms(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMPlexRefineRegularGetAffineTransforms, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, Ptr{PetscInt}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMPlexRefineRegularGetAffineFaceTransforms(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMPlexRefineRegularGetAffineFaceTransforms, $petsc_library), PetscErrorCode, (DMPlexTransform, DMPolytopeType, Ptr{PetscInt}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMPlexTransformExtrudeGetLayers(arg1, arg2)
    ccall((:DMPlexTransformExtrudeGetLayers, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{PetscInt}), arg1, arg2)
end

function DMPlexTransformExtrudeSetLayers(arg1, arg2)
    ccall((:DMPlexTransformExtrudeSetLayers, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscInt), arg1, arg2)
end

function DMPlexTransformExtrudeGetThickness(arg1, arg2)
    ccall((:DMPlexTransformExtrudeGetThickness, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexTransformExtrudeSetThickness(arg1, arg2)
    ccall((:DMPlexTransformExtrudeSetThickness, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscReal), arg1, arg2)
end

function DMPlexTransformExtrudeGetTensor(arg1, arg2)
    ccall((:DMPlexTransformExtrudeGetTensor, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexTransformExtrudeSetTensor(arg1, arg2)
    ccall((:DMPlexTransformExtrudeSetTensor, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscBool), arg1, arg2)
end

function DMPlexTransformExtrudeGetSymmetric(arg1, arg2)
    ccall((:DMPlexTransformExtrudeGetSymmetric, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexTransformExtrudeSetSymmetric(arg1, arg2)
    ccall((:DMPlexTransformExtrudeSetSymmetric, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscBool), arg1, arg2)
end

function DMPlexTransformExtrudeGetPeriodic(arg1, arg2)
    ccall((:DMPlexTransformExtrudeGetPeriodic, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{PetscBool}), arg1, arg2)
end

function DMPlexTransformExtrudeSetPeriodic(arg1, arg2)
    ccall((:DMPlexTransformExtrudeSetPeriodic, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscBool), arg1, arg2)
end

function DMPlexTransformExtrudeGetNormal(arg1, arg2)
    ccall((:DMPlexTransformExtrudeGetNormal, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexTransformExtrudeSetNormal(arg1, arg2)
    ccall((:DMPlexTransformExtrudeSetNormal, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{PetscReal}), arg1, arg2)
end

function DMPlexTransformExtrudeSetNormalFunction(arg1, arg2)
    ccall((:DMPlexTransformExtrudeSetNormalFunction, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{Cvoid}), arg1, arg2)
end

function DMPlexTransformExtrudeSetThicknesses(arg1, arg2, arg3)
    ccall((:DMPlexTransformExtrudeSetThicknesses, $petsc_library), PetscErrorCode, (DMPlexTransform, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMPlexCreateEphemeral(arg1, arg2, arg3)
    ccall((:DMPlexCreateEphemeral, $petsc_library), PetscErrorCode, (DMPlexTransform, Ptr{Cchar}, Ptr{DM}), arg1, arg2, arg3)
end

function DMRedundantCreate(arg1, arg2, arg3, arg4)
    ccall((:DMRedundantCreate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscMPIInt, PetscInt, Ptr{DM}), arg1, arg2, arg3, arg4)
end

function DMRedundantSetSize(arg1, arg2, arg3)
    ccall((:DMRedundantSetSize, $petsc_library), PetscErrorCode, (DM, PetscMPIInt, PetscInt), arg1, arg2, arg3)
end

function DMRedundantGetSize(arg1, arg2, arg3)
    ccall((:DMRedundantGetSize, $petsc_library), PetscErrorCode, (DM, Ptr{PetscMPIInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMShellCreate(arg1, arg2)
    ccall((:DMShellCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{DM}), arg1, arg2)
end

function DMShellSetContext(arg1, arg2)
    ccall((:DMShellSetContext, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellGetContext(arg1, arg2)
    ccall((:DMShellGetContext, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellSetDestroyContext(arg1, arg2)
    ccall((:DMShellSetDestroyContext, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellSetMatrix(arg1, arg2)
    ccall((:DMShellSetMatrix, $petsc_library), PetscErrorCode, (DM, Mat), arg1, arg2)
end

function DMShellSetGlobalVector(arg1, arg2)
    ccall((:DMShellSetGlobalVector, $petsc_library), PetscErrorCode, (DM, Vec), arg1, arg2)
end

function DMShellGetGlobalVector(arg1, arg2)
    ccall((:DMShellGetGlobalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Vec}), arg1, arg2)
end

function DMShellSetLocalVector(arg1, arg2)
    ccall((:DMShellSetLocalVector, $petsc_library), PetscErrorCode, (DM, Vec), arg1, arg2)
end

function DMShellSetCreateGlobalVector(arg1, arg2)
    ccall((:DMShellSetCreateGlobalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellSetCreateLocalVector(arg1, arg2)
    ccall((:DMShellSetCreateLocalVector, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellSetGlobalToLocal(arg1, arg2, arg3)
    ccall((:DMShellSetGlobalToLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMShellSetGlobalToLocalVecScatter(arg1, arg2)
    ccall((:DMShellSetGlobalToLocalVecScatter, $petsc_library), PetscErrorCode, (DM, VecScatter), arg1, arg2)
end

function DMShellSetLocalToGlobal(arg1, arg2, arg3)
    ccall((:DMShellSetLocalToGlobal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMShellSetLocalToGlobalVecScatter(arg1, arg2)
    ccall((:DMShellSetLocalToGlobalVecScatter, $petsc_library), PetscErrorCode, (DM, VecScatter), arg1, arg2)
end

function DMShellSetLocalToLocal(arg1, arg2, arg3)
    ccall((:DMShellSetLocalToLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMShellSetLocalToLocalVecScatter(arg1, arg2)
    ccall((:DMShellSetLocalToLocalVecScatter, $petsc_library), PetscErrorCode, (DM, VecScatter), arg1, arg2)
end

function DMShellSetCreateMatrix(arg1, arg2)
    ccall((:DMShellSetCreateMatrix, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellSetCoarsen(arg1, arg2)
    ccall((:DMShellSetCoarsen, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellGetCoarsen(arg1, arg2)
    ccall((:DMShellGetCoarsen, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMShellSetRefine(arg1, arg2)
    ccall((:DMShellSetRefine, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellGetRefine(arg1, arg2)
    ccall((:DMShellGetRefine, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMShellSetCreateInterpolation(arg1, arg2)
    ccall((:DMShellSetCreateInterpolation, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellGetCreateInterpolation(arg1, arg2)
    ccall((:DMShellGetCreateInterpolation, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMShellSetCreateRestriction(arg1, arg2)
    ccall((:DMShellSetCreateRestriction, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellGetCreateRestriction(arg1, arg2)
    ccall((:DMShellGetCreateRestriction, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMShellSetCreateInjection(arg1, arg2)
    ccall((:DMShellSetCreateInjection, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellGetCreateInjection(arg1, arg2)
    ccall((:DMShellGetCreateInjection, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMShellSetCreateFieldDecomposition(arg1, arg2)
    ccall((:DMShellSetCreateFieldDecomposition, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellSetCreateDomainDecomposition(arg1, arg2)
    ccall((:DMShellSetCreateDomainDecomposition, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellSetCreateDomainDecompositionScatters(arg1, arg2)
    ccall((:DMShellSetCreateDomainDecompositionScatters, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellSetCreateSubDM(arg1, arg2)
    ccall((:DMShellSetCreateSubDM, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMShellGetCreateSubDM(arg1, arg2)
    ccall((:DMShellGetCreateSubDM, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMGlobalToLocalBeginDefaultShell(arg1, arg2, arg3, arg4)
    ccall((:DMGlobalToLocalBeginDefaultShell, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMGlobalToLocalEndDefaultShell(arg1, arg2, arg3, arg4)
    ccall((:DMGlobalToLocalEndDefaultShell, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMLocalToGlobalBeginDefaultShell(arg1, arg2, arg3, arg4)
    ccall((:DMLocalToGlobalBeginDefaultShell, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMLocalToGlobalEndDefaultShell(arg1, arg2, arg3, arg4)
    ccall((:DMLocalToGlobalEndDefaultShell, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMLocalToLocalBeginDefaultShell(arg1, arg2, arg3, arg4)
    ccall((:DMLocalToLocalBeginDefaultShell, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMLocalToLocalEndDefaultShell(arg1, arg2, arg3, arg4)
    ccall((:DMLocalToLocalEndDefaultShell, $petsc_library), PetscErrorCode, (DM, Vec, InsertMode, Vec), arg1, arg2, arg3, arg4)
end

function DMSlicedCreate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMSlicedCreate, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMSlicedSetPreallocation(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMSlicedSetPreallocation, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function DMSlicedSetBlockFills(arg1, arg2, arg3)
    ccall((:DMSlicedSetBlockFills, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMSlicedSetGhosts(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMSlicedSetGhosts, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

mutable struct _p_DMSwarmDataField end

const DMSwarmDataField = Ptr{_p_DMSwarmDataField}

mutable struct _p_DMSwarmDataBucket end

const DMSwarmDataBucket = Ptr{_p_DMSwarmDataBucket}

mutable struct _p_DMSwarmSort end

const DMSwarmSort = Ptr{_p_DMSwarmSort}

@enum DMSwarmType::UInt32 begin
    DMSWARM_BASIC = 0
    DMSWARM_PIC = 1
end

@enum DMSwarmMigrateType::UInt32 begin
    DMSWARM_MIGRATE_BASIC = 0
    DMSWARM_MIGRATE_DMCELLNSCATTER = 1
    DMSWARM_MIGRATE_DMCELLEXACT = 2
    DMSWARM_MIGRATE_USER = 3
end

@enum DMSwarmCollectType::UInt32 begin
    DMSWARM_COLLECT_BASIC = 0
    DMSWARM_COLLECT_DMDABOUNDINGBOX = 1
    DMSWARM_COLLECT_GENERAL = 2
    DMSWARM_COLLECT_USER = 3
end

@enum DMSwarmPICLayoutType::UInt32 begin
    DMSWARMPIC_LAYOUT_REGULAR = 0
    DMSWARMPIC_LAYOUT_GAUSS = 1
    DMSWARMPIC_LAYOUT_SUBDIVISION = 2
end

function DMSwarmCreateGlobalVectorFromField(arg1, arg2, arg3)
    ccall((:DMSwarmCreateGlobalVectorFromField, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{Vec}), arg1, arg2, arg3)
end

function DMSwarmDestroyGlobalVectorFromField(arg1, arg2, arg3)
    ccall((:DMSwarmDestroyGlobalVectorFromField, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{Vec}), arg1, arg2, arg3)
end

function DMSwarmCreateLocalVectorFromField(arg1, arg2, arg3)
    ccall((:DMSwarmCreateLocalVectorFromField, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{Vec}), arg1, arg2, arg3)
end

function DMSwarmDestroyLocalVectorFromField(arg1, arg2, arg3)
    ccall((:DMSwarmDestroyLocalVectorFromField, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{Vec}), arg1, arg2, arg3)
end

function DMSwarmInitializeFieldRegister(arg1)
    ccall((:DMSwarmInitializeFieldRegister, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMSwarmFinalizeFieldRegister(arg1)
    ccall((:DMSwarmFinalizeFieldRegister, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMSwarmSetLocalSizes(arg1, arg2, arg3)
    ccall((:DMSwarmSetLocalSizes, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt), arg1, arg2, arg3)
end

function DMSwarmRegisterPetscDatatypeField(arg1, arg2, arg3, arg4)
    ccall((:DMSwarmRegisterPetscDatatypeField, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscInt, PetscDataType), arg1, arg2, arg3, arg4)
end

function DMSwarmRegisterUserStructField(arg1, arg2, arg3)
    ccall((:DMSwarmRegisterUserStructField, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Csize_t), arg1, arg2, arg3)
end

function DMSwarmRegisterUserDatatypeField(arg1, arg2, arg3, arg4)
    ccall((:DMSwarmRegisterUserDatatypeField, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Csize_t, PetscInt), arg1, arg2, arg3, arg4)
end

function DMSwarmGetField(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMSwarmGetField, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{PetscInt}, Ptr{PetscDataType}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5)
end

function DMSwarmRestoreField(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMSwarmRestoreField, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{PetscInt}, Ptr{PetscDataType}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5)
end

function DMSwarmGetFieldInfo(arg1, arg2, arg3, arg4)
    ccall((:DMSwarmGetFieldInfo, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, Ptr{PetscInt}, Ptr{PetscDataType}), arg1, arg2, arg3, arg4)
end

function DMSwarmVectorDefineField(arg1, arg2)
    ccall((:DMSwarmVectorDefineField, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}), arg1, arg2)
end

function DMSwarmVectorGetField(arg1, arg2)
    ccall((:DMSwarmVectorGetField, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function DMSwarmAddPoint(arg1)
    ccall((:DMSwarmAddPoint, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMSwarmAddNPoints(arg1, arg2)
    ccall((:DMSwarmAddNPoints, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMSwarmRemovePoint(arg1)
    ccall((:DMSwarmRemovePoint, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMSwarmRemovePointAtIndex(arg1, arg2)
    ccall((:DMSwarmRemovePointAtIndex, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMSwarmCopyPoint(dm, arg2, arg3)
    ccall((:DMSwarmCopyPoint, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt), dm, arg2, arg3)
end

function DMSwarmGetLocalSize(arg1, arg2)
    ccall((:DMSwarmGetLocalSize, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMSwarmGetSize(arg1, arg2)
    ccall((:DMSwarmGetSize, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMSwarmGetMigrateType(arg1, arg2)
    ccall((:DMSwarmGetMigrateType, $petsc_library), PetscErrorCode, (DM, Ptr{DMSwarmMigrateType}), arg1, arg2)
end

function DMSwarmSetMigrateType(arg1, arg2)
    ccall((:DMSwarmSetMigrateType, $petsc_library), PetscErrorCode, (DM, DMSwarmMigrateType), arg1, arg2)
end

function DMSwarmMigrate(arg1, arg2)
    ccall((:DMSwarmMigrate, $petsc_library), PetscErrorCode, (DM, PetscBool), arg1, arg2)
end

function DMSwarmCollectViewCreate(arg1)
    ccall((:DMSwarmCollectViewCreate, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMSwarmCollectViewDestroy(arg1)
    ccall((:DMSwarmCollectViewDestroy, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMSwarmSetCellDM(arg1, arg2)
    ccall((:DMSwarmSetCellDM, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

function DMSwarmGetCellDM(arg1, arg2)
    ccall((:DMSwarmGetCellDM, $petsc_library), PetscErrorCode, (DM, Ptr{DM}), arg1, arg2)
end

function DMSwarmSetType(arg1, arg2)
    ccall((:DMSwarmSetType, $petsc_library), PetscErrorCode, (DM, DMSwarmType), arg1, arg2)
end

function DMSwarmSetPointsUniformCoordinates(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMSwarmSetPointsUniformCoordinates, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscInt}, InsertMode), arg1, arg2, arg3, arg4, arg5)
end

function DMSwarmSetPointCoordinates(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMSwarmSetPointCoordinates, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscReal}, PetscBool, InsertMode), arg1, arg2, arg3, arg4, arg5)
end

function DMSwarmInsertPointsUsingCellDM(arg1, arg2, arg3)
    ccall((:DMSwarmInsertPointsUsingCellDM, $petsc_library), PetscErrorCode, (DM, DMSwarmPICLayoutType, PetscInt), arg1, arg2, arg3)
end

function DMSwarmSetPointCoordinatesCellwise(arg1, arg2, arg3)
    ccall((:DMSwarmSetPointCoordinatesCellwise, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMSwarmSetPointCoordinatesRandom(arg1, arg2)
    ccall((:DMSwarmSetPointCoordinatesRandom, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMSwarmViewFieldsXDMF(arg1, arg2, arg3, arg4)
    ccall((:DMSwarmViewFieldsXDMF, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}, PetscInt, Ptr{Ptr{Cchar}}), arg1, arg2, arg3, arg4)
end

function DMSwarmViewXDMF(arg1, arg2)
    ccall((:DMSwarmViewXDMF, $petsc_library), PetscErrorCode, (DM, Ptr{Cchar}), arg1, arg2)
end

function DMSwarmSortGetAccess(arg1)
    ccall((:DMSwarmSortGetAccess, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMSwarmSortRestoreAccess(arg1)
    ccall((:DMSwarmSortRestoreAccess, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMSwarmSortGetPointsPerCell(arg1, arg2, arg3, arg4)
    ccall((:DMSwarmSortGetPointsPerCell, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMSwarmSortGetNumberOfPointsPerCell(arg1, arg2, arg3)
    ccall((:DMSwarmSortGetNumberOfPointsPerCell, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMSwarmSortGetIsValid(arg1, arg2)
    ccall((:DMSwarmSortGetIsValid, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}), arg1, arg2)
end

function DMSwarmSortGetSizes(arg1, arg2, arg3)
    ccall((:DMSwarmSortGetSizes, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMSwarmCreateMassMatrixSquare(arg1, arg2, arg3)
    ccall((:DMSwarmCreateMassMatrixSquare, $petsc_library), PetscErrorCode, (DM, DM, Ptr{Mat}), arg1, arg2, arg3)
end

function DMSwarmGetCellSwarm(arg1, arg2, arg3)
    ccall((:DMSwarmGetCellSwarm, $petsc_library), PetscErrorCode, (DM, PetscInt, DM), arg1, arg2, arg3)
end

function DMSwarmRestoreCellSwarm(arg1, arg2, arg3)
    ccall((:DMSwarmRestoreCellSwarm, $petsc_library), PetscErrorCode, (DM, PetscInt, DM), arg1, arg2, arg3)
end

function DMSwarmGetNumSpecies(arg1, arg2)
    ccall((:DMSwarmGetNumSpecies, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMSwarmSetNumSpecies(arg1, arg2)
    ccall((:DMSwarmSetNumSpecies, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMSwarmGetCoordinateFunction(arg1, arg2)
    ccall((:DMSwarmGetCoordinateFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMSwarmSetCoordinateFunction(arg1, arg2)
    ccall((:DMSwarmSetCoordinateFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMSwarmGetVelocityFunction(arg1, arg2)
    ccall((:DMSwarmGetVelocityFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMSwarmSetVelocityFunction(arg1, arg2)
    ccall((:DMSwarmSetVelocityFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMSwarmComputeLocalSize(arg1, arg2, arg3)
    ccall((:DMSwarmComputeLocalSize, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscProbFunc), arg1, arg2, arg3)
end

function DMSwarmComputeLocalSizeFromOptions(arg1)
    ccall((:DMSwarmComputeLocalSizeFromOptions, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMSwarmInitializeCoordinates(arg1)
    ccall((:DMSwarmInitializeCoordinates, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMSwarmInitializeVelocities(arg1, arg2, arg3)
    ccall((:DMSwarmInitializeVelocities, $petsc_library), PetscErrorCode, (DM, PetscProbFunc, Ptr{PetscReal}), arg1, arg2, arg3)
end

function DMSwarmInitializeVelocitiesFromOptions(arg1, arg2)
    ccall((:DMSwarmInitializeVelocitiesFromOptions, $petsc_library), PetscErrorCode, (DM, Ptr{PetscReal}), arg1, arg2)
end

function DMSwarmDataFieldGetEntries(arg1, arg2)
    ccall((:DMSwarmDataFieldGetEntries, $petsc_library), PetscErrorCode, (DMSwarmDataField, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMSwarmDataFieldRestoreEntries(arg1, arg2)
    ccall((:DMSwarmDataFieldRestoreEntries, $petsc_library), PetscErrorCode, (DMSwarmDataField, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function DMSwarmDataBucketGetDMSwarmDataFieldByName(arg1, arg2, arg3)
    ccall((:DMSwarmDataBucketGetDMSwarmDataFieldByName, $petsc_library), PetscErrorCode, (DMSwarmDataBucket, Ptr{Cchar}, Ptr{DMSwarmDataField}), arg1, arg2, arg3)
end

function DMSwarmDataBucketGetDMSwarmDataFieldIdByName(arg1, arg2, arg3)
    ccall((:DMSwarmDataBucketGetDMSwarmDataFieldIdByName, $petsc_library), PetscErrorCode, (DMSwarmDataBucket, Ptr{Cchar}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMSwarmDataBucketQueryDMSwarmDataFieldByName(arg1, arg2, arg3)
    ccall((:DMSwarmDataBucketQueryDMSwarmDataFieldByName, $petsc_library), PetscErrorCode, (DMSwarmDataBucket, Ptr{Cchar}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function DMCreate_Product(arg1)
    ccall((:DMCreate_Product, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMProductGetDM(arg1, arg2, arg3)
    ccall((:DMProductGetDM, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DM}), arg1, arg2, arg3)
end

function DMProductSetDimensionIndex(arg1, arg2, arg3)
    ccall((:DMProductSetDimensionIndex, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt), arg1, arg2, arg3)
end

function DMProductSetDM(arg1, arg2, arg3)
    ccall((:DMProductSetDM, $petsc_library), PetscErrorCode, (DM, PetscInt, DM), arg1, arg2, arg3)
end

@enum DMStagStencilLocation::UInt32 begin
    DMSTAG_NULL_LOCATION = 0
    DMSTAG_BACK_DOWN_LEFT = 1
    DMSTAG_BACK_DOWN = 2
    DMSTAG_BACK_DOWN_RIGHT = 3
    DMSTAG_BACK_LEFT = 4
    DMSTAG_BACK = 5
    DMSTAG_BACK_RIGHT = 6
    DMSTAG_BACK_UP_LEFT = 7
    DMSTAG_BACK_UP = 8
    DMSTAG_BACK_UP_RIGHT = 9
    DMSTAG_DOWN_LEFT = 10
    DMSTAG_DOWN = 11
    DMSTAG_DOWN_RIGHT = 12
    DMSTAG_LEFT = 13
    DMSTAG_ELEMENT = 14
    DMSTAG_RIGHT = 15
    DMSTAG_UP_LEFT = 16
    DMSTAG_UP = 17
    DMSTAG_UP_RIGHT = 18
    DMSTAG_FRONT_DOWN_LEFT = 19
    DMSTAG_FRONT_DOWN = 20
    DMSTAG_FRONT_DOWN_RIGHT = 21
    DMSTAG_FRONT_LEFT = 22
    DMSTAG_FRONT = 23
    DMSTAG_FRONT_RIGHT = 24
    DMSTAG_FRONT_UP_LEFT = 25
    DMSTAG_FRONT_UP = 26
    DMSTAG_FRONT_UP_RIGHT = 27
end

@enum DMStagStencilType::UInt32 begin
    DMSTAG_STENCIL_NONE = 0
    DMSTAG_STENCIL_STAR = 1
    DMSTAG_STENCIL_BOX = 2
end

function DMCreate_Stag(arg1)
    ccall((:DMCreate_Stag, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMStagCreate1d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:DMStagCreate1d, $petsc_library), PetscErrorCode, (MPI_Comm, DMBoundaryType, PetscInt, PetscInt, PetscInt, DMStagStencilType, PetscInt, Ptr{PetscInt}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function DMStagCreate2d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
    ccall((:DMStagCreate2d, $petsc_library), PetscErrorCode, (MPI_Comm, DMBoundaryType, DMBoundaryType, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, DMStagStencilType, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
end

function DMStagCreate3d(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
    ccall((:DMStagCreate3d, $petsc_library), PetscErrorCode, (MPI_Comm, DMBoundaryType, DMBoundaryType, DMBoundaryType, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, DMStagStencilType, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
end

function DMStagCreateCompatibleDMStag(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMStagCreateCompatibleDMStag, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{DM}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMStagCreateISFromStencils(arg1, arg2, arg3, arg4)
    ccall((:DMStagCreateISFromStencils, $petsc_library), PetscErrorCode, (DM, PetscInt, Ptr{DMStagStencil}, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function DMStagGetBoundaryTypes(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetBoundaryTypes, $petsc_library), PetscErrorCode, (DM, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}), arg1, arg2, arg3, arg4)
end

function DMStagGetCorners(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:DMStagGetCorners, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function DMStagGetDOF(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMStagGetDOF, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function DMStagGetEntries(arg1, arg2)
    ccall((:DMStagGetEntries, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMStagGetEntriesLocal(arg1, arg2)
    ccall((:DMStagGetEntriesLocal, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMStagGetEntriesPerElement(arg1, arg2)
    ccall((:DMStagGetEntriesPerElement, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMStagGetGhostCorners(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMStagGetGhostCorners, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMStagGetGlobalSizes(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetGlobalSizes, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMStagGetIsFirstRank(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetIsFirstRank, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function DMStagGetIsLastRank(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetIsLastRank, $petsc_library), PetscErrorCode, (DM, Ptr{PetscBool}, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function DMStagGetLocalSizes(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetLocalSizes, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMStagGetLocationDOF(arg1, arg2, arg3)
    ccall((:DMStagGetLocationDOF, $petsc_library), PetscErrorCode, (DM, DMStagStencilLocation, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMStagGetLocationSlot(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetLocationSlot, $petsc_library), PetscErrorCode, (DM, DMStagStencilLocation, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMStagGetNumRanks(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetNumRanks, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMStagGetOwnershipRanges(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetOwnershipRanges, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3, arg4)
end

function DMStagGetProductCoordinateArrays(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetProductCoordinateArrays, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMStagGetProductCoordinateArraysRead(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetProductCoordinateArraysRead, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMStagGetProductCoordinateLocationSlot(arg1, arg2, arg3)
    ccall((:DMStagGetProductCoordinateLocationSlot, $petsc_library), PetscErrorCode, (DM, DMStagStencilLocation, Ptr{PetscInt}), arg1, arg2, arg3)
end

function DMStagGetStencilType(arg1, arg2)
    ccall((:DMStagGetStencilType, $petsc_library), PetscErrorCode, (DM, Ptr{DMStagStencilType}), arg1, arg2)
end

function DMStagGetStencilWidth(arg1, arg2)
    ccall((:DMStagGetStencilWidth, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}), arg1, arg2)
end

function DMStagGetRefinementFactor(arg1, arg2, arg3, arg4)
    ccall((:DMStagGetRefinementFactor, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMStagMigrateVec(arg1, arg2, arg3, arg4)
    ccall((:DMStagMigrateVec, $petsc_library), PetscErrorCode, (DM, Vec, DM, Vec), arg1, arg2, arg3, arg4)
end

function DMStagPopulateLocalToGlobalInjective(arg1)
    ccall((:DMStagPopulateLocalToGlobalInjective, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMStagRestoreProductCoordinateArrays(arg1, arg2, arg3, arg4)
    ccall((:DMStagRestoreProductCoordinateArrays, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMStagRestoreProductCoordinateArraysRead(arg1, arg2, arg3, arg4)
    ccall((:DMStagRestoreProductCoordinateArraysRead, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMStagRestrictSimple(arg1, arg2, arg3, arg4)
    ccall((:DMStagRestrictSimple, $petsc_library), PetscErrorCode, (DM, Vec, DM, Vec), arg1, arg2, arg3, arg4)
end

function DMStagSetBoundaryTypes(arg1, arg2, arg3, arg4)
    ccall((:DMStagSetBoundaryTypes, $petsc_library), PetscErrorCode, (DM, DMBoundaryType, DMBoundaryType, DMBoundaryType), arg1, arg2, arg3, arg4)
end

function DMStagSetCoordinateDMType(arg1, arg2)
    ccall((:DMStagSetCoordinateDMType, $petsc_library), PetscErrorCode, (DM, DMType), arg1, arg2)
end

function DMStagSetDOF(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMStagSetDOF, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4, arg5)
end

function DMStagSetGlobalSizes(arg1, arg2, arg3, arg4)
    ccall((:DMStagSetGlobalSizes, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMStagSetNumRanks(arg1, arg2, arg3, arg4)
    ccall((:DMStagSetNumRanks, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMStagSetOwnershipRanges(arg1, arg2, arg3, arg4)
    ccall((:DMStagSetOwnershipRanges, $petsc_library), PetscErrorCode, (DM, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function DMStagSetStencilType(arg1, arg2)
    ccall((:DMStagSetStencilType, $petsc_library), PetscErrorCode, (DM, DMStagStencilType), arg1, arg2)
end

function DMStagSetStencilWidth(arg1, arg2)
    ccall((:DMStagSetStencilWidth, $petsc_library), PetscErrorCode, (DM, PetscInt), arg1, arg2)
end

function DMStagSetRefinementFactor(arg1, arg2, arg3, arg4)
    ccall((:DMStagSetRefinementFactor, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function DMStagSetUniformCoordinates(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMStagSetUniformCoordinates, $petsc_library), PetscErrorCode, (DM, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMStagSetUniformCoordinatesExplicit(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMStagSetUniformCoordinatesExplicit, $petsc_library), PetscErrorCode, (DM, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMStagSetUniformCoordinatesProduct(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMStagSetUniformCoordinatesProduct, $petsc_library), PetscErrorCode, (DM, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMStagStencilToIndexLocal(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMStagStencilToIndexLocal, $petsc_library), PetscErrorCode, (DM, PetscInt, PetscInt, Ptr{DMStagStencil}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function DMStagVecGetArray(arg1, arg2, arg3)
    ccall((:DMStagVecGetArray, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMStagVecGetArrayRead(arg1, arg2, arg3)
    ccall((:DMStagVecGetArrayRead, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMStagVecRestoreArray(arg1, arg2, arg3)
    ccall((:DMStagVecRestoreArray, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMStagVecRestoreArrayRead(arg1, arg2, arg3)
    ccall((:DMStagVecRestoreArrayRead, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMStagVecSplitToDMDA(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMStagVecSplitToDMDA, $petsc_library), PetscErrorCode, (DM, Vec, DMStagStencilLocation, PetscInt, Ptr{DM}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMStagGet1dCoordinateArraysDOFRead(dm, ax, ay, az)
    ccall((:DMStagGet1dCoordinateArraysDOFRead, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), dm, ax, ay, az)
end

function DMStagGet1dCoordinateLocationSlot(dm, loc, s)
    ccall((:DMStagGet1dCoordinateLocationSlot, $petsc_library), PetscErrorCode, (DM, DMStagStencilLocation, Ptr{PetscInt}), dm, loc, s)
end

function DMStagGetGhostType(dm, s)
    ccall((:DMStagGetGhostType, $petsc_library), PetscErrorCode, (DM, Ptr{DMStagStencilType}), dm, s)
end

function DMStagRestore1dCoordinateArraysDOFRead(dm, ax, ay, az)
    ccall((:DMStagRestore1dCoordinateArraysDOFRead, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), dm, ax, ay, az)
end

function DMStagSetGhostType(dm, s)
    ccall((:DMStagSetGhostType, $petsc_library), PetscErrorCode, (DM, Ptr{DMStagStencilType}), dm, s)
end

function DMStagVecGetArrayDOF(dm, v, a)
    ccall((:DMStagVecGetArrayDOF, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), dm, v, a)
end

function DMStagVecGetArrayDOFRead(dm, v, a)
    ccall((:DMStagVecGetArrayDOFRead, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), dm, v, a)
end

function DMStagVecRestoreArrayDOF(dm, v, a)
    ccall((:DMStagVecRestoreArrayDOF, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), dm, v, a)
end

function DMStagVecRestoreArrayDOFRead(dm, v, a)
    ccall((:DMStagVecRestoreArrayDOFRead, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}), dm, v, a)
end

function PetscWeakFormCreate(arg1, arg2)
    ccall((:PetscWeakFormCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscWeakForm}), arg1, arg2)
end

function PetscWeakFormDestroy(arg1)
    ccall((:PetscWeakFormDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscWeakForm},), arg1)
end

function PetscWeakFormView(arg1, arg2)
    ccall((:PetscWeakFormView, $petsc_library), PetscErrorCode, (PetscWeakForm, PetscViewer), arg1, arg2)
end

function PetscWeakFormCopy(arg1, arg2)
    ccall((:PetscWeakFormCopy, $petsc_library), PetscErrorCode, (PetscWeakForm, PetscWeakForm), arg1, arg2)
end

function PetscWeakFormClear(arg1)
    ccall((:PetscWeakFormClear, $petsc_library), PetscErrorCode, (PetscWeakForm,), arg1)
end

function PetscWeakFormGetNumFields(arg1, arg2)
    ccall((:PetscWeakFormGetNumFields, $petsc_library), PetscErrorCode, (PetscWeakForm, Ptr{PetscInt}), arg1, arg2)
end

function PetscWeakFormSetNumFields(arg1, arg2)
    ccall((:PetscWeakFormSetNumFields, $petsc_library), PetscErrorCode, (PetscWeakForm, PetscInt), arg1, arg2)
end

function PetscDSGetForceQuad(arg1, arg2)
    ccall((:PetscDSGetForceQuad, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscBool}), arg1, arg2)
end

function PetscDSSetForceQuad(arg1, arg2)
    ccall((:PetscDSSetForceQuad, $petsc_library), PetscErrorCode, (PetscDS, PetscBool), arg1, arg2)
end

function PetscFormKeySort(arg1, arg2)
    ccall((:PetscFormKeySort, $petsc_library), PetscErrorCode, (PetscInt, Ptr{PetscFormKey}), arg1, arg2)
end

function PetscWeakFormRewriteKeys(arg1, arg2, arg3, arg4)
    ccall((:PetscWeakFormRewriteKeys, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function PetscWeakFormReplaceLabel(arg1, arg2)
    ccall((:PetscWeakFormReplaceLabel, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel), arg1, arg2)
end

function PetscWeakFormClearIndex(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscWeakFormClearIndex, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscWeakFormKind, PetscInt), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscWeakFormGetObjective(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscWeakFormGetObjective, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscWeakFormAddObjective(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscWeakFormAddObjective, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscWeakFormSetObjective(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscWeakFormSetObjective, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscWeakFormGetIndexObjective(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscWeakFormGetIndexObjective, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscWeakFormSetIndexObjective(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscWeakFormSetIndexObjective, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscWeakFormGetResidual(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscWeakFormGetResidual, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscWeakFormAddResidual(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscWeakFormAddResidual, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscWeakFormSetResidual(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscWeakFormSetResidual, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscWeakFormSetIndexResidual(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscWeakFormSetIndexResidual, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscWeakFormHasJacobian(arg1, arg2)
    ccall((:PetscWeakFormHasJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, Ptr{PetscBool}), arg1, arg2)
end

function PetscWeakFormGetJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormGetJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormAddJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:PetscWeakFormAddJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function PetscWeakFormSetJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormSetJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormSetIndexJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormSetIndexJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormHasJacobianPreconditioner(arg1, arg2)
    ccall((:PetscWeakFormHasJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscWeakForm, Ptr{PetscBool}), arg1, arg2)
end

function PetscWeakFormGetJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormGetJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormAddJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:PetscWeakFormAddJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function PetscWeakFormSetJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormSetJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormSetIndexJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormSetIndexJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormHasDynamicJacobian(arg1, arg2)
    ccall((:PetscWeakFormHasDynamicJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, Ptr{PetscBool}), arg1, arg2)
end

function PetscWeakFormGetDynamicJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormGetDynamicJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormAddDynamicJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:PetscWeakFormAddDynamicJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function PetscWeakFormSetDynamicJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormSetDynamicJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormSetIndexDynamicJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormSetIndexDynamicJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormGetBdResidual(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscWeakFormGetBdResidual, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscWeakFormAddBdResidual(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscWeakFormAddBdResidual, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscWeakFormSetBdResidual(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscWeakFormSetBdResidual, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscWeakFormSetIndexBdResidual(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PetscWeakFormSetIndexBdResidual, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PetscWeakFormHasBdJacobian(arg1, arg2)
    ccall((:PetscWeakFormHasBdJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, Ptr{PetscBool}), arg1, arg2)
end

function PetscWeakFormGetBdJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormGetBdJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormAddBdJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:PetscWeakFormAddBdJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function PetscWeakFormSetBdJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormSetBdJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormSetIndexBdJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormSetIndexBdJacobian, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormHasBdJacobianPreconditioner(arg1, arg2)
    ccall((:PetscWeakFormHasBdJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscWeakForm, Ptr{PetscBool}), arg1, arg2)
end

function PetscWeakFormGetBdJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormGetBdJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormAddBdJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:PetscWeakFormAddBdJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function PetscWeakFormSetBdJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormSetBdJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormSetIndexBdJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscWeakFormSetIndexBdJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscWeakFormGetRiemannSolver(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscWeakFormGetRiemannSolver, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{Ptr{Cvoid}}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscWeakFormSetRiemannSolver(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscWeakFormSetRiemannSolver, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscWeakFormSetIndexRiemannSolver(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscWeakFormSetIndexRiemannSolver, $petsc_library), PetscErrorCode, (PetscWeakForm, DMLabel, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSInitializePackage()
    ccall((:PetscDSInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PetscDSFinalizePackage()
    ccall((:PetscDSFinalizePackage, $petsc_library), PetscErrorCode, ())
end

const PetscDSType = Ptr{Cchar}

@enum PetscDiscType::UInt32 begin
    PETSC_DISC_NONE = 0
    PETSC_DISC_FE = 1
    PETSC_DISC_FV = 2
end

# typedef void ( * PetscPointFunc ) ( PetscInt , PetscInt , PetscInt , const PetscInt [ ] , const PetscInt [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscInt [ ] , const PetscInt [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscScalar [ ] , PetscReal , const PetscReal [ ] , PetscInt , const PetscScalar [ ] , PetscScalar [ ] )
const PetscPointFunc = Ptr{Cvoid}

# typedef void ( * PetscPointJac ) ( PetscInt , PetscInt , PetscInt , const PetscInt [ ] , const PetscInt [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscInt [ ] , const PetscInt [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscScalar [ ] , PetscReal , PetscReal , const PetscReal [ ] , PetscInt , const PetscScalar [ ] , PetscScalar [ ] )
const PetscPointJac = Ptr{Cvoid}

# typedef void ( * PetscBdPointFunc ) ( PetscInt , PetscInt , PetscInt , const PetscInt [ ] , const PetscInt [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscInt [ ] , const PetscInt [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscScalar [ ] , PetscReal , const PetscReal [ ] , const PetscReal [ ] , PetscInt , const PetscScalar [ ] , PetscScalar [ ] )
const PetscBdPointFunc = Ptr{Cvoid}

# typedef void ( * PetscBdPointJac ) ( PetscInt , PetscInt , PetscInt , const PetscInt [ ] , const PetscInt [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscInt [ ] , const PetscInt [ ] , const PetscScalar [ ] , const PetscScalar [ ] , const PetscScalar [ ] , PetscReal , PetscReal , const PetscReal [ ] , const PetscReal [ ] , PetscInt , const PetscScalar [ ] , PetscScalar [ ] )
const PetscBdPointJac = Ptr{Cvoid}

# typedef void ( * PetscRiemannFunc ) ( PetscInt , PetscInt , const PetscReal [ ] , const PetscReal [ ] , const PetscScalar [ ] , const PetscScalar [ ] , PetscInt , const PetscScalar [ ] , PetscScalar [ ] , void * )
const PetscRiemannFunc = Ptr{Cvoid}

# typedef PetscErrorCode ( PetscSimplePointFn ) ( PetscInt dim , PetscReal time , const PetscReal x [ ] , PetscInt r , PetscScalar u [ ] , void * ctx )
const PetscSimplePointFn = Cvoid

const PetscSimplePointFunc = Ptr{PetscSimplePointFn}

function PetscDSCreate(arg1, arg2)
    ccall((:PetscDSCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscDS}), arg1, arg2)
end

function PetscDSDestroy(arg1)
    ccall((:PetscDSDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscDS},), arg1)
end

function PetscDSSetType(arg1, arg2)
    ccall((:PetscDSSetType, $petsc_library), PetscErrorCode, (PetscDS, PetscDSType), arg1, arg2)
end

function PetscDSGetType(arg1, arg2)
    ccall((:PetscDSGetType, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscDSType}), arg1, arg2)
end

function PetscDSSetUp(arg1)
    ccall((:PetscDSSetUp, $petsc_library), PetscErrorCode, (PetscDS,), arg1)
end

function PetscDSSetFromOptions(arg1)
    ccall((:PetscDSSetFromOptions, $petsc_library), PetscErrorCode, (PetscDS,), arg1)
end

function PetscDSViewFromOptions(arg1, arg2, arg3)
    ccall((:PetscDSViewFromOptions, $petsc_library), PetscErrorCode, (PetscDS, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PetscDSView(arg1, arg2)
    ccall((:PetscDSView, $petsc_library), PetscErrorCode, (PetscDS, PetscViewer), arg1, arg2)
end

function PetscDSRegister(arg1, arg2)
    ccall((:PetscDSRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PetscDSRegisterDestroy()
    ccall((:PetscDSRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function PetscDSGetHeightSubspace(arg1, arg2, arg3)
    ccall((:PetscDSGetHeightSubspace, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscDS}), arg1, arg2, arg3)
end

function PetscDSGetSpatialDimension(arg1, arg2)
    ccall((:PetscDSGetSpatialDimension, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscInt}), arg1, arg2)
end

function PetscDSGetCoordinateDimension(arg1, arg2)
    ccall((:PetscDSGetCoordinateDimension, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscInt}), arg1, arg2)
end

function PetscDSSetCoordinateDimension(arg1, arg2)
    ccall((:PetscDSSetCoordinateDimension, $petsc_library), PetscErrorCode, (PetscDS, PetscInt), arg1, arg2)
end

function PetscDSIsCohesive(arg1, arg2)
    ccall((:PetscDSIsCohesive, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscBool}), arg1, arg2)
end

function PetscDSGetNumCohesive(arg1, arg2)
    ccall((:PetscDSGetNumCohesive, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscInt}), arg1, arg2)
end

function PetscDSGetCohesive(arg1, arg2, arg3)
    ccall((:PetscDSGetCohesive, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscDSSetCohesive(arg1, arg2, arg3)
    ccall((:PetscDSSetCohesive, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscBool), arg1, arg2, arg3)
end

function PetscDSGetNumFields(arg1, arg2)
    ccall((:PetscDSGetNumFields, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscInt}), arg1, arg2)
end

function PetscDSGetTotalDimension(arg1, arg2)
    ccall((:PetscDSGetTotalDimension, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscInt}), arg1, arg2)
end

function PetscDSGetTotalComponents(arg1, arg2)
    ccall((:PetscDSGetTotalComponents, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscInt}), arg1, arg2)
end

function PetscDSGetFieldIndex(arg1, arg2, arg3)
    ccall((:PetscDSGetFieldIndex, $petsc_library), PetscErrorCode, (PetscDS, PetscObject, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscDSGetFieldSize(arg1, arg2, arg3)
    ccall((:PetscDSGetFieldSize, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscDSGetFieldOffset(arg1, arg2, arg3)
    ccall((:PetscDSGetFieldOffset, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscDSGetFieldOffsetCohesive(arg1, arg2, arg3)
    ccall((:PetscDSGetFieldOffsetCohesive, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscDSGetDimensions(arg1, arg2)
    ccall((:PetscDSGetDimensions, $petsc_library), PetscErrorCode, (PetscDS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function PetscDSGetComponents(arg1, arg2)
    ccall((:PetscDSGetComponents, $petsc_library), PetscErrorCode, (PetscDS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function PetscDSGetComponentOffset(arg1, arg2, arg3)
    ccall((:PetscDSGetComponentOffset, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscDSGetComponentOffsets(arg1, arg2)
    ccall((:PetscDSGetComponentOffsets, $petsc_library), PetscErrorCode, (PetscDS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function PetscDSGetComponentDerivativeOffsets(arg1, arg2)
    ccall((:PetscDSGetComponentDerivativeOffsets, $petsc_library), PetscErrorCode, (PetscDS, Ptr{Ptr{PetscInt}}), arg1, arg2)
end

function PetscDSGetComponentOffsetsCohesive(arg1, arg2, arg3)
    ccall((:PetscDSGetComponentOffsetsCohesive, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function PetscDSGetComponentDerivativeOffsetsCohesive(arg1, arg2, arg3)
    ccall((:PetscDSGetComponentDerivativeOffsetsCohesive, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function PetscDSPermuteQuadPoint(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscDSPermuteQuadPoint, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function PetscDSGetWeakForm(arg1, arg2)
    ccall((:PetscDSGetWeakForm, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscWeakForm}), arg1, arg2)
end

function PetscDSSetWeakForm(arg1, arg2)
    ccall((:PetscDSSetWeakForm, $petsc_library), PetscErrorCode, (PetscDS, PetscWeakForm), arg1, arg2)
end

function PetscDSGetDiscretization(arg1, arg2, arg3)
    ccall((:PetscDSGetDiscretization, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscObject}), arg1, arg2, arg3)
end

function PetscDSSetDiscretization(arg1, arg2, arg3)
    ccall((:PetscDSSetDiscretization, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscObject), arg1, arg2, arg3)
end

function PetscDSAddDiscretization(arg1, arg2)
    ccall((:PetscDSAddDiscretization, $petsc_library), PetscErrorCode, (PetscDS, PetscObject), arg1, arg2)
end

function PetscDSGetQuadrature(arg1, arg2)
    ccall((:PetscDSGetQuadrature, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscQuadrature}), arg1, arg2)
end

function PetscDSGetImplicit(arg1, arg2, arg3)
    ccall((:PetscDSGetImplicit, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PetscDSSetImplicit(arg1, arg2, arg3)
    ccall((:PetscDSSetImplicit, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscBool), arg1, arg2, arg3)
end

function PetscDSGetJetDegree(arg1, arg2, arg3)
    ccall((:PetscDSGetJetDegree, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PetscDSSetJetDegree(arg1, arg2, arg3)
    ccall((:PetscDSSetJetDegree, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PetscDSGetConstants(arg1, arg2, arg3)
    ccall((:PetscDSGetConstants, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscInt}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3)
end

function PetscDSSetConstants(arg1, arg2, arg3)
    ccall((:PetscDSSetConstants, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscScalar}), arg1, arg2, arg3)
end

function PetscDSGetObjective(arg1, arg2, arg3)
    ccall((:PetscDSGetObjective, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function PetscDSSetObjective(arg1, arg2, arg3)
    ccall((:PetscDSSetObjective, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PetscDSGetResidual(arg1, arg2, arg3, arg4)
    ccall((:PetscDSGetResidual, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function PetscDSSetResidual(arg1, arg2, arg3, arg4)
    ccall((:PetscDSSetResidual, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscDSGetRHSResidual(arg1, arg2, arg3, arg4)
    ccall((:PetscDSGetRHSResidual, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function PetscDSSetRHSResidual(arg1, arg2, arg3, arg4)
    ccall((:PetscDSSetRHSResidual, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscDSHasJacobian(arg1, arg2)
    ccall((:PetscDSHasJacobian, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscBool}), arg1, arg2)
end

function PetscDSGetJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSGetJacobian, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSSetJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSSetJacobian, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSUseJacobianPreconditioner(arg1, arg2)
    ccall((:PetscDSUseJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscDS, PetscBool), arg1, arg2)
end

function PetscDSHasJacobianPreconditioner(arg1, arg2)
    ccall((:PetscDSHasJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscBool}), arg1, arg2)
end

function PetscDSGetJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSGetJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSSetJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSSetJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSHasDynamicJacobian(arg1, arg2)
    ccall((:PetscDSHasDynamicJacobian, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscBool}), arg1, arg2)
end

function PetscDSGetDynamicJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSGetDynamicJacobian, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSSetDynamicJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSSetDynamicJacobian, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSGetRiemannSolver(arg1, arg2, arg3)
    ccall((:PetscDSGetRiemannSolver, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function PetscDSSetRiemannSolver(arg1, arg2, arg3)
    ccall((:PetscDSSetRiemannSolver, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PetscDSGetUpdate(arg1, arg2, arg3)
    ccall((:PetscDSGetUpdate, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function PetscDSSetUpdate(arg1, arg2, arg3)
    ccall((:PetscDSSetUpdate, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PetscDSGetContext(arg1, arg2, arg3)
    ccall((:PetscDSGetContext, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PetscDSSetContext(arg1, arg2, arg3)
    ccall((:PetscDSSetContext, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PetscDSGetBdResidual(arg1, arg2, arg3, arg4)
    ccall((:PetscDSGetBdResidual, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function PetscDSSetBdResidual(arg1, arg2, arg3, arg4)
    ccall((:PetscDSSetBdResidual, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscDSHasBdJacobian(arg1, arg2)
    ccall((:PetscDSHasBdJacobian, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscBool}), arg1, arg2)
end

function PetscDSGetBdJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSGetBdJacobian, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSSetBdJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSSetBdJacobian, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSHasBdJacobianPreconditioner(arg1, arg2)
    ccall((:PetscDSHasBdJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscBool}), arg1, arg2)
end

function PetscDSGetBdJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSGetBdJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSSetBdJacobianPreconditioner(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSSetBdJacobianPreconditioner, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSGetExactSolution(arg1, arg2, arg3, arg4)
    ccall((:PetscDSGetExactSolution, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function PetscDSSetExactSolution(arg1, arg2, arg3, arg4)
    ccall((:PetscDSSetExactSolution, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscDSGetExactSolutionTimeDerivative(arg1, arg2, arg3, arg4)
    ccall((:PetscDSGetExactSolutionTimeDerivative, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function PetscDSSetExactSolutionTimeDerivative(arg1, arg2, arg3, arg4)
    ccall((:PetscDSSetExactSolutionTimeDerivative, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PetscDSGetEvaluationArrays(arg1, arg2, arg3, arg4)
    ccall((:PetscDSGetEvaluationArrays, $petsc_library), PetscErrorCode, (PetscDS, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4)
end

function PetscDSGetWeakFormArrays(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:PetscDSGetWeakFormArrays, $petsc_library), PetscErrorCode, (PetscDS, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function PetscDSGetWorkspace(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PetscDSGetWorkspace, $petsc_library), PetscErrorCode, (PetscDS, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}, Ptr{Ptr{PetscScalar}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PetscDSCopyConstants(arg1, arg2)
    ccall((:PetscDSCopyConstants, $petsc_library), PetscErrorCode, (PetscDS, PetscDS), arg1, arg2)
end

function PetscDSCopyExactSolutions(arg1, arg2)
    ccall((:PetscDSCopyExactSolutions, $petsc_library), PetscErrorCode, (PetscDS, PetscDS), arg1, arg2)
end

function PetscDSCopyEquations(arg1, arg2)
    ccall((:PetscDSCopyEquations, $petsc_library), PetscErrorCode, (PetscDS, PetscDS), arg1, arg2)
end

function PetscDSCopy(arg1, arg2, arg3)
    ccall((:PetscDSCopy, $petsc_library), PetscErrorCode, (PetscDS, DM, PetscDS), arg1, arg2, arg3)
end

function PetscDSSelectDiscretizations(arg1, arg2, arg3, arg4)
    ccall((:PetscDSSelectDiscretizations, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscInt}, PetscDS), arg1, arg2, arg3, arg4)
end

function PetscDSSelectEquations(arg1, arg2, arg3, arg4)
    ccall((:PetscDSSelectEquations, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscInt}, PetscDS), arg1, arg2, arg3, arg4)
end

function PetscDSAddBoundary(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
    ccall((:PetscDSAddBoundary, $petsc_library), PetscErrorCode, (PetscDS, DMBoundaryConditionType, Ptr{Cchar}, DMLabel, PetscInt, Ptr{PetscInt}, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
end

function PetscDSAddBoundaryByName(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
    ccall((:PetscDSAddBoundaryByName, $petsc_library), PetscErrorCode, (PetscDS, DMBoundaryConditionType, Ptr{Cchar}, Ptr{Cchar}, PetscInt, Ptr{PetscInt}, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
end

function PetscDSUpdateBoundary(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
    ccall((:PetscDSUpdateBoundary, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, DMBoundaryConditionType, Ptr{Cchar}, DMLabel, PetscInt, Ptr{PetscInt}, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
end

function PetscDSGetNumBoundary(arg1, arg2)
    ccall((:PetscDSGetNumBoundary, $petsc_library), PetscErrorCode, (PetscDS, Ptr{PetscInt}), arg1, arg2)
end

function PetscDSGetBoundary(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:PetscDSGetBoundary, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscWeakForm}, Ptr{DMBoundaryConditionType}, Ptr{Ptr{Cchar}}, Ptr{DMLabel}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function PetscDSCopyBoundary(arg1, arg2, arg3, arg4)
    ccall((:PetscDSCopyBoundary, $petsc_library), PetscErrorCode, (PetscDS, PetscInt, Ptr{PetscInt}, PetscDS), arg1, arg2, arg3, arg4)
end

function PetscDSUpdateBoundaryLabels(arg1, arg2)
    ccall((:PetscDSUpdateBoundaryLabels, $petsc_library), PetscErrorCode, (PetscDS, DM), arg1, arg2)
end

function PetscDSDestroyBoundary(arg1)
    ccall((:PetscDSDestroyBoundary, $petsc_library), PetscErrorCode, (PetscDS,), arg1)
end

function CharacteristicInitializePackage()
    ccall((:CharacteristicInitializePackage, $petsc_library), PetscErrorCode, ())
end

function CharacteristicFinalizePackage()
    ccall((:CharacteristicFinalizePackage, $petsc_library), PetscErrorCode, ())
end

mutable struct _p_Characteristic end

const Characteristic = Ptr{_p_Characteristic}

const CharacteristicType = Ptr{Cchar}

function CharacteristicCreate(arg1, arg2)
    ccall((:CharacteristicCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Characteristic}), arg1, arg2)
end

function CharacteristicSetType(arg1, arg2)
    ccall((:CharacteristicSetType, $petsc_library), PetscErrorCode, (Characteristic, CharacteristicType), arg1, arg2)
end

function CharacteristicSetUp(arg1)
    ccall((:CharacteristicSetUp, $petsc_library), PetscErrorCode, (Characteristic,), arg1)
end

function CharacteristicSetVelocityInterpolation(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:CharacteristicSetVelocityInterpolation, $petsc_library), PetscErrorCode, (Characteristic, DM, Vec, Vec, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function CharacteristicSetVelocityInterpolationLocal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:CharacteristicSetVelocityInterpolationLocal, $petsc_library), PetscErrorCode, (Characteristic, DM, Vec, Vec, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function CharacteristicSetFieldInterpolation(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:CharacteristicSetFieldInterpolation, $petsc_library), PetscErrorCode, (Characteristic, DM, Vec, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function CharacteristicSetFieldInterpolationLocal(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:CharacteristicSetFieldInterpolationLocal, $petsc_library), PetscErrorCode, (Characteristic, DM, Vec, PetscInt, Ptr{PetscInt}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function CharacteristicSolve(arg1, arg2, arg3)
    ccall((:CharacteristicSolve, $petsc_library), PetscErrorCode, (Characteristic, PetscReal, Vec), arg1, arg2, arg3)
end

function CharacteristicDestroy(arg1)
    ccall((:CharacteristicDestroy, $petsc_library), PetscErrorCode, (Ptr{Characteristic},), arg1)
end

function CharacteristicRegister(arg1, arg2)
    ccall((:CharacteristicRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

mutable struct _p_PC end

const PC = Ptr{_p_PC}

const PCType = Ptr{Cchar}

@enum PCSide::Int32 begin
    PC_SIDE_DEFAULT = -1
    PC_LEFT = 0
    PC_RIGHT = 1
    PC_SYMMETRIC = 2
end

@enum PCRichardsonConvergedReason::Int32 begin
    PCRICHARDSON_CONVERGED_RTOL = 2
    PCRICHARDSON_CONVERGED_ATOL = 3
    PCRICHARDSON_CONVERGED_ITS = 4
    PCRICHARDSON_DIVERGED_DTOL = -4
end

@enum PCJacobiType::UInt32 begin
    PC_JACOBI_DIAGONAL = 0
    PC_JACOBI_ROWL1 = 1
    PC_JACOBI_ROWMAX = 2
    PC_JACOBI_ROWSUM = 3
end

@enum PCASMType::UInt32 begin
    PC_ASM_BASIC = 3
    PC_ASM_RESTRICT = 1
    PC_ASM_INTERPOLATE = 2
    PC_ASM_NONE = 0
end

@enum PCGASMType::UInt32 begin
    PC_GASM_BASIC = 3
    PC_GASM_RESTRICT = 1
    PC_GASM_INTERPOLATE = 2
    PC_GASM_NONE = 0
end

@enum PCCompositeType::UInt32 begin
    PC_COMPOSITE_ADDITIVE = 0
    PC_COMPOSITE_MULTIPLICATIVE = 1
    PC_COMPOSITE_SYMMETRIC_MULTIPLICATIVE = 2
    PC_COMPOSITE_SPECIAL = 3
    PC_COMPOSITE_SCHUR = 4
    PC_COMPOSITE_GKB = 5
end

@enum PCFieldSplitSchurPreType::UInt32 begin
    PC_FIELDSPLIT_SCHUR_PRE_SELF = 0
    PC_FIELDSPLIT_SCHUR_PRE_SELFP = 1
    PC_FIELDSPLIT_SCHUR_PRE_A11 = 2
    PC_FIELDSPLIT_SCHUR_PRE_USER = 3
    PC_FIELDSPLIT_SCHUR_PRE_FULL = 4
end

@enum PCFieldSplitSchurFactType::UInt32 begin
    PC_FIELDSPLIT_SCHUR_FACT_DIAG = 0
    PC_FIELDSPLIT_SCHUR_FACT_LOWER = 1
    PC_FIELDSPLIT_SCHUR_FACT_UPPER = 2
    PC_FIELDSPLIT_SCHUR_FACT_FULL = 3
end

@enum PCPARMSGlobalType::UInt32 begin
    PC_PARMS_GLOBAL_RAS = 0
    PC_PARMS_GLOBAL_SCHUR = 1
    PC_PARMS_GLOBAL_BJ = 2
end

@enum PCPARMSLocalType::UInt32 begin
    PC_PARMS_LOCAL_ILU0 = 0
    PC_PARMS_LOCAL_ILUK = 1
    PC_PARMS_LOCAL_ILUT = 2
    PC_PARMS_LOCAL_ARMS = 3
end

const PCGAMGType = Ptr{Cchar}

const PCGAMGClassicalType = Ptr{Cchar}

@enum PCMGType::UInt32 begin
    PC_MG_MULTIPLICATIVE = 0
    PC_MG_ADDITIVE = 1
    PC_MG_FULL = 2
    PC_MG_KASKADE = 3
end

@enum PCMGCycleType::UInt32 begin
    PC_MG_CYCLE_V = 1
    PC_MG_CYCLE_W = 2
end

@enum PCMGGalerkinType::UInt32 begin
    PC_MG_GALERKIN_BOTH = 0
    PC_MG_GALERKIN_PMAT = 1
    PC_MG_GALERKIN_MAT = 2
    PC_MG_GALERKIN_NONE = 3
    PC_MG_GALERKIN_EXTERNAL = 4
end

@enum PCExoticType::UInt32 begin
    PC_EXOTIC_FACE = 0
    PC_EXOTIC_WIREBASKET = 1
end

@enum PCBDDCInterfaceExtType::UInt32 begin
    PC_BDDC_INTERFACE_EXT_DIRICHLET = 0
    PC_BDDC_INTERFACE_EXT_LUMP = 1
end

@enum PCMGCoarseSpaceType::UInt32 begin
    PCMG_ADAPT_NONE = 0
    PCMG_ADAPT_POLYNOMIAL = 1
    PCMG_ADAPT_HARMONIC = 2
    PCMG_ADAPT_EIGENVECTOR = 3
    PCMG_ADAPT_GENERALIZED_EIGENVECTOR = 4
    PCMG_ADAPT_GDSW = 5
end

@enum PCPatchConstructType::UInt32 begin
    PC_PATCH_STAR = 0
    PC_PATCH_VANKA = 1
    PC_PATCH_PARDECOMP = 2
    PC_PATCH_USER = 3
    PC_PATCH_PYTHON = 4
end

@enum PCDeflationSpaceType::UInt32 begin
    PC_DEFLATION_SPACE_HAAR = 0
    PC_DEFLATION_SPACE_DB2 = 1
    PC_DEFLATION_SPACE_DB4 = 2
    PC_DEFLATION_SPACE_DB8 = 3
    PC_DEFLATION_SPACE_DB16 = 4
    PC_DEFLATION_SPACE_BIORTH22 = 5
    PC_DEFLATION_SPACE_MEYER = 6
    PC_DEFLATION_SPACE_AGGREGATION = 7
    PC_DEFLATION_SPACE_USER = 8
end

@enum PCHPDDMCoarseCorrectionType::UInt32 begin
    PC_HPDDM_COARSE_CORRECTION_DEFLATED = 0
    PC_HPDDM_COARSE_CORRECTION_ADDITIVE = 1
    PC_HPDDM_COARSE_CORRECTION_BALANCED = 2
    PC_HPDDM_COARSE_CORRECTION_NONE = 3
end

@enum PCHPDDMSchurPreType::UInt32 begin
    PC_HPDDM_SCHUR_PRE_LEAST_SQUARES = 0
    PC_HPDDM_SCHUR_PRE_GENEO = 1
end

@enum PCFailedReason::Int32 begin
    PC_SETUP_ERROR = -1
    PC_NOERROR = 0
    PC_FACTOR_STRUCT_ZEROPIVOT = 1
    PC_FACTOR_NUMERIC_ZEROPIVOT = 2
    PC_FACTOR_OUTMEMORY = 3
    PC_FACTOR_OTHER = 4
    PC_INCONSISTENT_RHS = 5
    PC_SUBPC_ERROR = 6
end

@enum PCGAMGLayoutType::UInt32 begin
    PCGAMG_LAYOUT_COMPACT = 0
    PCGAMG_LAYOUT_SPREAD = 1
end

function PCInitializePackage()
    ccall((:PCInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PCFinalizePackage()
    ccall((:PCFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PCCreate(arg1, arg2)
    ccall((:PCCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PC}), arg1, arg2)
end

function PCSetType(arg1, arg2)
    ccall((:PCSetType, $petsc_library), PetscErrorCode, (PC, PCType), arg1, arg2)
end

function PCGetType(arg1, arg2)
    ccall((:PCGetType, $petsc_library), PetscErrorCode, (PC, Ptr{PCType}), arg1, arg2)
end

function PCSetUp(arg1)
    ccall((:PCSetUp, $petsc_library), PetscErrorCode, (PC,), arg1)
end

function PCSetKSPNestLevel(arg1, arg2)
    ccall((:PCSetKSPNestLevel, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGetKSPNestLevel(arg1, arg2)
    ccall((:PCGetKSPNestLevel, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}), arg1, arg2)
end

function PCSetFailedReason(arg1, arg2)
    ccall((:PCSetFailedReason, $petsc_library), PetscErrorCode, (PC, PCFailedReason), arg1, arg2)
end

function PCGetFailedReason(arg1, arg2)
    ccall((:PCGetFailedReason, $petsc_library), PetscErrorCode, (PC, Ptr{PCFailedReason}), arg1, arg2)
end

function PCGetSetUpFailedReason(pc, reason)
    ccall((:PCGetSetUpFailedReason, $petsc_library), PetscErrorCode, (PC, Ptr{PCFailedReason}), pc, reason)
end

function PCGetFailedReasonRank(arg1, arg2)
    ccall((:PCGetFailedReasonRank, $petsc_library), PetscErrorCode, (PC, Ptr{PCFailedReason}), arg1, arg2)
end

function PCReduceFailedReason(arg1)
    ccall((:PCReduceFailedReason, $petsc_library), PetscErrorCode, (PC,), arg1)
end

function PCSetUpOnBlocks(arg1)
    ccall((:PCSetUpOnBlocks, $petsc_library), PetscErrorCode, (PC,), arg1)
end

function PCApply(arg1, arg2, arg3)
    ccall((:PCApply, $petsc_library), PetscErrorCode, (PC, Vec, Vec), arg1, arg2, arg3)
end

function PCMatApply(arg1, arg2, arg3)
    ccall((:PCMatApply, $petsc_library), PetscErrorCode, (PC, Mat, Mat), arg1, arg2, arg3)
end

function PCApplySymmetricLeft(arg1, arg2, arg3)
    ccall((:PCApplySymmetricLeft, $petsc_library), PetscErrorCode, (PC, Vec, Vec), arg1, arg2, arg3)
end

function PCApplySymmetricRight(arg1, arg2, arg3)
    ccall((:PCApplySymmetricRight, $petsc_library), PetscErrorCode, (PC, Vec, Vec), arg1, arg2, arg3)
end

function PCApplyBAorAB(arg1, arg2, arg3, arg4, arg5)
    ccall((:PCApplyBAorAB, $petsc_library), PetscErrorCode, (PC, PCSide, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function PCApplyTranspose(arg1, arg2, arg3)
    ccall((:PCApplyTranspose, $petsc_library), PetscErrorCode, (PC, Vec, Vec), arg1, arg2, arg3)
end

function PCApplyTransposeExists(arg1, arg2)
    ccall((:PCApplyTransposeExists, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCApplyBAorABTranspose(arg1, arg2, arg3, arg4, arg5)
    ccall((:PCApplyBAorABTranspose, $petsc_library), PetscErrorCode, (PC, PCSide, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function PCSetReusePreconditioner(arg1, arg2)
    ccall((:PCSetReusePreconditioner, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGetReusePreconditioner(arg1, arg2)
    ccall((:PCGetReusePreconditioner, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCSetErrorIfFailure(arg1, arg2)
    ccall((:PCSetErrorIfFailure, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCApplyRichardson(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:PCApplyRichardson, $petsc_library), PetscErrorCode, (PC, Vec, Vec, Vec, PetscReal, PetscReal, PetscReal, PetscInt, PetscBool, Ptr{PetscInt}, Ptr{PCRichardsonConvergedReason}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function PCApplyRichardsonExists(arg1, arg2)
    ccall((:PCApplyRichardsonExists, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCSetUseAmat(arg1, arg2)
    ccall((:PCSetUseAmat, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGetUseAmat(arg1, arg2)
    ccall((:PCGetUseAmat, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCRegister(arg1, arg2)
    ccall((:PCRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PCReset(arg1)
    ccall((:PCReset, $petsc_library), PetscErrorCode, (PC,), arg1)
end

function PCDestroy(arg1)
    ccall((:PCDestroy, $petsc_library), PetscErrorCode, (Ptr{PC},), arg1)
end

function PCSetFromOptions(arg1)
    ccall((:PCSetFromOptions, $petsc_library), PetscErrorCode, (PC,), arg1)
end

function PCFactorGetMatrix(arg1, arg2)
    ccall((:PCFactorGetMatrix, $petsc_library), PetscErrorCode, (PC, Ptr{Mat}), arg1, arg2)
end

function PCSetModifySubMatrices(arg1, arg2, arg3)
    ccall((:PCSetModifySubMatrices, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PCModifySubMatrices(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PCModifySubMatrices, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{IS}, Ptr{IS}, Ptr{Mat}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PCSetOperators(arg1, arg2, arg3)
    ccall((:PCSetOperators, $petsc_library), PetscErrorCode, (PC, Mat, Mat), arg1, arg2, arg3)
end

function PCGetOperators(arg1, arg2, arg3)
    ccall((:PCGetOperators, $petsc_library), PetscErrorCode, (PC, Ptr{Mat}, Ptr{Mat}), arg1, arg2, arg3)
end

function PCGetOperatorsSet(arg1, arg2, arg3)
    ccall((:PCGetOperatorsSet, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function PCView(arg1, arg2)
    ccall((:PCView, $petsc_library), PetscErrorCode, (PC, PetscViewer), arg1, arg2)
end

function PCLoad(arg1, arg2)
    ccall((:PCLoad, $petsc_library), PetscErrorCode, (PC, PetscViewer), arg1, arg2)
end

function PCViewFromOptions(arg1, arg2, arg3)
    ccall((:PCViewFromOptions, $petsc_library), PetscErrorCode, (PC, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function PCSetOptionsPrefix(arg1, arg2)
    ccall((:PCSetOptionsPrefix, $petsc_library), PetscErrorCode, (PC, Ptr{Cchar}), arg1, arg2)
end

function PCAppendOptionsPrefix(arg1, arg2)
    ccall((:PCAppendOptionsPrefix, $petsc_library), PetscErrorCode, (PC, Ptr{Cchar}), arg1, arg2)
end

function PCGetOptionsPrefix(arg1, arg2)
    ccall((:PCGetOptionsPrefix, $petsc_library), PetscErrorCode, (PC, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PCComputeOperator(arg1, arg2, arg3)
    ccall((:PCComputeOperator, $petsc_library), PetscErrorCode, (PC, MatType, Ptr{Mat}), arg1, arg2, arg3)
end

function PCComputeExplicitOperator(A, B)
    ccall((:PCComputeExplicitOperator, $petsc_library), PetscErrorCode, (PC, Ptr{Mat}), A, B)
end

function PCGetDiagonalScale(arg1, arg2)
    ccall((:PCGetDiagonalScale, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCDiagonalScaleLeft(arg1, arg2, arg3)
    ccall((:PCDiagonalScaleLeft, $petsc_library), PetscErrorCode, (PC, Vec, Vec), arg1, arg2, arg3)
end

function PCDiagonalScaleRight(arg1, arg2, arg3)
    ccall((:PCDiagonalScaleRight, $petsc_library), PetscErrorCode, (PC, Vec, Vec), arg1, arg2, arg3)
end

function PCSetDiagonalScale(arg1, arg2)
    ccall((:PCSetDiagonalScale, $petsc_library), PetscErrorCode, (PC, Vec), arg1, arg2)
end

function PCSetDM(arg1, arg2)
    ccall((:PCSetDM, $petsc_library), PetscErrorCode, (PC, DM), arg1, arg2)
end

function PCGetDM(arg1, arg2)
    ccall((:PCGetDM, $petsc_library), PetscErrorCode, (PC, Ptr{DM}), arg1, arg2)
end

function PCGetInterpolations(arg1, arg2, arg3)
    ccall((:PCGetInterpolations, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{Ptr{Mat}}), arg1, arg2, arg3)
end

function PCGetCoarseOperators(pc, arg2, arg3)
    ccall((:PCGetCoarseOperators, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{Ptr{Mat}}), pc, arg2, arg3)
end

function PCSetCoordinates(arg1, arg2, arg3, arg4)
    ccall((:PCSetCoordinates, $petsc_library), PetscErrorCode, (PC, PetscInt, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function PCSetApplicationContext(arg1, arg2)
    ccall((:PCSetApplicationContext, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCGetApplicationContext(arg1, arg2)
    ccall((:PCGetApplicationContext, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCJacobiSetType(arg1, arg2)
    ccall((:PCJacobiSetType, $petsc_library), PetscErrorCode, (PC, PCJacobiType), arg1, arg2)
end

function PCJacobiGetType(arg1, arg2)
    ccall((:PCJacobiGetType, $petsc_library), PetscErrorCode, (PC, Ptr{PCJacobiType}), arg1, arg2)
end

function PCJacobiSetUseAbs(arg1, arg2)
    ccall((:PCJacobiSetUseAbs, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCJacobiGetUseAbs(arg1, arg2)
    ccall((:PCJacobiGetUseAbs, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCJacobiSetFixDiagonal(arg1, arg2)
    ccall((:PCJacobiSetFixDiagonal, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCJacobiGetFixDiagonal(arg1, arg2)
    ccall((:PCJacobiGetFixDiagonal, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCJacobiGetDiagonal(pc, arg2, arg3)
    ccall((:PCJacobiGetDiagonal, $petsc_library), PetscErrorCode, (PC, Vec, Vec), pc, arg2, arg3)
end

function PCJacobiSetRowl1Scale(arg1, arg2)
    ccall((:PCJacobiSetRowl1Scale, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCJacobiGetRowl1Scale(arg1, arg2)
    ccall((:PCJacobiGetRowl1Scale, $petsc_library), PetscErrorCode, (PC, Ptr{PetscReal}), arg1, arg2)
end

function PCSORSetSymmetric(arg1, arg2)
    ccall((:PCSORSetSymmetric, $petsc_library), PetscErrorCode, (PC, MatSORType), arg1, arg2)
end

function PCSORGetSymmetric(arg1, arg2)
    ccall((:PCSORGetSymmetric, $petsc_library), PetscErrorCode, (PC, Ptr{MatSORType}), arg1, arg2)
end

function PCSORSetOmega(arg1, arg2)
    ccall((:PCSORSetOmega, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCSORGetOmega(arg1, arg2)
    ccall((:PCSORGetOmega, $petsc_library), PetscErrorCode, (PC, Ptr{PetscReal}), arg1, arg2)
end

function PCSORSetIterations(arg1, arg2, arg3)
    ccall((:PCSORSetIterations, $petsc_library), PetscErrorCode, (PC, PetscInt, PetscInt), arg1, arg2, arg3)
end

function PCSORGetIterations(arg1, arg2, arg3)
    ccall((:PCSORGetIterations, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PCEisenstatSetOmega(arg1, arg2)
    ccall((:PCEisenstatSetOmega, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCEisenstatGetOmega(arg1, arg2)
    ccall((:PCEisenstatGetOmega, $petsc_library), PetscErrorCode, (PC, Ptr{PetscReal}), arg1, arg2)
end

function PCEisenstatSetNoDiagonalScaling(arg1, arg2)
    ccall((:PCEisenstatSetNoDiagonalScaling, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCEisenstatGetNoDiagonalScaling(arg1, arg2)
    ccall((:PCEisenstatGetNoDiagonalScaling, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCBJacobiSetTotalBlocks(arg1, arg2, arg3)
    ccall((:PCBJacobiSetTotalBlocks, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PCBJacobiGetTotalBlocks(arg1, arg2, arg3)
    ccall((:PCBJacobiGetTotalBlocks, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function PCBJacobiSetLocalBlocks(arg1, arg2, arg3)
    ccall((:PCBJacobiSetLocalBlocks, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PCBJacobiGetLocalBlocks(arg1, arg2, arg3)
    ccall((:PCBJacobiGetLocalBlocks, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}), arg1, arg2, arg3)
end

function PCShellSetApply(arg1, arg2)
    ccall((:PCShellSetApply, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetMatApply(arg1, arg2)
    ccall((:PCShellSetMatApply, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetApplySymmetricLeft(arg1, arg2)
    ccall((:PCShellSetApplySymmetricLeft, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetApplySymmetricRight(arg1, arg2)
    ccall((:PCShellSetApplySymmetricRight, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetApplyBA(arg1, arg2)
    ccall((:PCShellSetApplyBA, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetApplyTranspose(arg1, arg2)
    ccall((:PCShellSetApplyTranspose, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetSetUp(arg1, arg2)
    ccall((:PCShellSetSetUp, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetApplyRichardson(arg1, arg2)
    ccall((:PCShellSetApplyRichardson, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetView(arg1, arg2)
    ccall((:PCShellSetView, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetDestroy(arg1, arg2)
    ccall((:PCShellSetDestroy, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetContext(arg1, arg2)
    ccall((:PCShellSetContext, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellGetContext(arg1, arg2)
    ccall((:PCShellGetContext, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetName(arg1, arg2)
    ccall((:PCShellSetName, $petsc_library), PetscErrorCode, (PC, Ptr{Cchar}), arg1, arg2)
end

function PCShellGetName(arg1, arg2)
    ccall((:PCShellGetName, $petsc_library), PetscErrorCode, (PC, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PCFactorSetZeroPivot(arg1, arg2)
    ccall((:PCFactorSetZeroPivot, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCFactorSetShiftType(arg1, arg2)
    ccall((:PCFactorSetShiftType, $petsc_library), PetscErrorCode, (PC, MatFactorShiftType), arg1, arg2)
end

function PCFactorSetShiftAmount(arg1, arg2)
    ccall((:PCFactorSetShiftAmount, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCFactorSetMatSolverType(arg1, arg2)
    ccall((:PCFactorSetMatSolverType, $petsc_library), PetscErrorCode, (PC, MatSolverType), arg1, arg2)
end

function PCFactorGetMatSolverType(arg1, arg2)
    ccall((:PCFactorGetMatSolverType, $petsc_library), PetscErrorCode, (PC, Ptr{MatSolverType}), arg1, arg2)
end

function PCFactorSetUpMatSolverType(arg1)
    ccall((:PCFactorSetUpMatSolverType, $petsc_library), PetscErrorCode, (PC,), arg1)
end

function PCFactorSetMatSolverPackage(pc, stype)
    ccall((:PCFactorSetMatSolverPackage, $petsc_library), PetscErrorCode, (PC, MatSolverType), pc, stype)
end

function PCFactorGetMatSolverPackage(pc, stype)
    ccall((:PCFactorGetMatSolverPackage, $petsc_library), PetscErrorCode, (PC, Ptr{MatSolverType}), pc, stype)
end

function PCFactorSetUpMatSolverPackage(pc)
    ccall((:PCFactorSetUpMatSolverPackage, $petsc_library), PetscErrorCode, (PC,), pc)
end

function PCFactorSetFill(arg1, arg2)
    ccall((:PCFactorSetFill, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCFactorSetColumnPivot(arg1, arg2)
    ccall((:PCFactorSetColumnPivot, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCFactorReorderForNonzeroDiagonal(arg1, arg2)
    ccall((:PCFactorReorderForNonzeroDiagonal, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCFactorSetMatOrderingType(arg1, arg2)
    ccall((:PCFactorSetMatOrderingType, $petsc_library), PetscErrorCode, (PC, MatOrderingType), arg1, arg2)
end

function PCFactorSetReuseOrdering(arg1, arg2)
    ccall((:PCFactorSetReuseOrdering, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCFactorSetReuseFill(arg1, arg2)
    ccall((:PCFactorSetReuseFill, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCFactorSetUseInPlace(arg1, arg2)
    ccall((:PCFactorSetUseInPlace, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCFactorGetUseInPlace(arg1, arg2)
    ccall((:PCFactorGetUseInPlace, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCFactorSetAllowDiagonalFill(arg1, arg2)
    ccall((:PCFactorSetAllowDiagonalFill, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCFactorGetAllowDiagonalFill(arg1, arg2)
    ccall((:PCFactorGetAllowDiagonalFill, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCFactorSetPivotInBlocks(arg1, arg2)
    ccall((:PCFactorSetPivotInBlocks, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCFactorSetLevels(arg1, arg2)
    ccall((:PCFactorSetLevels, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCFactorGetLevels(arg1, arg2)
    ccall((:PCFactorGetLevels, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}), arg1, arg2)
end

function PCFactorSetDropTolerance(arg1, arg2, arg3, arg4)
    ccall((:PCFactorSetDropTolerance, $petsc_library), PetscErrorCode, (PC, PetscReal, PetscReal, PetscInt), arg1, arg2, arg3, arg4)
end

function PCFactorGetZeroPivot(arg1, arg2)
    ccall((:PCFactorGetZeroPivot, $petsc_library), PetscErrorCode, (PC, Ptr{PetscReal}), arg1, arg2)
end

function PCFactorGetShiftAmount(arg1, arg2)
    ccall((:PCFactorGetShiftAmount, $petsc_library), PetscErrorCode, (PC, Ptr{PetscReal}), arg1, arg2)
end

function PCFactorGetShiftType(arg1, arg2)
    ccall((:PCFactorGetShiftType, $petsc_library), PetscErrorCode, (PC, Ptr{MatFactorShiftType}), arg1, arg2)
end

function PCASMSetLocalSubdomains(arg1, arg2, arg3, arg4)
    ccall((:PCASMSetLocalSubdomains, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function PCASMSetTotalSubdomains(arg1, arg2, arg3, arg4)
    ccall((:PCASMSetTotalSubdomains, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function PCASMSetOverlap(arg1, arg2)
    ccall((:PCASMSetOverlap, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCASMSetDMSubdomains(arg1, arg2)
    ccall((:PCASMSetDMSubdomains, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCASMGetDMSubdomains(arg1, arg2)
    ccall((:PCASMGetDMSubdomains, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCASMSetSortIndices(arg1, arg2)
    ccall((:PCASMSetSortIndices, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCASMSetType(arg1, arg2)
    ccall((:PCASMSetType, $petsc_library), PetscErrorCode, (PC, PCASMType), arg1, arg2)
end

function PCASMGetType(arg1, arg2)
    ccall((:PCASMGetType, $petsc_library), PetscErrorCode, (PC, Ptr{PCASMType}), arg1, arg2)
end

function PCASMSetLocalType(arg1, arg2)
    ccall((:PCASMSetLocalType, $petsc_library), PetscErrorCode, (PC, PCCompositeType), arg1, arg2)
end

function PCASMGetLocalType(arg1, arg2)
    ccall((:PCASMGetLocalType, $petsc_library), PetscErrorCode, (PC, Ptr{PCCompositeType}), arg1, arg2)
end

function PCASMCreateSubdomains(arg1, arg2, arg3)
    ccall((:PCASMCreateSubdomains, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{Ptr{IS}}), arg1, arg2, arg3)
end

function PCASMDestroySubdomains(arg1, arg2, arg3)
    ccall((:PCASMDestroySubdomains, $petsc_library), PetscErrorCode, (PetscInt, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3)
end

function PCASMCreateSubdomains2D(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:PCASMCreateSubdomains2D, $petsc_library), PetscErrorCode, (PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{IS}}, Ptr{Ptr{IS}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function PCASMGetLocalSubdomains(arg1, arg2, arg3, arg4)
    ccall((:PCASMGetLocalSubdomains, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{Ptr{IS}}, Ptr{Ptr{IS}}), arg1, arg2, arg3, arg4)
end

function PCASMGetLocalSubmatrices(arg1, arg2, arg3)
    ccall((:PCASMGetLocalSubmatrices, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{Ptr{Mat}}), arg1, arg2, arg3)
end

function PCASMGetSubMatType(arg1, arg2)
    ccall((:PCASMGetSubMatType, $petsc_library), PetscErrorCode, (PC, Ptr{MatType}), arg1, arg2)
end

function PCASMSetSubMatType(arg1, arg2)
    ccall((:PCASMSetSubMatType, $petsc_library), PetscErrorCode, (PC, MatType), arg1, arg2)
end

function PCGASMSetTotalSubdomains(arg1, arg2)
    ccall((:PCGASMSetTotalSubdomains, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGASMSetSubdomains(arg1, arg2, arg3, arg4)
    ccall((:PCGASMSetSubdomains, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{IS}, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function PCGASMSetOverlap(arg1, arg2)
    ccall((:PCGASMSetOverlap, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGASMSetUseDMSubdomains(arg1, arg2)
    ccall((:PCGASMSetUseDMSubdomains, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGASMGetUseDMSubdomains(arg1, arg2)
    ccall((:PCGASMGetUseDMSubdomains, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCGASMSetSortIndices(arg1, arg2)
    ccall((:PCGASMSetSortIndices, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGASMSetType(arg1, arg2)
    ccall((:PCGASMSetType, $petsc_library), PetscErrorCode, (PC, PCGASMType), arg1, arg2)
end

function PCGASMCreateSubdomains(arg1, arg2, arg3, arg4)
    ccall((:PCGASMCreateSubdomains, $petsc_library), PetscErrorCode, (Mat, PetscInt, Ptr{PetscInt}, Ptr{Ptr{IS}}), arg1, arg2, arg3, arg4)
end

function PCGASMDestroySubdomains(arg1, arg2, arg3)
    ccall((:PCGASMDestroySubdomains, $petsc_library), PetscErrorCode, (PetscInt, Ptr{Ptr{IS}}, Ptr{Ptr{IS}}), arg1, arg2, arg3)
end

function PCGASMCreateSubdomains2D(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:PCGASMCreateSubdomains2D, $petsc_library), PetscErrorCode, (PC, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscInt}, Ptr{Ptr{IS}}, Ptr{Ptr{IS}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function PCGASMGetSubdomains(arg1, arg2, arg3, arg4)
    ccall((:PCGASMGetSubdomains, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{Ptr{IS}}, Ptr{Ptr{IS}}), arg1, arg2, arg3, arg4)
end

function PCGASMGetSubmatrices(arg1, arg2, arg3)
    ccall((:PCGASMGetSubmatrices, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{Ptr{Mat}}), arg1, arg2, arg3)
end

function PCCompositeSetType(arg1, arg2)
    ccall((:PCCompositeSetType, $petsc_library), PetscErrorCode, (PC, PCCompositeType), arg1, arg2)
end

function PCCompositeGetType(arg1, arg2)
    ccall((:PCCompositeGetType, $petsc_library), PetscErrorCode, (PC, Ptr{PCCompositeType}), arg1, arg2)
end

function PCCompositeAddPCType(arg1, arg2)
    ccall((:PCCompositeAddPCType, $petsc_library), PetscErrorCode, (PC, PCType), arg1, arg2)
end

function PCCompositeAddPC(arg1, arg2)
    ccall((:PCCompositeAddPC, $petsc_library), PetscErrorCode, (PC, PC), arg1, arg2)
end

function PCCompositeGetNumberPC(arg1, arg2)
    ccall((:PCCompositeGetNumberPC, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}), arg1, arg2)
end

function PCCompositeGetPC(arg1, arg2, arg3)
    ccall((:PCCompositeGetPC, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{PC}), arg1, arg2, arg3)
end

function PCCompositeSpecialSetAlpha(arg1, arg2)
    ccall((:PCCompositeSpecialSetAlpha, $petsc_library), PetscErrorCode, (PC, PetscScalar), arg1, arg2)
end

function PCRedundantSetNumber(arg1, arg2)
    ccall((:PCRedundantSetNumber, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCRedundantSetScatter(arg1, arg2, arg3)
    ccall((:PCRedundantSetScatter, $petsc_library), PetscErrorCode, (PC, VecScatter, VecScatter), arg1, arg2, arg3)
end

function PCRedundantGetOperators(arg1, arg2, arg3)
    ccall((:PCRedundantGetOperators, $petsc_library), PetscErrorCode, (PC, Ptr{Mat}, Ptr{Mat}), arg1, arg2, arg3)
end

function PCSPAISetEpsilon(arg1, arg2)
    ccall((:PCSPAISetEpsilon, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCSPAISetNBSteps(arg1, arg2)
    ccall((:PCSPAISetNBSteps, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCSPAISetMax(arg1, arg2)
    ccall((:PCSPAISetMax, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCSPAISetMaxNew(arg1, arg2)
    ccall((:PCSPAISetMaxNew, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCSPAISetBlockSize(arg1, arg2)
    ccall((:PCSPAISetBlockSize, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCSPAISetCacheSize(arg1, arg2)
    ccall((:PCSPAISetCacheSize, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCSPAISetVerbose(arg1, arg2)
    ccall((:PCSPAISetVerbose, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCSPAISetSp(arg1, arg2)
    ccall((:PCSPAISetSp, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCHYPRESetType(arg1, arg2)
    ccall((:PCHYPRESetType, $petsc_library), PetscErrorCode, (PC, Ptr{Cchar}), arg1, arg2)
end

function PCHYPREGetType(arg1, arg2)
    ccall((:PCHYPREGetType, $petsc_library), PetscErrorCode, (PC, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PCHYPRESetDiscreteGradient(arg1, arg2)
    ccall((:PCHYPRESetDiscreteGradient, $petsc_library), PetscErrorCode, (PC, Mat), arg1, arg2)
end

function PCHYPRESetDiscreteCurl(arg1, arg2)
    ccall((:PCHYPRESetDiscreteCurl, $petsc_library), PetscErrorCode, (PC, Mat), arg1, arg2)
end

function PCHYPRESetInterpolations(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PCHYPRESetInterpolations, $petsc_library), PetscErrorCode, (PC, PetscInt, Mat, Ptr{Mat}, Mat, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PCHYPRESetEdgeConstantVectors(arg1, arg2, arg3, arg4)
    ccall((:PCHYPRESetEdgeConstantVectors, $petsc_library), PetscErrorCode, (PC, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function PCHYPREAMSSetInteriorNodes(arg1, arg2)
    ccall((:PCHYPREAMSSetInteriorNodes, $petsc_library), PetscErrorCode, (PC, Vec), arg1, arg2)
end

function PCHYPRESetAlphaPoissonMatrix(arg1, arg2)
    ccall((:PCHYPRESetAlphaPoissonMatrix, $petsc_library), PetscErrorCode, (PC, Mat), arg1, arg2)
end

function PCHYPRESetBetaPoissonMatrix(arg1, arg2)
    ccall((:PCHYPRESetBetaPoissonMatrix, $petsc_library), PetscErrorCode, (PC, Mat), arg1, arg2)
end

function PCFieldSplitSetFields(arg1, arg2, arg3, arg4, arg5)
    ccall((:PCFieldSplitSetFields, $petsc_library), PetscErrorCode, (PC, Ptr{Cchar}, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function PCFieldSplitSetType(arg1, arg2)
    ccall((:PCFieldSplitSetType, $petsc_library), PetscErrorCode, (PC, PCCompositeType), arg1, arg2)
end

function PCFieldSplitGetType(arg1, arg2)
    ccall((:PCFieldSplitGetType, $petsc_library), PetscErrorCode, (PC, Ptr{PCCompositeType}), arg1, arg2)
end

function PCFieldSplitSetBlockSize(arg1, arg2)
    ccall((:PCFieldSplitSetBlockSize, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCFieldSplitSetIS(arg1, arg2, arg3)
    ccall((:PCFieldSplitSetIS, $petsc_library), PetscErrorCode, (PC, Ptr{Cchar}, IS), arg1, arg2, arg3)
end

function PCFieldSplitGetIS(arg1, arg2, arg3)
    ccall((:PCFieldSplitGetIS, $petsc_library), PetscErrorCode, (PC, Ptr{Cchar}, Ptr{IS}), arg1, arg2, arg3)
end

function PCFieldSplitGetISByIndex(arg1, arg2, arg3)
    ccall((:PCFieldSplitGetISByIndex, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{IS}), arg1, arg2, arg3)
end

function PCFieldSplitRestrictIS(arg1, arg2)
    ccall((:PCFieldSplitRestrictIS, $petsc_library), PetscErrorCode, (PC, IS), arg1, arg2)
end

function PCFieldSplitSetDMSplits(arg1, arg2)
    ccall((:PCFieldSplitSetDMSplits, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCFieldSplitGetDMSplits(arg1, arg2)
    ccall((:PCFieldSplitGetDMSplits, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCFieldSplitSetDiagUseAmat(arg1, arg2)
    ccall((:PCFieldSplitSetDiagUseAmat, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCFieldSplitGetDiagUseAmat(arg1, arg2)
    ccall((:PCFieldSplitGetDiagUseAmat, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCFieldSplitSetOffDiagUseAmat(arg1, arg2)
    ccall((:PCFieldSplitSetOffDiagUseAmat, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCFieldSplitGetOffDiagUseAmat(arg1, arg2)
    ccall((:PCFieldSplitGetOffDiagUseAmat, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCFieldSplitSchurPrecondition(arg1, arg2, arg3)
    ccall((:PCFieldSplitSchurPrecondition, $petsc_library), PetscErrorCode, (PC, PCFieldSplitSchurPreType, Mat), arg1, arg2, arg3)
end

function PCFieldSplitSetSchurPre(arg1, arg2, arg3)
    ccall((:PCFieldSplitSetSchurPre, $petsc_library), PetscErrorCode, (PC, PCFieldSplitSchurPreType, Mat), arg1, arg2, arg3)
end

function PCFieldSplitGetSchurPre(arg1, arg2, arg3)
    ccall((:PCFieldSplitGetSchurPre, $petsc_library), PetscErrorCode, (PC, Ptr{PCFieldSplitSchurPreType}, Ptr{Mat}), arg1, arg2, arg3)
end

function PCFieldSplitSetSchurFactType(arg1, arg2)
    ccall((:PCFieldSplitSetSchurFactType, $petsc_library), PetscErrorCode, (PC, PCFieldSplitSchurFactType), arg1, arg2)
end

function PCFieldSplitSetSchurScale(arg1, arg2)
    ccall((:PCFieldSplitSetSchurScale, $petsc_library), PetscErrorCode, (PC, PetscScalar), arg1, arg2)
end

function PCFieldSplitGetSchurBlocks(arg1, arg2, arg3, arg4, arg5)
    ccall((:PCFieldSplitGetSchurBlocks, $petsc_library), PetscErrorCode, (PC, Ptr{Mat}, Ptr{Mat}, Ptr{Mat}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5)
end

function PCFieldSplitSchurGetS(arg1, S)
    ccall((:PCFieldSplitSchurGetS, $petsc_library), PetscErrorCode, (PC, Ptr{Mat}), arg1, S)
end

function PCFieldSplitSchurRestoreS(arg1, S)
    ccall((:PCFieldSplitSchurRestoreS, $petsc_library), PetscErrorCode, (PC, Ptr{Mat}), arg1, S)
end

function PCFieldSplitGetDetectSaddlePoint(arg1, arg2)
    ccall((:PCFieldSplitGetDetectSaddlePoint, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCFieldSplitSetDetectSaddlePoint(arg1, arg2)
    ccall((:PCFieldSplitSetDetectSaddlePoint, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCFieldSplitSetGKBTol(arg1, arg2)
    ccall((:PCFieldSplitSetGKBTol, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCFieldSplitSetGKBNu(arg1, arg2)
    ccall((:PCFieldSplitSetGKBNu, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCFieldSplitSetGKBMaxit(arg1, arg2)
    ccall((:PCFieldSplitSetGKBMaxit, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCFieldSplitSetGKBDelay(arg1, arg2)
    ccall((:PCFieldSplitSetGKBDelay, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGalerkinSetRestriction(arg1, arg2)
    ccall((:PCGalerkinSetRestriction, $petsc_library), PetscErrorCode, (PC, Mat), arg1, arg2)
end

function PCGalerkinSetInterpolation(arg1, arg2)
    ccall((:PCGalerkinSetInterpolation, $petsc_library), PetscErrorCode, (PC, Mat), arg1, arg2)
end

function PCGalerkinSetComputeSubmatrix(arg1, arg2, arg3)
    ccall((:PCGalerkinSetComputeSubmatrix, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PCPythonSetType(arg1, arg2)
    ccall((:PCPythonSetType, $petsc_library), PetscErrorCode, (PC, Ptr{Cchar}), arg1, arg2)
end

function PCPythonGetType(arg1, arg2)
    ccall((:PCPythonGetType, $petsc_library), PetscErrorCode, (PC, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PCPARMSSetGlobal(arg1, arg2)
    ccall((:PCPARMSSetGlobal, $petsc_library), PetscErrorCode, (PC, PCPARMSGlobalType), arg1, arg2)
end

function PCPARMSSetLocal(arg1, arg2)
    ccall((:PCPARMSSetLocal, $petsc_library), PetscErrorCode, (PC, PCPARMSLocalType), arg1, arg2)
end

function PCPARMSSetSolveTolerances(arg1, arg2, arg3)
    ccall((:PCPARMSSetSolveTolerances, $petsc_library), PetscErrorCode, (PC, PetscReal, PetscInt), arg1, arg2, arg3)
end

function PCPARMSSetSolveRestart(arg1, arg2)
    ccall((:PCPARMSSetSolveRestart, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCPARMSSetNonsymPerm(arg1, arg2)
    ccall((:PCPARMSSetNonsymPerm, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCPARMSSetFill(arg1, arg2, arg3, arg4)
    ccall((:PCPARMSSetFill, $petsc_library), PetscErrorCode, (PC, PetscInt, PetscInt, PetscInt), arg1, arg2, arg3, arg4)
end

function PCGAMGSetType(arg1, arg2)
    ccall((:PCGAMGSetType, $petsc_library), PetscErrorCode, (PC, PCGAMGType), arg1, arg2)
end

function PCGAMGGetType(arg1, arg2)
    ccall((:PCGAMGGetType, $petsc_library), PetscErrorCode, (PC, Ptr{PCGAMGType}), arg1, arg2)
end

function PCGAMGSetProcEqLim(arg1, arg2)
    ccall((:PCGAMGSetProcEqLim, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGAMGSetRepartition(arg1, arg2)
    ccall((:PCGAMGSetRepartition, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGAMGSetUseSAEstEig(arg1, arg2)
    ccall((:PCGAMGSetUseSAEstEig, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGAMGSetRecomputeEstEig(arg1, arg2)
    ccall((:PCGAMGSetRecomputeEstEig, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGAMGSetEigenvalues(arg1, arg2, arg3)
    ccall((:PCGAMGSetEigenvalues, $petsc_library), PetscErrorCode, (PC, PetscReal, PetscReal), arg1, arg2, arg3)
end

function PCGAMGASMSetUseAggs(arg1, arg2)
    ccall((:PCGAMGASMSetUseAggs, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGAMGSetParallelCoarseGridSolve(arg1, arg2)
    ccall((:PCGAMGSetParallelCoarseGridSolve, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGAMGSetCpuPinCoarseGrids(arg1, arg2)
    ccall((:PCGAMGSetCpuPinCoarseGrids, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGAMGSetCoarseGridLayoutType(arg1, arg2)
    ccall((:PCGAMGSetCoarseGridLayoutType, $petsc_library), PetscErrorCode, (PC, PCGAMGLayoutType), arg1, arg2)
end

function PCGAMGSetThreshold(arg1, arg2, arg3)
    ccall((:PCGAMGSetThreshold, $petsc_library), PetscErrorCode, (PC, Ptr{PetscReal}, PetscInt), arg1, arg2, arg3)
end

function PCGAMGSetRankReductionFactors(arg1, arg2, arg3)
    ccall((:PCGAMGSetRankReductionFactors, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, PetscInt), arg1, arg2, arg3)
end

function PCGAMGSetThresholdScale(arg1, arg2)
    ccall((:PCGAMGSetThresholdScale, $petsc_library), PetscErrorCode, (PC, PetscReal), arg1, arg2)
end

function PCGAMGSetCoarseEqLim(arg1, arg2)
    ccall((:PCGAMGSetCoarseEqLim, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGAMGSetNlevels(arg1, arg2)
    ccall((:PCGAMGSetNlevels, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGAMGSetNSmooths(arg1, arg2)
    ccall((:PCGAMGSetNSmooths, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGAMGSetAggressiveLevels(arg1, arg2)
    ccall((:PCGAMGSetAggressiveLevels, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGAMGSetReuseInterpolation(arg1, arg2)
    ccall((:PCGAMGSetReuseInterpolation, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGAMGFinalizePackage()
    ccall((:PCGAMGFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PCGAMGInitializePackage()
    ccall((:PCGAMGInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PCGAMGRegister(arg1, arg2)
    ccall((:PCGAMGRegister, $petsc_library), PetscErrorCode, (PCGAMGType, Ptr{Cvoid}), arg1, arg2)
end

function PCGAMGCreateGraph(arg1, arg2, arg3)
    ccall((:PCGAMGCreateGraph, $petsc_library), PetscErrorCode, (PC, Mat, Ptr{Mat}), arg1, arg2, arg3)
end

function PCGAMGSetAggressiveSquareGraph(arg1, arg2)
    ccall((:PCGAMGSetAggressiveSquareGraph, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGAMGMISkSetMinDegreeOrdering(arg1, arg2)
    ccall((:PCGAMGMISkSetMinDegreeOrdering, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGAMGMISkSetAggressive(arg1, arg2)
    ccall((:PCGAMGMISkSetAggressive, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGAMGASMSetHEM(arg1, arg2)
    ccall((:PCGAMGASMSetHEM, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCGAMGSetLowMemoryFilter(arg1, arg2)
    ccall((:PCGAMGSetLowMemoryFilter, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCGAMGSetInjectionIndex(arg1, arg2, arg3)
    ccall((:PCGAMGSetInjectionIndex, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3)
end

function PCGAMGClassicalSetType(arg1, arg2)
    ccall((:PCGAMGClassicalSetType, $petsc_library), PetscErrorCode, (PC, PCGAMGClassicalType), arg1, arg2)
end

function PCGAMGClassicalGetType(arg1, arg2)
    ccall((:PCGAMGClassicalGetType, $petsc_library), PetscErrorCode, (PC, Ptr{PCGAMGClassicalType}), arg1, arg2)
end

function PCBDDCSetDiscreteGradient(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PCBDDCSetDiscreteGradient, $petsc_library), PetscErrorCode, (PC, Mat, PetscInt, PetscInt, PetscBool, PetscBool), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PCBDDCSetDivergenceMat(arg1, arg2, arg3, arg4)
    ccall((:PCBDDCSetDivergenceMat, $petsc_library), PetscErrorCode, (PC, Mat, PetscBool, IS), arg1, arg2, arg3, arg4)
end

function PCBDDCSetChangeOfBasisMat(arg1, arg2, arg3)
    ccall((:PCBDDCSetChangeOfBasisMat, $petsc_library), PetscErrorCode, (PC, Mat, PetscBool), arg1, arg2, arg3)
end

function PCBDDCSetPrimalVerticesIS(arg1, arg2)
    ccall((:PCBDDCSetPrimalVerticesIS, $petsc_library), PetscErrorCode, (PC, IS), arg1, arg2)
end

function PCBDDCSetPrimalVerticesLocalIS(arg1, arg2)
    ccall((:PCBDDCSetPrimalVerticesLocalIS, $petsc_library), PetscErrorCode, (PC, IS), arg1, arg2)
end

function PCBDDCGetPrimalVerticesIS(arg1, arg2)
    ccall((:PCBDDCGetPrimalVerticesIS, $petsc_library), PetscErrorCode, (PC, Ptr{IS}), arg1, arg2)
end

function PCBDDCGetPrimalVerticesLocalIS(arg1, arg2)
    ccall((:PCBDDCGetPrimalVerticesLocalIS, $petsc_library), PetscErrorCode, (PC, Ptr{IS}), arg1, arg2)
end

function PCBDDCSetCoarseningRatio(arg1, arg2)
    ccall((:PCBDDCSetCoarseningRatio, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCBDDCSetLevels(arg1, arg2)
    ccall((:PCBDDCSetLevels, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCBDDCSetDirichletBoundaries(arg1, arg2)
    ccall((:PCBDDCSetDirichletBoundaries, $petsc_library), PetscErrorCode, (PC, IS), arg1, arg2)
end

function PCBDDCSetDirichletBoundariesLocal(arg1, arg2)
    ccall((:PCBDDCSetDirichletBoundariesLocal, $petsc_library), PetscErrorCode, (PC, IS), arg1, arg2)
end

function PCBDDCGetDirichletBoundaries(arg1, arg2)
    ccall((:PCBDDCGetDirichletBoundaries, $petsc_library), PetscErrorCode, (PC, Ptr{IS}), arg1, arg2)
end

function PCBDDCGetDirichletBoundariesLocal(arg1, arg2)
    ccall((:PCBDDCGetDirichletBoundariesLocal, $petsc_library), PetscErrorCode, (PC, Ptr{IS}), arg1, arg2)
end

function PCBDDCSetInterfaceExtType(arg1, arg2)
    ccall((:PCBDDCSetInterfaceExtType, $petsc_library), PetscErrorCode, (PC, PCBDDCInterfaceExtType), arg1, arg2)
end

function PCBDDCSetNeumannBoundaries(arg1, arg2)
    ccall((:PCBDDCSetNeumannBoundaries, $petsc_library), PetscErrorCode, (PC, IS), arg1, arg2)
end

function PCBDDCSetNeumannBoundariesLocal(arg1, arg2)
    ccall((:PCBDDCSetNeumannBoundariesLocal, $petsc_library), PetscErrorCode, (PC, IS), arg1, arg2)
end

function PCBDDCGetNeumannBoundaries(arg1, arg2)
    ccall((:PCBDDCGetNeumannBoundaries, $petsc_library), PetscErrorCode, (PC, Ptr{IS}), arg1, arg2)
end

function PCBDDCGetNeumannBoundariesLocal(arg1, arg2)
    ccall((:PCBDDCGetNeumannBoundariesLocal, $petsc_library), PetscErrorCode, (PC, Ptr{IS}), arg1, arg2)
end

function PCBDDCSetDofsSplitting(arg1, arg2, arg3)
    ccall((:PCBDDCSetDofsSplitting, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{IS}), arg1, arg2, arg3)
end

function PCBDDCSetDofsSplittingLocal(arg1, arg2, arg3)
    ccall((:PCBDDCSetDofsSplittingLocal, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{IS}), arg1, arg2, arg3)
end

function PCBDDCSetLocalAdjacencyGraph(arg1, arg2, arg3, arg4, arg5)
    ccall((:PCBDDCSetLocalAdjacencyGraph, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, PetscCopyMode), arg1, arg2, arg3, arg4, arg5)
end

function PCBDDCCreateFETIDPOperators(arg1, arg2, arg3, arg4, arg5)
    ccall((:PCBDDCCreateFETIDPOperators, $petsc_library), PetscErrorCode, (PC, PetscBool, Ptr{Cchar}, Ptr{Mat}, Ptr{PC}), arg1, arg2, arg3, arg4, arg5)
end

function PCBDDCMatFETIDPGetRHS(arg1, arg2, arg3)
    ccall((:PCBDDCMatFETIDPGetRHS, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function PCBDDCMatFETIDPGetSolution(arg1, arg2, arg3)
    ccall((:PCBDDCMatFETIDPGetSolution, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function PCBDDCFinalizePackage()
    ccall((:PCBDDCFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PCBDDCInitializePackage()
    ccall((:PCBDDCInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PCISInitialize(arg1)
    ccall((:PCISInitialize, $petsc_library), PetscErrorCode, (PC,), arg1)
end

function PCISSetUp(arg1, arg2, arg3)
    ccall((:PCISSetUp, $petsc_library), PetscErrorCode, (PC, PetscBool, PetscBool), arg1, arg2, arg3)
end

function PCISSetUseStiffnessScaling(arg1, arg2)
    ccall((:PCISSetUseStiffnessScaling, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCISSetSubdomainScalingFactor(arg1, arg2)
    ccall((:PCISSetSubdomainScalingFactor, $petsc_library), PetscErrorCode, (PC, PetscScalar), arg1, arg2)
end

function PCISSetSubdomainDiagonalScaling(arg1, arg2)
    ccall((:PCISSetSubdomainDiagonalScaling, $petsc_library), PetscErrorCode, (PC, Vec), arg1, arg2)
end

function PCISScatterArrayNToVecB(arg1, arg2, arg3, arg4, arg5)
    ccall((:PCISScatterArrayNToVecB, $petsc_library), PetscErrorCode, (PC, Ptr{PetscScalar}, Vec, InsertMode, ScatterMode), arg1, arg2, arg3, arg4, arg5)
end

function PCISApplySchur(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:PCISApplySchur, $petsc_library), PetscErrorCode, (PC, Vec, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function PCISApplyInvSchur(arg1, arg2, arg3, arg4, arg5)
    ccall((:PCISApplyInvSchur, $petsc_library), PetscErrorCode, (PC, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function PCISReset(arg1)
    ccall((:PCISReset, $petsc_library), PetscErrorCode, (PC,), arg1)
end

function PCMGSetType(arg1, arg2)
    ccall((:PCMGSetType, $petsc_library), PetscErrorCode, (PC, PCMGType), arg1, arg2)
end

function PCMGGetType(arg1, arg2)
    ccall((:PCMGGetType, $petsc_library), PetscErrorCode, (PC, Ptr{PCMGType}), arg1, arg2)
end

function PCMGSetLevels(arg1, arg2, arg3)
    ccall((:PCMGSetLevels, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{MPI_Comm}), arg1, arg2, arg3)
end

function PCMGGetLevels(arg1, arg2)
    ccall((:PCMGGetLevels, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}), arg1, arg2)
end

function PCMGSetDistinctSmoothUp(arg1)
    ccall((:PCMGSetDistinctSmoothUp, $petsc_library), PetscErrorCode, (PC,), arg1)
end

function PCMGSetNumberSmooth(arg1, arg2)
    ccall((:PCMGSetNumberSmooth, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCMGSetCycleType(arg1, arg2)
    ccall((:PCMGSetCycleType, $petsc_library), PetscErrorCode, (PC, PCMGCycleType), arg1, arg2)
end

function PCMGSetCycleTypeOnLevel(arg1, arg2, arg3)
    ccall((:PCMGSetCycleTypeOnLevel, $petsc_library), PetscErrorCode, (PC, PetscInt, PCMGCycleType), arg1, arg2, arg3)
end

function PCMGSetCyclesOnLevel(pc, l, t)
    ccall((:PCMGSetCyclesOnLevel, $petsc_library), PetscErrorCode, (PC, PetscInt, PetscInt), pc, l, t)
end

function PCMGMultiplicativeSetCycles(arg1, arg2)
    ccall((:PCMGMultiplicativeSetCycles, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCMGSetGalerkin(arg1, arg2)
    ccall((:PCMGSetGalerkin, $petsc_library), PetscErrorCode, (PC, PCMGGalerkinType), arg1, arg2)
end

function PCMGGetGalerkin(arg1, arg2)
    ccall((:PCMGGetGalerkin, $petsc_library), PetscErrorCode, (PC, Ptr{PCMGGalerkinType}), arg1, arg2)
end

function PCMGSetAdaptCoarseSpaceType(arg1, arg2)
    ccall((:PCMGSetAdaptCoarseSpaceType, $petsc_library), PetscErrorCode, (PC, PCMGCoarseSpaceType), arg1, arg2)
end

function PCMGGetAdaptCoarseSpaceType(arg1, arg2)
    ccall((:PCMGGetAdaptCoarseSpaceType, $petsc_library), PetscErrorCode, (PC, Ptr{PCMGCoarseSpaceType}), arg1, arg2)
end

function PCMGSetAdaptCR(arg1, arg2)
    ccall((:PCMGSetAdaptCR, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCMGGetAdaptCR(arg1, arg2)
    ccall((:PCMGGetAdaptCR, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCMGSetAdaptInterpolation(arg1, arg2)
    ccall((:PCMGSetAdaptInterpolation, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCMGGetAdaptInterpolation(arg1, arg2)
    ccall((:PCMGGetAdaptInterpolation, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCMGSetRhs(arg1, arg2, arg3)
    ccall((:PCMGSetRhs, $petsc_library), PetscErrorCode, (PC, PetscInt, Vec), arg1, arg2, arg3)
end

function PCMGSetX(arg1, arg2, arg3)
    ccall((:PCMGSetX, $petsc_library), PetscErrorCode, (PC, PetscInt, Vec), arg1, arg2, arg3)
end

function PCMGSetR(arg1, arg2, arg3)
    ccall((:PCMGSetR, $petsc_library), PetscErrorCode, (PC, PetscInt, Vec), arg1, arg2, arg3)
end

function PCMGSetRestriction(arg1, arg2, arg3)
    ccall((:PCMGSetRestriction, $petsc_library), PetscErrorCode, (PC, PetscInt, Mat), arg1, arg2, arg3)
end

function PCMGGetRestriction(arg1, arg2, arg3)
    ccall((:PCMGGetRestriction, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{Mat}), arg1, arg2, arg3)
end

function PCMGSetInjection(arg1, arg2, arg3)
    ccall((:PCMGSetInjection, $petsc_library), PetscErrorCode, (PC, PetscInt, Mat), arg1, arg2, arg3)
end

function PCMGGetInjection(arg1, arg2, arg3)
    ccall((:PCMGGetInjection, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{Mat}), arg1, arg2, arg3)
end

function PCMGSetInterpolation(arg1, arg2, arg3)
    ccall((:PCMGSetInterpolation, $petsc_library), PetscErrorCode, (PC, PetscInt, Mat), arg1, arg2, arg3)
end

function PCMGSetOperators(arg1, arg2, arg3, arg4)
    ccall((:PCMGSetOperators, $petsc_library), PetscErrorCode, (PC, PetscInt, Mat, Mat), arg1, arg2, arg3, arg4)
end

function PCMGGetInterpolation(arg1, arg2, arg3)
    ccall((:PCMGGetInterpolation, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{Mat}), arg1, arg2, arg3)
end

function PCMGSetRScale(arg1, arg2, arg3)
    ccall((:PCMGSetRScale, $petsc_library), PetscErrorCode, (PC, PetscInt, Vec), arg1, arg2, arg3)
end

function PCMGGetRScale(arg1, arg2, arg3)
    ccall((:PCMGGetRScale, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function PCMGSetResidual(arg1, arg2, arg3, arg4)
    ccall((:PCMGSetResidual, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{Cvoid}, Mat), arg1, arg2, arg3, arg4)
end

function PCMGSetResidualTranspose(arg1, arg2, arg3, arg4)
    ccall((:PCMGSetResidualTranspose, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{Cvoid}, Mat), arg1, arg2, arg3, arg4)
end

function PCMGResidualDefault(arg1, arg2, arg3, arg4)
    ccall((:PCMGResidualDefault, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function PCMGResidualTransposeDefault(arg1, arg2, arg3, arg4)
    ccall((:PCMGResidualTransposeDefault, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function PCMGMatResidualDefault(arg1, arg2, arg3, arg4)
    ccall((:PCMGMatResidualDefault, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Mat), arg1, arg2, arg3, arg4)
end

function PCMGMatResidualTransposeDefault(arg1, arg2, arg3, arg4)
    ccall((:PCMGMatResidualTransposeDefault, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Mat), arg1, arg2, arg3, arg4)
end

function PCMGGalerkinSetMatProductAlgorithm(arg1, arg2)
    ccall((:PCMGGalerkinSetMatProductAlgorithm, $petsc_library), PetscErrorCode, (PC, Ptr{Cchar}), arg1, arg2)
end

function PCMGGalerkinGetMatProductAlgorithm(arg1, arg2)
    ccall((:PCMGGalerkinGetMatProductAlgorithm, $petsc_library), PetscErrorCode, (PC, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PCMGGetGridComplexity(arg1, arg2, arg3)
    ccall((:PCMGGetGridComplexity, $petsc_library), PetscErrorCode, (PC, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function PCHMGSetReuseInterpolation(arg1, arg2)
    ccall((:PCHMGSetReuseInterpolation, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCHMGSetUseSubspaceCoarsening(arg1, arg2)
    ccall((:PCHMGSetUseSubspaceCoarsening, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCHMGSetInnerPCType(arg1, arg2)
    ccall((:PCHMGSetInnerPCType, $petsc_library), PetscErrorCode, (PC, PCType), arg1, arg2)
end

function PCHMGSetCoarseningComponent(arg1, arg2)
    ccall((:PCHMGSetCoarseningComponent, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCHMGUseMatMAIJ(arg1, arg2)
    ccall((:PCHMGUseMatMAIJ, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCTelescopeGetSubcommType(arg1, arg2)
    ccall((:PCTelescopeGetSubcommType, $petsc_library), PetscErrorCode, (PC, Ptr{PetscSubcommType}), arg1, arg2)
end

function PCTelescopeSetSubcommType(arg1, arg2)
    ccall((:PCTelescopeSetSubcommType, $petsc_library), PetscErrorCode, (PC, PetscSubcommType), arg1, arg2)
end

function PCTelescopeGetReductionFactor(arg1, arg2)
    ccall((:PCTelescopeGetReductionFactor, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}), arg1, arg2)
end

function PCTelescopeSetReductionFactor(arg1, arg2)
    ccall((:PCTelescopeSetReductionFactor, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCTelescopeGetIgnoreDM(arg1, arg2)
    ccall((:PCTelescopeGetIgnoreDM, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCTelescopeSetIgnoreDM(arg1, arg2)
    ccall((:PCTelescopeSetIgnoreDM, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCTelescopeGetUseCoarseDM(arg1, arg2)
    ccall((:PCTelescopeGetUseCoarseDM, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCTelescopeSetUseCoarseDM(arg1, arg2)
    ccall((:PCTelescopeSetUseCoarseDM, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCTelescopeGetIgnoreKSPComputeOperators(arg1, arg2)
    ccall((:PCTelescopeGetIgnoreKSPComputeOperators, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCTelescopeSetIgnoreKSPComputeOperators(arg1, arg2)
    ccall((:PCTelescopeSetIgnoreKSPComputeOperators, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCTelescopeGetDM(arg1, arg2)
    ccall((:PCTelescopeGetDM, $petsc_library), PetscErrorCode, (PC, Ptr{DM}), arg1, arg2)
end

function PCPatchSetSaveOperators(arg1, arg2)
    ccall((:PCPatchSetSaveOperators, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCPatchGetSaveOperators(arg1, arg2)
    ccall((:PCPatchGetSaveOperators, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCPatchSetPrecomputeElementTensors(arg1, arg2)
    ccall((:PCPatchSetPrecomputeElementTensors, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCPatchGetPrecomputeElementTensors(arg1, arg2)
    ccall((:PCPatchGetPrecomputeElementTensors, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCPatchSetPartitionOfUnity(arg1, arg2)
    ccall((:PCPatchSetPartitionOfUnity, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCPatchGetPartitionOfUnity(arg1, arg2)
    ccall((:PCPatchGetPartitionOfUnity, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCPatchSetSubMatType(arg1, arg2)
    ccall((:PCPatchSetSubMatType, $petsc_library), PetscErrorCode, (PC, MatType), arg1, arg2)
end

function PCPatchGetSubMatType(arg1, arg2)
    ccall((:PCPatchGetSubMatType, $petsc_library), PetscErrorCode, (PC, Ptr{MatType}), arg1, arg2)
end

function PCPatchSetCellNumbering(arg1, arg2)
    ccall((:PCPatchSetCellNumbering, $petsc_library), PetscErrorCode, (PC, PetscSection), arg1, arg2)
end

function PCPatchGetCellNumbering(arg1, arg2)
    ccall((:PCPatchGetCellNumbering, $petsc_library), PetscErrorCode, (PC, Ptr{PetscSection}), arg1, arg2)
end

function PCPatchSetConstructType(arg1, arg2, arg3, arg4)
    ccall((:PCPatchSetConstructType, $petsc_library), PetscErrorCode, (PC, PCPatchConstructType, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PCPatchGetConstructType(arg1, arg2, arg3, arg4)
    ccall((:PCPatchGetConstructType, $petsc_library), PetscErrorCode, (PC, Ptr{PCPatchConstructType}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function PCPatchSetDiscretisationInfo(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:PCPatchSetDiscretisationInfo, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{DM}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function PCPatchSetComputeOperator(arg1, arg2, arg3)
    ccall((:PCPatchSetComputeOperator, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PCPatchSetComputeFunction(pc, func, ctx)
    ccall((:PCPatchSetComputeFunction, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}, Ptr{Cvoid}), pc, func, ctx)
end

function PCPatchSetComputeOperatorInteriorFacets(arg1, arg2, arg3)
    ccall((:PCPatchSetComputeOperatorInteriorFacets, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function PCPatchSetComputeFunctionInteriorFacets(pc, func, ctx)
    ccall((:PCPatchSetComputeFunctionInteriorFacets, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}, Ptr{Cvoid}), pc, func, ctx)
end

function PCLMVMSetMatLMVM(arg1, arg2)
    ccall((:PCLMVMSetMatLMVM, $petsc_library), PetscErrorCode, (PC, Mat), arg1, arg2)
end

function PCLMVMGetMatLMVM(arg1, arg2)
    ccall((:PCLMVMGetMatLMVM, $petsc_library), PetscErrorCode, (PC, Ptr{Mat}), arg1, arg2)
end

function PCLMVMSetIS(arg1, arg2)
    ccall((:PCLMVMSetIS, $petsc_library), PetscErrorCode, (PC, IS), arg1, arg2)
end

function PCLMVMClearIS(arg1)
    ccall((:PCLMVMClearIS, $petsc_library), PetscErrorCode, (PC,), arg1)
end

function PCLMVMSetUpdateVec(arg1, arg2)
    ccall((:PCLMVMSetUpdateVec, $petsc_library), PetscErrorCode, (PC, Vec), arg1, arg2)
end

function PCExoticSetType(arg1, arg2)
    ccall((:PCExoticSetType, $petsc_library), PetscErrorCode, (PC, PCExoticType), arg1, arg2)
end

function PCDeflationSetInitOnly(arg1, arg2)
    ccall((:PCDeflationSetInitOnly, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCDeflationSetLevels(arg1, arg2)
    ccall((:PCDeflationSetLevels, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCDeflationSetReductionFactor(arg1, arg2)
    ccall((:PCDeflationSetReductionFactor, $petsc_library), PetscErrorCode, (PC, PetscInt), arg1, arg2)
end

function PCDeflationSetCorrectionFactor(arg1, arg2)
    ccall((:PCDeflationSetCorrectionFactor, $petsc_library), PetscErrorCode, (PC, PetscScalar), arg1, arg2)
end

function PCDeflationSetSpaceToCompute(arg1, arg2, arg3)
    ccall((:PCDeflationSetSpaceToCompute, $petsc_library), PetscErrorCode, (PC, PCDeflationSpaceType, PetscInt), arg1, arg2, arg3)
end

function PCDeflationSetSpace(arg1, arg2, arg3)
    ccall((:PCDeflationSetSpace, $petsc_library), PetscErrorCode, (PC, Mat, PetscBool), arg1, arg2, arg3)
end

function PCDeflationSetProjectionNullSpaceMat(arg1, arg2)
    ccall((:PCDeflationSetProjectionNullSpaceMat, $petsc_library), PetscErrorCode, (PC, Mat), arg1, arg2)
end

function PCDeflationSetCoarseMat(arg1, arg2)
    ccall((:PCDeflationSetCoarseMat, $petsc_library), PetscErrorCode, (PC, Mat), arg1, arg2)
end

function PCDeflationGetPC(arg1, arg2)
    ccall((:PCDeflationGetPC, $petsc_library), PetscErrorCode, (PC, Ptr{PC}), arg1, arg2)
end

function PCHPDDMSetAuxiliaryMat(arg1, arg2, arg3, arg4, arg5)
    ccall((:PCHPDDMSetAuxiliaryMat, $petsc_library), PetscErrorCode, (PC, IS, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function PCHPDDMSetRHSMat(arg1, arg2)
    ccall((:PCHPDDMSetRHSMat, $petsc_library), PetscErrorCode, (PC, Mat), arg1, arg2)
end

function PCHPDDMHasNeumannMat(arg1, arg2)
    ccall((:PCHPDDMHasNeumannMat, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCHPDDMSetCoarseCorrectionType(arg1, arg2)
    ccall((:PCHPDDMSetCoarseCorrectionType, $petsc_library), PetscErrorCode, (PC, PCHPDDMCoarseCorrectionType), arg1, arg2)
end

function PCHPDDMGetCoarseCorrectionType(arg1, arg2)
    ccall((:PCHPDDMGetCoarseCorrectionType, $petsc_library), PetscErrorCode, (PC, Ptr{PCHPDDMCoarseCorrectionType}), arg1, arg2)
end

function PCHPDDMSetSTShareSubKSP(arg1, arg2)
    ccall((:PCHPDDMSetSTShareSubKSP, $petsc_library), PetscErrorCode, (PC, PetscBool), arg1, arg2)
end

function PCHPDDMGetSTShareSubKSP(arg1, arg2)
    ccall((:PCHPDDMGetSTShareSubKSP, $petsc_library), PetscErrorCode, (PC, Ptr{PetscBool}), arg1, arg2)
end

function PCHPDDMSetDeflationMat(arg1, arg2, arg3)
    ccall((:PCHPDDMSetDeflationMat, $petsc_library), PetscErrorCode, (PC, IS, Mat), arg1, arg2, arg3)
end

function PCHPDDMFinalizePackage()
    ccall((:PCHPDDMFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function PCHPDDMInitializePackage()
    ccall((:PCHPDDMInitializePackage, $petsc_library), PetscErrorCode, ())
end

function PCAmgXGetResources(arg1, arg2)
    ccall((:PCAmgXGetResources, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCMatSetApplyOperation(arg1, arg2)
    ccall((:PCMatSetApplyOperation, $petsc_library), PetscErrorCode, (PC, MatOperation), arg1, arg2)
end

function PCMatGetApplyOperation(arg1, arg2)
    ccall((:PCMatGetApplyOperation, $petsc_library), PetscErrorCode, (PC, Ptr{MatOperation}), arg1, arg2)
end

function KSPInitializePackage()
    ccall((:KSPInitializePackage, $petsc_library), PetscErrorCode, ())
end

function KSPFinalizePackage()
    ccall((:KSPFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function KSPCreate(arg1, arg2)
    ccall((:KSPCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{KSP}), arg1, arg2)
end

function KSPSetType(arg1, arg2)
    ccall((:KSPSetType, $petsc_library), PetscErrorCode, (KSP, KSPType), arg1, arg2)
end

function KSPGetType(arg1, arg2)
    ccall((:KSPGetType, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPType}), arg1, arg2)
end

function KSPSetUp(arg1)
    ccall((:KSPSetUp, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPSetUpOnBlocks(arg1)
    ccall((:KSPSetUpOnBlocks, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPSolve(arg1, arg2, arg3)
    ccall((:KSPSolve, $petsc_library), PetscErrorCode, (KSP, Vec, Vec), arg1, arg2, arg3)
end

function KSPSolveTranspose(arg1, arg2, arg3)
    ccall((:KSPSolveTranspose, $petsc_library), PetscErrorCode, (KSP, Vec, Vec), arg1, arg2, arg3)
end

function KSPSetUseExplicitTranspose(arg1, arg2)
    ccall((:KSPSetUseExplicitTranspose, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPMatSolve(arg1, arg2, arg3)
    ccall((:KSPMatSolve, $petsc_library), PetscErrorCode, (KSP, Mat, Mat), arg1, arg2, arg3)
end

function KSPMatSolveTranspose(arg1, arg2, arg3)
    ccall((:KSPMatSolveTranspose, $petsc_library), PetscErrorCode, (KSP, Mat, Mat), arg1, arg2, arg3)
end

function KSPSetMatSolveBatchSize(arg1, arg2)
    ccall((:KSPSetMatSolveBatchSize, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPSetMatSolveBlockSize(ksp, n)
    ccall((:KSPSetMatSolveBlockSize, $petsc_library), PetscErrorCode, (KSP, PetscInt), ksp, n)
end

function KSPGetMatSolveBatchSize(arg1, arg2)
    ccall((:KSPGetMatSolveBatchSize, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPGetMatSolveBlockSize(ksp, n)
    ccall((:KSPGetMatSolveBlockSize, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), ksp, n)
end

function KSPReset(arg1)
    ccall((:KSPReset, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPResetViewers(arg1)
    ccall((:KSPResetViewers, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPDestroy(arg1)
    ccall((:KSPDestroy, $petsc_library), PetscErrorCode, (Ptr{KSP},), arg1)
end

function KSPSetReusePreconditioner(arg1, arg2)
    ccall((:KSPSetReusePreconditioner, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetReusePreconditioner(arg1, arg2)
    ccall((:KSPGetReusePreconditioner, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

function KSPSetSkipPCSetFromOptions(arg1, arg2)
    ccall((:KSPSetSkipPCSetFromOptions, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPCheckSolve(arg1, arg2, arg3)
    ccall((:KSPCheckSolve, $petsc_library), PetscErrorCode, (KSP, PC, Vec), arg1, arg2, arg3)
end

function KSPRegister(arg1, arg2)
    ccall((:KSPRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function KSPMonitorRegister(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:KSPMonitorRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, PetscViewerType, PetscViewerFormat, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function KSPSetPCSide(arg1, arg2)
    ccall((:KSPSetPCSide, $petsc_library), PetscErrorCode, (KSP, PCSide), arg1, arg2)
end

function KSPGetPCSide(arg1, arg2)
    ccall((:KSPGetPCSide, $petsc_library), PetscErrorCode, (KSP, Ptr{PCSide}), arg1, arg2)
end

function KSPSetTolerances(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPSetTolerances, $petsc_library), PetscErrorCode, (KSP, PetscReal, PetscReal, PetscReal, PetscInt), arg1, arg2, arg3, arg4, arg5)
end

function KSPGetTolerances(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPGetTolerances, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function KSPSetMinimumIterations(arg1, arg2)
    ccall((:KSPSetMinimumIterations, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPGetMinimumIterations(arg1, arg2)
    ccall((:KSPGetMinimumIterations, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPSetInitialGuessNonzero(arg1, arg2)
    ccall((:KSPSetInitialGuessNonzero, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetInitialGuessNonzero(arg1, arg2)
    ccall((:KSPGetInitialGuessNonzero, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

function KSPSetErrorIfNotConverged(arg1, arg2)
    ccall((:KSPSetErrorIfNotConverged, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetErrorIfNotConverged(arg1, arg2)
    ccall((:KSPGetErrorIfNotConverged, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

function KSPSetComputeEigenvalues(arg1, arg2)
    ccall((:KSPSetComputeEigenvalues, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPSetComputeRitz(arg1, arg2)
    ccall((:KSPSetComputeRitz, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetComputeEigenvalues(arg1, arg2)
    ccall((:KSPGetComputeEigenvalues, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

function KSPSetComputeSingularValues(arg1, arg2)
    ccall((:KSPSetComputeSingularValues, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetComputeSingularValues(arg1, arg2)
    ccall((:KSPGetComputeSingularValues, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

function KSPGetRhs(arg1, arg2)
    ccall((:KSPGetRhs, $petsc_library), PetscErrorCode, (KSP, Ptr{Vec}), arg1, arg2)
end

function KSPGetSolution(arg1, arg2)
    ccall((:KSPGetSolution, $petsc_library), PetscErrorCode, (KSP, Ptr{Vec}), arg1, arg2)
end

function KSPGetResidualNorm(arg1, arg2)
    ccall((:KSPGetResidualNorm, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}), arg1, arg2)
end

function KSPGetIterationNumber(arg1, arg2)
    ccall((:KSPGetIterationNumber, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPGetTotalIterations(arg1, arg2)
    ccall((:KSPGetTotalIterations, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPCreateVecs(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPCreateVecs, $petsc_library), PetscErrorCode, (KSP, PetscInt, Ptr{Ptr{Vec}}, PetscInt, Ptr{Ptr{Vec}}), arg1, arg2, arg3, arg4, arg5)
end

function KSPGetVecs(ksp, n, x, m, y)
    ccall((:KSPGetVecs, $petsc_library), PetscErrorCode, (KSP, PetscInt, Ptr{Ptr{Vec}}, PetscInt, Ptr{Ptr{Vec}}), ksp, n, x, m, y)
end

function KSPSetPreSolve(arg1, arg2, arg3)
    ccall((:KSPSetPreSolve, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function KSPSetPostSolve(arg1, arg2, arg3)
    ccall((:KSPSetPostSolve, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function KSPSetPC(arg1, arg2)
    ccall((:KSPSetPC, $petsc_library), PetscErrorCode, (KSP, PC), arg1, arg2)
end

function KSPGetPC(arg1, arg2)
    ccall((:KSPGetPC, $petsc_library), PetscErrorCode, (KSP, Ptr{PC}), arg1, arg2)
end

function KSPSetNestLevel(arg1, arg2)
    ccall((:KSPSetNestLevel, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPGetNestLevel(arg1, arg2)
    ccall((:KSPGetNestLevel, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPMonitor(arg1, arg2, arg3)
    ccall((:KSPMonitor, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal), arg1, arg2, arg3)
end

function KSPMonitorSet(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSet, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function KSPMonitorCancel(arg1)
    ccall((:KSPMonitorCancel, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPGetMonitorContext(arg1, arg2)
    ccall((:KSPGetMonitorContext, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}), arg1, arg2)
end

function KSPGetResidualHistory(arg1, arg2, arg3)
    ccall((:KSPGetResidualHistory, $petsc_library), PetscErrorCode, (KSP, Ptr{Ptr{PetscReal}}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function KSPSetResidualHistory(arg1, arg2, arg3, arg4)
    ccall((:KSPSetResidualHistory, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}, PetscInt, PetscBool), arg1, arg2, arg3, arg4)
end

function KSPGetErrorHistory(arg1, arg2, arg3)
    ccall((:KSPGetErrorHistory, $petsc_library), PetscErrorCode, (KSP, Ptr{Ptr{PetscReal}}, Ptr{PetscInt}), arg1, arg2, arg3)
end

function KSPSetErrorHistory(arg1, arg2, arg3, arg4)
    ccall((:KSPSetErrorHistory, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}, PetscInt, PetscBool), arg1, arg2, arg3, arg4)
end

function KSPBuildSolutionDefault(arg1, arg2, arg3)
    ccall((:KSPBuildSolutionDefault, $petsc_library), PetscErrorCode, (KSP, Vec, Ptr{Vec}), arg1, arg2, arg3)
end

function KSPBuildResidualDefault(arg1, arg2, arg3, arg4)
    ccall((:KSPBuildResidualDefault, $petsc_library), PetscErrorCode, (KSP, Vec, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function KSPDestroyDefault(arg1)
    ccall((:KSPDestroyDefault, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPSetWorkVecs(arg1, arg2)
    ccall((:KSPSetWorkVecs, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function PCKSPGetKSP(arg1, arg2)
    ccall((:PCKSPGetKSP, $petsc_library), PetscErrorCode, (PC, Ptr{KSP}), arg1, arg2)
end

function PCKSPSetKSP(arg1, arg2)
    ccall((:PCKSPSetKSP, $petsc_library), PetscErrorCode, (PC, KSP), arg1, arg2)
end

function PCBJacobiGetSubKSP(arg1, arg2, arg3, arg4)
    ccall((:PCBJacobiGetSubKSP, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{KSP}}), arg1, arg2, arg3, arg4)
end

function PCASMGetSubKSP(arg1, arg2, arg3, arg4)
    ccall((:PCASMGetSubKSP, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{KSP}}), arg1, arg2, arg3, arg4)
end

function PCGASMGetSubKSP(arg1, arg2, arg3, arg4)
    ccall((:PCGASMGetSubKSP, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{KSP}}), arg1, arg2, arg3, arg4)
end

function PCFieldSplitGetSubKSP(arg1, arg2, arg3)
    ccall((:PCFieldSplitGetSubKSP, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{Ptr{KSP}}), arg1, arg2, arg3)
end

function PCFieldSplitSchurGetSubKSP(arg1, arg2, arg3)
    ccall((:PCFieldSplitSchurGetSubKSP, $petsc_library), PetscErrorCode, (PC, Ptr{PetscInt}, Ptr{Ptr{KSP}}), arg1, arg2, arg3)
end

function PCMGGetSmoother(arg1, arg2, arg3)
    ccall((:PCMGGetSmoother, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{KSP}), arg1, arg2, arg3)
end

function PCMGGetSmootherDown(arg1, arg2, arg3)
    ccall((:PCMGGetSmootherDown, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{KSP}), arg1, arg2, arg3)
end

function PCMGGetSmootherUp(arg1, arg2, arg3)
    ccall((:PCMGGetSmootherUp, $petsc_library), PetscErrorCode, (PC, PetscInt, Ptr{KSP}), arg1, arg2, arg3)
end

function PCMGGetCoarseSolve(arg1, arg2)
    ccall((:PCMGGetCoarseSolve, $petsc_library), PetscErrorCode, (PC, Ptr{KSP}), arg1, arg2)
end

function PCGalerkinGetKSP(arg1, arg2)
    ccall((:PCGalerkinGetKSP, $petsc_library), PetscErrorCode, (PC, Ptr{KSP}), arg1, arg2)
end

function PCDeflationGetCoarseKSP(arg1, arg2)
    ccall((:PCDeflationGetCoarseKSP, $petsc_library), PetscErrorCode, (PC, Ptr{KSP}), arg1, arg2)
end

function PCMGRegisterCoarseSpaceConstructor(arg1, arg2)
    ccall((:PCMGRegisterCoarseSpaceConstructor, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function PCMGGetCoarseSpaceConstructor(arg1, arg2)
    ccall((:PCMGGetCoarseSpaceConstructor, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function KSPBuildSolution(arg1, arg2, arg3)
    ccall((:KSPBuildSolution, $petsc_library), PetscErrorCode, (KSP, Vec, Ptr{Vec}), arg1, arg2, arg3)
end

function KSPBuildResidual(arg1, arg2, arg3, arg4)
    ccall((:KSPBuildResidual, $petsc_library), PetscErrorCode, (KSP, Vec, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

@enum KSPChebyshevKind::UInt32 begin
    KSP_CHEBYSHEV_FIRST = 0
    KSP_CHEBYSHEV_FOURTH = 1
    KSP_CHEBYSHEV_OPT_FOURTH = 2
end

function KSPRichardsonSetScale(arg1, arg2)
    ccall((:KSPRichardsonSetScale, $petsc_library), PetscErrorCode, (KSP, PetscReal), arg1, arg2)
end

function KSPRichardsonSetSelfScale(arg1, arg2)
    ccall((:KSPRichardsonSetSelfScale, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPChebyshevSetEigenvalues(arg1, arg2, arg3)
    ccall((:KSPChebyshevSetEigenvalues, $petsc_library), PetscErrorCode, (KSP, PetscReal, PetscReal), arg1, arg2, arg3)
end

function KSPChebyshevEstEigSet(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPChebyshevEstEigSet, $petsc_library), PetscErrorCode, (KSP, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5)
end

function KSPChebyshevEstEigSetUseNoisy(arg1, arg2)
    ccall((:KSPChebyshevEstEigSetUseNoisy, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPChebyshevSetKind(arg1, arg2)
    ccall((:KSPChebyshevSetKind, $petsc_library), PetscErrorCode, (KSP, KSPChebyshevKind), arg1, arg2)
end

function KSPChebyshevGetKind(arg1, arg2)
    ccall((:KSPChebyshevGetKind, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPChebyshevKind}), arg1, arg2)
end

function KSPChebyshevEstEigGetKSP(arg1, arg2)
    ccall((:KSPChebyshevEstEigGetKSP, $petsc_library), PetscErrorCode, (KSP, Ptr{KSP}), arg1, arg2)
end

function KSPComputeExtremeSingularValues(arg1, arg2, arg3)
    ccall((:KSPComputeExtremeSingularValues, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function KSPComputeEigenvalues(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPComputeEigenvalues, $petsc_library), PetscErrorCode, (KSP, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function KSPComputeEigenvaluesExplicitly(arg1, arg2, arg3, arg4)
    ccall((:KSPComputeEigenvaluesExplicitly, $petsc_library), PetscErrorCode, (KSP, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function KSPComputeRitz(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:KSPComputeRitz, $petsc_library), PetscErrorCode, (KSP, PetscBool, PetscBool, Ptr{PetscInt}, Ptr{Vec}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

@enum KSPFCDTruncationType::UInt32 begin
    KSP_FCD_TRUNC_TYPE_STANDARD = 0
    KSP_FCD_TRUNC_TYPE_NOTAY = 1
end

function KSPFCGSetMmax(arg1, arg2)
    ccall((:KSPFCGSetMmax, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPFCGGetMmax(arg1, arg2)
    ccall((:KSPFCGGetMmax, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPFCGSetNprealloc(arg1, arg2)
    ccall((:KSPFCGSetNprealloc, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPFCGGetNprealloc(arg1, arg2)
    ccall((:KSPFCGGetNprealloc, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPFCGSetTruncationType(arg1, arg2)
    ccall((:KSPFCGSetTruncationType, $petsc_library), PetscErrorCode, (KSP, KSPFCDTruncationType), arg1, arg2)
end

function KSPFCGGetTruncationType(arg1, arg2)
    ccall((:KSPFCGGetTruncationType, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPFCDTruncationType}), arg1, arg2)
end

function KSPPIPEFCGSetMmax(arg1, arg2)
    ccall((:KSPPIPEFCGSetMmax, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPPIPEFCGGetMmax(arg1, arg2)
    ccall((:KSPPIPEFCGGetMmax, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPPIPEFCGSetNprealloc(arg1, arg2)
    ccall((:KSPPIPEFCGSetNprealloc, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPPIPEFCGGetNprealloc(arg1, arg2)
    ccall((:KSPPIPEFCGGetNprealloc, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPPIPEFCGSetTruncationType(arg1, arg2)
    ccall((:KSPPIPEFCGSetTruncationType, $petsc_library), PetscErrorCode, (KSP, KSPFCDTruncationType), arg1, arg2)
end

function KSPPIPEFCGGetTruncationType(arg1, arg2)
    ccall((:KSPPIPEFCGGetTruncationType, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPFCDTruncationType}), arg1, arg2)
end

function KSPPIPEGCRSetMmax(arg1, arg2)
    ccall((:KSPPIPEGCRSetMmax, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPPIPEGCRGetMmax(arg1, arg2)
    ccall((:KSPPIPEGCRGetMmax, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPPIPEGCRSetNprealloc(arg1, arg2)
    ccall((:KSPPIPEGCRSetNprealloc, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPPIPEGCRGetNprealloc(arg1, arg2)
    ccall((:KSPPIPEGCRGetNprealloc, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPPIPEGCRSetTruncationType(arg1, arg2)
    ccall((:KSPPIPEGCRSetTruncationType, $petsc_library), PetscErrorCode, (KSP, KSPFCDTruncationType), arg1, arg2)
end

function KSPPIPEGCRGetTruncationType(arg1, arg2)
    ccall((:KSPPIPEGCRGetTruncationType, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPFCDTruncationType}), arg1, arg2)
end

function KSPPIPEGCRSetUnrollW(arg1, arg2)
    ccall((:KSPPIPEGCRSetUnrollW, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPPIPEGCRGetUnrollW(arg1, arg2)
    ccall((:KSPPIPEGCRGetUnrollW, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

function KSPPIPEGCRSetModifyPC(arg1, arg2, arg3, arg4)
    ccall((:KSPPIPEGCRSetModifyPC, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function KSPGMRESSetRestart(arg1, arg2)
    ccall((:KSPGMRESSetRestart, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPGMRESGetRestart(arg1, arg2)
    ccall((:KSPGMRESGetRestart, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPGMRESSetHapTol(arg1, arg2)
    ccall((:KSPGMRESSetHapTol, $petsc_library), PetscErrorCode, (KSP, PetscReal), arg1, arg2)
end

function KSPGMRESSetBreakdownTolerance(arg1, arg2)
    ccall((:KSPGMRESSetBreakdownTolerance, $petsc_library), PetscErrorCode, (KSP, PetscReal), arg1, arg2)
end

function KSPGMRESSetPreAllocateVectors(arg1)
    ccall((:KSPGMRESSetPreAllocateVectors, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPGMRESSetOrthogonalization(arg1, arg2)
    ccall((:KSPGMRESSetOrthogonalization, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}), arg1, arg2)
end

function KSPGMRESGetOrthogonalization(arg1, arg2)
    ccall((:KSPGMRESGetOrthogonalization, $petsc_library), PetscErrorCode, (KSP, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function KSPGMRESModifiedGramSchmidtOrthogonalization(arg1, arg2)
    ccall((:KSPGMRESModifiedGramSchmidtOrthogonalization, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPGMRESClassicalGramSchmidtOrthogonalization(arg1, arg2)
    ccall((:KSPGMRESClassicalGramSchmidtOrthogonalization, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPLGMRESSetAugDim(arg1, arg2)
    ccall((:KSPLGMRESSetAugDim, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPLGMRESSetConstant(arg1)
    ccall((:KSPLGMRESSetConstant, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPPIPEFGMRESSetShift(arg1, arg2)
    ccall((:KSPPIPEFGMRESSetShift, $petsc_library), PetscErrorCode, (KSP, PetscScalar), arg1, arg2)
end

function KSPGCRSetRestart(arg1, arg2)
    ccall((:KSPGCRSetRestart, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPGCRGetRestart(arg1, arg2)
    ccall((:KSPGCRGetRestart, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscInt}), arg1, arg2)
end

function KSPGCRSetModifyPC(arg1, arg2, arg3, arg4)
    ccall((:KSPGCRSetModifyPC, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function KSPMINRESSetRadius(arg1, arg2)
    ccall((:KSPMINRESSetRadius, $petsc_library), PetscErrorCode, (KSP, PetscReal), arg1, arg2)
end

function KSPMINRESGetUseQLP(arg1, arg2)
    ccall((:KSPMINRESGetUseQLP, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

function KSPMINRESSetUseQLP(arg1, arg2)
    ccall((:KSPMINRESSetUseQLP, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPFETIDPGetInnerBDDC(arg1, arg2)
    ccall((:KSPFETIDPGetInnerBDDC, $petsc_library), PetscErrorCode, (KSP, Ptr{PC}), arg1, arg2)
end

function KSPFETIDPSetInnerBDDC(arg1, arg2)
    ccall((:KSPFETIDPSetInnerBDDC, $petsc_library), PetscErrorCode, (KSP, PC), arg1, arg2)
end

function KSPFETIDPGetInnerKSP(arg1, arg2)
    ccall((:KSPFETIDPGetInnerKSP, $petsc_library), PetscErrorCode, (KSP, Ptr{KSP}), arg1, arg2)
end

function KSPFETIDPSetPressureOperator(arg1, arg2)
    ccall((:KSPFETIDPSetPressureOperator, $petsc_library), PetscErrorCode, (KSP, Mat), arg1, arg2)
end

function KSPHPDDMSetDeflationMat(arg1, arg2)
    ccall((:KSPHPDDMSetDeflationMat, $petsc_library), PetscErrorCode, (KSP, Mat), arg1, arg2)
end

function KSPHPDDMGetDeflationMat(arg1, arg2)
    ccall((:KSPHPDDMGetDeflationMat, $petsc_library), PetscErrorCode, (KSP, Ptr{Mat}), arg1, arg2)
end

function KSPHPDDMMatSolve(ksp, B, X)
    ccall((:KSPHPDDMMatSolve, $petsc_library), PetscErrorCode, (KSP, Mat, Mat), ksp, B, X)
end

@enum KSPHPDDMType::UInt32 begin
    KSP_HPDDM_TYPE_GMRES = 0
    KSP_HPDDM_TYPE_BGMRES = 1
    KSP_HPDDM_TYPE_CG = 2
    KSP_HPDDM_TYPE_BCG = 3
    KSP_HPDDM_TYPE_GCRODR = 4
    KSP_HPDDM_TYPE_BGCRODR = 5
    KSP_HPDDM_TYPE_BFBCG = 6
    KSP_HPDDM_TYPE_PREONLY = 7
end

@enum KSPHPDDMPrecision::UInt32 begin
    KSP_HPDDM_PRECISION_HALF = 0
    KSP_HPDDM_PRECISION_SINGLE = 1
    KSP_HPDDM_PRECISION_DOUBLE = 2
    KSP_HPDDM_PRECISION_QUADRUPLE = 3
end

function KSPHPDDMSetType(arg1, arg2)
    ccall((:KSPHPDDMSetType, $petsc_library), PetscErrorCode, (KSP, KSPHPDDMType), arg1, arg2)
end

function KSPHPDDMGetType(arg1, arg2)
    ccall((:KSPHPDDMGetType, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPHPDDMType}), arg1, arg2)
end

@enum KSPGMRESCGSRefinementType::UInt32 begin
    KSP_GMRES_CGS_REFINE_NEVER = 0
    KSP_GMRES_CGS_REFINE_IFNEEDED = 1
    KSP_GMRES_CGS_REFINE_ALWAYS = 2
end

function KSPGMRESSetCGSRefinementType(arg1, arg2)
    ccall((:KSPGMRESSetCGSRefinementType, $petsc_library), PetscErrorCode, (KSP, KSPGMRESCGSRefinementType), arg1, arg2)
end

function KSPGMRESGetCGSRefinementType(arg1, arg2)
    ccall((:KSPGMRESGetCGSRefinementType, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPGMRESCGSRefinementType}), arg1, arg2)
end

function KSPFGMRESModifyPCNoChange(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPFGMRESModifyPCNoChange, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscInt, PetscReal, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function KSPFGMRESModifyPCKSP(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPFGMRESModifyPCKSP, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscInt, PetscReal, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function KSPFGMRESSetModifyPC(arg1, arg2, arg3, arg4)
    ccall((:KSPFGMRESSetModifyPC, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function KSPQCGSetTrustRegionRadius(arg1, arg2)
    ccall((:KSPQCGSetTrustRegionRadius, $petsc_library), PetscErrorCode, (KSP, PetscReal), arg1, arg2)
end

function KSPQCGGetQuadratic(arg1, arg2)
    ccall((:KSPQCGGetQuadratic, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}), arg1, arg2)
end

function KSPQCGGetTrialStepNorm(arg1, arg2)
    ccall((:KSPQCGGetTrialStepNorm, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}), arg1, arg2)
end

function KSPBCGSLSetXRes(arg1, arg2)
    ccall((:KSPBCGSLSetXRes, $petsc_library), PetscErrorCode, (KSP, PetscReal), arg1, arg2)
end

function KSPBCGSLSetPol(arg1, arg2)
    ccall((:KSPBCGSLSetPol, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPBCGSLSetEll(arg1, arg2)
    ccall((:KSPBCGSLSetEll, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPBCGSLSetUsePseudoinverse(arg1, arg2)
    ccall((:KSPBCGSLSetUsePseudoinverse, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPSetFromOptions(arg1)
    ccall((:KSPSetFromOptions, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPResetFromOptions(arg1)
    ccall((:KSPResetFromOptions, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPMonitorSetFromOptions(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSetFromOptions, $petsc_library), PetscErrorCode, (KSP, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function KSPMonitorLGCreate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:KSPMonitorLGCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, PetscInt, Ptr{Ptr{Cchar}}, Cint, Cint, Cint, Cint, Ptr{PetscDrawLG}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function KSPMonitorResidual(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorResidual, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorResidualDraw(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorResidualDraw, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorResidualDrawLG(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorResidualDrawLG, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorResidualDrawLGCreate(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorResidualDrawLGCreate, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerFormat, Ptr{Cvoid}, Ptr{Ptr{PetscViewerAndFormat}}), arg1, arg2, arg3, arg4)
end

function KSPMonitorResidualShort(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorResidualShort, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorResidualRange(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorResidualRange, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorTrueResidual(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorTrueResidual, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorTrueResidualDraw(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorTrueResidualDraw, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorTrueResidualDrawLG(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorTrueResidualDrawLG, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorTrueResidualDrawLGCreate(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorTrueResidualDrawLGCreate, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerFormat, Ptr{Cvoid}, Ptr{Ptr{PetscViewerAndFormat}}), arg1, arg2, arg3, arg4)
end

function KSPMonitorTrueResidualMax(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorTrueResidualMax, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorError(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorError, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorErrorDraw(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorErrorDraw, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorErrorDrawLG(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorErrorDrawLG, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorErrorDrawLGCreate(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorErrorDrawLGCreate, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerFormat, Ptr{Cvoid}, Ptr{Ptr{PetscViewerAndFormat}}), arg1, arg2, arg3, arg4)
end

function KSPMonitorSolution(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSolution, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorSolutionDraw(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSolutionDraw, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorSolutionDrawLG(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSolutionDrawLG, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorSolutionDrawLGCreate(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSolutionDrawLGCreate, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerFormat, Ptr{Cvoid}, Ptr{Ptr{PetscViewerAndFormat}}), arg1, arg2, arg3, arg4)
end

function KSPMonitorSingularValue(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSingularValue, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorSingularValueCreate(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSingularValueCreate, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerFormat, Ptr{Cvoid}, Ptr{Ptr{PetscViewerAndFormat}}), arg1, arg2, arg3, arg4)
end

function KSPMonitorDefault(ksp, n, rnorm, vf)
    ccall((:KSPMonitorDefault, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), ksp, n, rnorm, vf)
end

function KSPMonitorTrueResidualNorm(ksp, n, rnorm, vf)
    ccall((:KSPMonitorTrueResidualNorm, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), ksp, n, rnorm, vf)
end

function KSPMonitorTrueResidualMaxNorm(ksp, n, rnorm, vf)
    ccall((:KSPMonitorTrueResidualMaxNorm, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), ksp, n, rnorm, vf)
end

function KSPGMRESMonitorKrylov(arg1, arg2, arg3, arg4)
    ccall((:KSPGMRESMonitorKrylov, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function KSPMonitorDynamicTolerance(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorDynamicTolerance, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function KSPMonitorDynamicToleranceDestroy(arg1)
    ccall((:KSPMonitorDynamicToleranceDestroy, $petsc_library), PetscErrorCode, (Ptr{Ptr{Cvoid}},), arg1)
end

function KSPMonitorDynamicToleranceCreate(arg1)
    ccall((:KSPMonitorDynamicToleranceCreate, $petsc_library), PetscErrorCode, (Ptr{Cvoid},), arg1)
end

function KSPMonitorDynamicToleranceSetCoefficient(arg1, arg2)
    ccall((:KSPMonitorDynamicToleranceSetCoefficient, $petsc_library), PetscErrorCode, (Ptr{Cvoid}, PetscReal), arg1, arg2)
end

function KSPMonitorSAWs(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSAWs, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function KSPMonitorSAWsCreate(arg1, arg2)
    ccall((:KSPMonitorSAWsCreate, $petsc_library), PetscErrorCode, (KSP, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function KSPMonitorSAWsDestroy(arg1)
    ccall((:KSPMonitorSAWsDestroy, $petsc_library), PetscErrorCode, (Ptr{Ptr{Cvoid}},), arg1)
end

function KSPUnwindPreconditioner(arg1, arg2, arg3)
    ccall((:KSPUnwindPreconditioner, $petsc_library), PetscErrorCode, (KSP, Vec, Vec), arg1, arg2, arg3)
end

function KSPInitialResidual(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:KSPInitialResidual, $petsc_library), PetscErrorCode, (KSP, Vec, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function KSPSetOperators(arg1, arg2, arg3)
    ccall((:KSPSetOperators, $petsc_library), PetscErrorCode, (KSP, Mat, Mat), arg1, arg2, arg3)
end

function KSPGetOperators(arg1, arg2, arg3)
    ccall((:KSPGetOperators, $petsc_library), PetscErrorCode, (KSP, Ptr{Mat}, Ptr{Mat}), arg1, arg2, arg3)
end

function KSPGetOperatorsSet(arg1, arg2, arg3)
    ccall((:KSPGetOperatorsSet, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function KSPSetOptionsPrefix(arg1, arg2)
    ccall((:KSPSetOptionsPrefix, $petsc_library), PetscErrorCode, (KSP, Ptr{Cchar}), arg1, arg2)
end

function KSPAppendOptionsPrefix(arg1, arg2)
    ccall((:KSPAppendOptionsPrefix, $petsc_library), PetscErrorCode, (KSP, Ptr{Cchar}), arg1, arg2)
end

function KSPGetOptionsPrefix(arg1, arg2)
    ccall((:KSPGetOptionsPrefix, $petsc_library), PetscErrorCode, (KSP, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function KSPSetDiagonalScale(arg1, arg2)
    ccall((:KSPSetDiagonalScale, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetDiagonalScale(arg1, arg2)
    ccall((:KSPGetDiagonalScale, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

function KSPSetDiagonalScaleFix(arg1, arg2)
    ccall((:KSPSetDiagonalScaleFix, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetDiagonalScaleFix(arg1, arg2)
    ccall((:KSPGetDiagonalScaleFix, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

function KSPView(arg1, arg2)
    ccall((:KSPView, $petsc_library), PetscErrorCode, (KSP, PetscViewer), arg1, arg2)
end

function KSPLoad(arg1, arg2)
    ccall((:KSPLoad, $petsc_library), PetscErrorCode, (KSP, PetscViewer), arg1, arg2)
end

function KSPViewFromOptions(arg1, arg2, arg3)
    ccall((:KSPViewFromOptions, $petsc_library), PetscErrorCode, (KSP, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function KSPConvergedReasonView(arg1, arg2)
    ccall((:KSPConvergedReasonView, $petsc_library), PetscErrorCode, (KSP, PetscViewer), arg1, arg2)
end

function KSPConvergedReasonViewSet(arg1, arg2, vctx, arg4)
    ccall((:KSPConvergedReasonViewSet, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, vctx, arg4)
end

function KSPConvergedReasonViewFromOptions(arg1)
    ccall((:KSPConvergedReasonViewFromOptions, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPConvergedReasonViewCancel(arg1)
    ccall((:KSPConvergedReasonViewCancel, $petsc_library), PetscErrorCode, (KSP,), arg1)
end

function KSPConvergedRateView(arg1, arg2)
    ccall((:KSPConvergedRateView, $petsc_library), PetscErrorCode, (KSP, PetscViewer), arg1, arg2)
end

function KSPReasonView(ksp, v)
    ccall((:KSPReasonView, $petsc_library), PetscErrorCode, (KSP, PetscViewer), ksp, v)
end

function KSPReasonViewFromOptions(ksp)
    ccall((:KSPReasonViewFromOptions, $petsc_library), PetscErrorCode, (KSP,), ksp)
end

function KSPLSQRSetExactMatNorm(arg1, arg2)
    ccall((:KSPLSQRSetExactMatNorm, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPLSQRSetComputeStandardErrorVec(arg1, arg2)
    ccall((:KSPLSQRSetComputeStandardErrorVec, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPLSQRGetStandardErrorVec(arg1, arg2)
    ccall((:KSPLSQRGetStandardErrorVec, $petsc_library), PetscErrorCode, (KSP, Ptr{Vec}), arg1, arg2)
end

function KSPLSQRGetNorms(arg1, arg2, arg3)
    ccall((:KSPLSQRGetNorms, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function KSPLSQRMonitorResidual(arg1, arg2, arg3, arg4)
    ccall((:KSPLSQRMonitorResidual, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPLSQRMonitorResidualDrawLG(arg1, arg2, arg3, arg4)
    ccall((:KSPLSQRMonitorResidualDrawLG, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPLSQRMonitorResidualDrawLGCreate(arg1, arg2, arg3, arg4)
    ccall((:KSPLSQRMonitorResidualDrawLGCreate, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerFormat, Ptr{Cvoid}, Ptr{Ptr{PetscViewerAndFormat}}), arg1, arg2, arg3, arg4)
end

function PCRedundantGetKSP(arg1, arg2)
    ccall((:PCRedundantGetKSP, $petsc_library), PetscErrorCode, (PC, Ptr{KSP}), arg1, arg2)
end

function PCRedistributeGetKSP(arg1, arg2)
    ccall((:PCRedistributeGetKSP, $petsc_library), PetscErrorCode, (PC, Ptr{KSP}), arg1, arg2)
end

function PCTelescopeGetKSP(arg1, arg2)
    ccall((:PCTelescopeGetKSP, $petsc_library), PetscErrorCode, (PC, Ptr{KSP}), arg1, arg2)
end

@enum KSPNormType::Int32 begin
    KSP_NORM_DEFAULT = -1
    KSP_NORM_NONE = 0
    KSP_NORM_PRECONDITIONED = 1
    KSP_NORM_UNPRECONDITIONED = 2
    KSP_NORM_NATURAL = 3
end

function KSPSetNormType(arg1, arg2)
    ccall((:KSPSetNormType, $petsc_library), PetscErrorCode, (KSP, KSPNormType), arg1, arg2)
end

function KSPGetNormType(arg1, arg2)
    ccall((:KSPGetNormType, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPNormType}), arg1, arg2)
end

function KSPSetSupportedNorm(ksp, arg2, arg3, arg4)
    ccall((:KSPSetSupportedNorm, $petsc_library), PetscErrorCode, (KSP, KSPNormType, PCSide, PetscInt), ksp, arg2, arg3, arg4)
end

function KSPSetCheckNormIteration(arg1, arg2)
    ccall((:KSPSetCheckNormIteration, $petsc_library), PetscErrorCode, (KSP, PetscInt), arg1, arg2)
end

function KSPSetLagNorm(arg1, arg2)
    ccall((:KSPSetLagNorm, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPSetConvergenceTest(arg1, arg2, arg3, arg4)
    ccall((:KSPSetConvergenceTest, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function KSPGetConvergenceTest(arg1, arg2, arg3, arg4)
    ccall((:KSPGetConvergenceTest, $petsc_library), PetscErrorCode, (KSP, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function KSPGetAndClearConvergenceTest(arg1, arg2, arg3, arg4)
    ccall((:KSPGetAndClearConvergenceTest, $petsc_library), PetscErrorCode, (KSP, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function KSPGetConvergenceContext(arg1, arg2)
    ccall((:KSPGetConvergenceContext, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}), arg1, arg2)
end

function KSPLSQRConvergedDefault(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPLSQRConvergedDefault, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{KSPConvergedReason}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function KSPConvergedDefaultSetConvergedMaxits(arg1, arg2)
    ccall((:KSPConvergedDefaultSetConvergedMaxits, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetConvergedReason(arg1, arg2)
    ccall((:KSPGetConvergedReason, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPConvergedReason}), arg1, arg2)
end

function KSPGetConvergedReasonString(arg1, arg2)
    ccall((:KSPGetConvergedReasonString, $petsc_library), PetscErrorCode, (KSP, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function KSPComputeConvergenceRate(arg1, arg2, arg3, arg4, arg5)
    ccall((:KSPComputeConvergenceRate, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function KSPSetConvergedNegativeCurvature(arg1, arg2)
    ccall((:KSPSetConvergedNegativeCurvature, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetConvergedNegativeCurvature(arg1, arg2)
    ccall((:KSPGetConvergedNegativeCurvature, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

function KSPComputeOperator(arg1, arg2, arg3)
    ccall((:KSPComputeOperator, $petsc_library), PetscErrorCode, (KSP, MatType, Ptr{Mat}), arg1, arg2, arg3)
end

function KSPComputeExplicitOperator(A, B)
    ccall((:KSPComputeExplicitOperator, $petsc_library), PetscErrorCode, (KSP, Ptr{Mat}), A, B)
end

@enum KSPCGType::UInt32 begin
    KSP_CG_SYMMETRIC = 0
    KSP_CG_HERMITIAN = 1
end

function KSPCGSetType(arg1, arg2)
    ccall((:KSPCGSetType, $petsc_library), PetscErrorCode, (KSP, KSPCGType), arg1, arg2)
end

function KSPCGUseSingleReduction(arg1, arg2)
    ccall((:KSPCGUseSingleReduction, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPCGSetRadius(arg1, arg2)
    ccall((:KSPCGSetRadius, $petsc_library), PetscErrorCode, (KSP, PetscReal), arg1, arg2)
end

function KSPCGSetObjectiveTarget(arg1, arg2)
    ccall((:KSPCGSetObjectiveTarget, $petsc_library), PetscErrorCode, (KSP, PetscReal), arg1, arg2)
end

function KSPCGGetNormD(arg1, arg2)
    ccall((:KSPCGGetNormD, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}), arg1, arg2)
end

function KSPCGGetObjFcn(arg1, arg2)
    ccall((:KSPCGGetObjFcn, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}), arg1, arg2)
end

function KSPGLTRGetMinEig(arg1, arg2)
    ccall((:KSPGLTRGetMinEig, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}), arg1, arg2)
end

function KSPGLTRGetLambda(arg1, arg2)
    ccall((:KSPGLTRGetLambda, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}), arg1, arg2)
end

function KSPCGGLTRGetMinEig(ksp, x)
    ccall((:KSPCGGLTRGetMinEig, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}), ksp, x)
end

function KSPCGGLTRGetLambda(ksp, x)
    ccall((:KSPCGGLTRGetLambda, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscReal}), ksp, x)
end

function KSPPythonSetType(arg1, arg2)
    ccall((:KSPPythonSetType, $petsc_library), PetscErrorCode, (KSP, Ptr{Cchar}), arg1, arg2)
end

function KSPPythonGetType(arg1, arg2)
    ccall((:KSPPythonGetType, $petsc_library), PetscErrorCode, (KSP, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function PCSetPreSolve(arg1, arg2)
    ccall((:PCSetPreSolve, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCPreSolve(arg1, arg2)
    ccall((:PCPreSolve, $petsc_library), PetscErrorCode, (PC, KSP), arg1, arg2)
end

function PCPostSolve(arg1, arg2)
    ccall((:PCPostSolve, $petsc_library), PetscErrorCode, (PC, KSP), arg1, arg2)
end

function KSPMonitorLGRange(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorLGRange, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function PCShellSetPreSolve(arg1, arg2)
    ccall((:PCShellSetPreSolve, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

function PCShellSetPostSolve(arg1, arg2)
    ccall((:PCShellSetPostSolve, $petsc_library), PetscErrorCode, (PC, Ptr{Cvoid}), arg1, arg2)
end

mutable struct _p_KSPGuess end

const KSPGuess = Ptr{_p_KSPGuess}

const KSPGuessType = Ptr{Cchar}

function KSPGuessRegister(arg1, arg2)
    ccall((:KSPGuessRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function KSPSetGuess(arg1, arg2)
    ccall((:KSPSetGuess, $petsc_library), PetscErrorCode, (KSP, KSPGuess), arg1, arg2)
end

function KSPGetGuess(arg1, arg2)
    ccall((:KSPGetGuess, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPGuess}), arg1, arg2)
end

function KSPGuessView(arg1, arg2)
    ccall((:KSPGuessView, $petsc_library), PetscErrorCode, (KSPGuess, PetscViewer), arg1, arg2)
end

function KSPGuessDestroy(arg1)
    ccall((:KSPGuessDestroy, $petsc_library), PetscErrorCode, (Ptr{KSPGuess},), arg1)
end

function KSPGuessCreate(arg1, arg2)
    ccall((:KSPGuessCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{KSPGuess}), arg1, arg2)
end

function KSPGuessSetType(arg1, arg2)
    ccall((:KSPGuessSetType, $petsc_library), PetscErrorCode, (KSPGuess, KSPGuessType), arg1, arg2)
end

function KSPGuessGetType(arg1, arg2)
    ccall((:KSPGuessGetType, $petsc_library), PetscErrorCode, (KSPGuess, Ptr{KSPGuessType}), arg1, arg2)
end

function KSPGuessSetTolerance(arg1, arg2)
    ccall((:KSPGuessSetTolerance, $petsc_library), PetscErrorCode, (KSPGuess, PetscReal), arg1, arg2)
end

function KSPGuessSetUp(arg1)
    ccall((:KSPGuessSetUp, $petsc_library), PetscErrorCode, (KSPGuess,), arg1)
end

function KSPGuessUpdate(arg1, arg2, arg3)
    ccall((:KSPGuessUpdate, $petsc_library), PetscErrorCode, (KSPGuess, Vec, Vec), arg1, arg2, arg3)
end

function KSPGuessFormGuess(arg1, arg2, arg3)
    ccall((:KSPGuessFormGuess, $petsc_library), PetscErrorCode, (KSPGuess, Vec, Vec), arg1, arg2, arg3)
end

function KSPGuessSetFromOptions(arg1)
    ccall((:KSPGuessSetFromOptions, $petsc_library), PetscErrorCode, (KSPGuess,), arg1)
end

function KSPGuessFischerSetModel(arg1, arg2, arg3)
    ccall((:KSPGuessFischerSetModel, $petsc_library), PetscErrorCode, (KSPGuess, PetscInt, PetscInt), arg1, arg2, arg3)
end

function KSPSetUseFischerGuess(arg1, arg2, arg3)
    ccall((:KSPSetUseFischerGuess, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscInt), arg1, arg2, arg3)
end

function KSPSetInitialGuessKnoll(arg1, arg2)
    ccall((:KSPSetInitialGuessKnoll, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetInitialGuessKnoll(arg1, arg2)
    ccall((:KSPGetInitialGuessKnoll, $petsc_library), PetscErrorCode, (KSP, Ptr{PetscBool}), arg1, arg2)
end

@enum MatSchurComplementAinvType::UInt32 begin
    MAT_SCHUR_COMPLEMENT_AINV_DIAG = 0
    MAT_SCHUR_COMPLEMENT_AINV_LUMP = 1
    MAT_SCHUR_COMPLEMENT_AINV_BLOCK_DIAG = 2
    MAT_SCHUR_COMPLEMENT_AINV_FULL = 3
end

function MatCreateSchurComplement(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatCreateSchurComplement, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Mat, Mat, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatSchurComplementGetKSP(arg1, arg2)
    ccall((:MatSchurComplementGetKSP, $petsc_library), PetscErrorCode, (Mat, Ptr{KSP}), arg1, arg2)
end

function MatSchurComplementSetKSP(arg1, arg2)
    ccall((:MatSchurComplementSetKSP, $petsc_library), PetscErrorCode, (Mat, KSP), arg1, arg2)
end

function MatSchurComplementSetSubMatrices(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatSchurComplementSetSubMatrices, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Mat, Mat, Mat), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatSchurComplementUpdateSubMatrices(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatSchurComplementUpdateSubMatrices, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Mat, Mat, Mat), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatSchurComplementGetSubMatrices(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:MatSchurComplementGetSubMatrices, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}, Ptr{Mat}, Ptr{Mat}, Ptr{Mat}, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatSchurComplementSetAinvType(arg1, arg2)
    ccall((:MatSchurComplementSetAinvType, $petsc_library), PetscErrorCode, (Mat, MatSchurComplementAinvType), arg1, arg2)
end

function MatSchurComplementGetAinvType(arg1, arg2)
    ccall((:MatSchurComplementGetAinvType, $petsc_library), PetscErrorCode, (Mat, Ptr{MatSchurComplementAinvType}), arg1, arg2)
end

function MatSchurComplementGetPmat(arg1, arg2, arg3)
    ccall((:MatSchurComplementGetPmat, $petsc_library), PetscErrorCode, (Mat, MatReuse, Ptr{Mat}), arg1, arg2, arg3)
end

function MatSchurComplementComputeExplicitOperator(arg1, arg2)
    ccall((:MatSchurComplementComputeExplicitOperator, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatGetSchurComplement(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:MatGetSchurComplement, $petsc_library), PetscErrorCode, (Mat, IS, IS, IS, IS, MatReuse, Ptr{Mat}, MatSchurComplementAinvType, MatReuse, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function MatCreateSchurComplementPmat(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:MatCreateSchurComplementPmat, $petsc_library), PetscErrorCode, (Mat, Mat, Mat, Mat, MatSchurComplementAinvType, MatReuse, Ptr{Mat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function MatCreateLMVMDFP(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMDFP, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateLMVMBFGS(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMBFGS, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateLMVMDBFGS(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMDBFGS, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateLMVMDDFP(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMDDFP, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateLMVMDQN(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMDQN, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateLMVMSR1(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMSR1, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateLMVMBroyden(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMBroyden, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateLMVMBadBroyden(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMBadBroyden, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateLMVMSymBroyden(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMSymBroyden, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateLMVMSymBadBroyden(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMSymBadBroyden, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatCreateLMVMDiagBroyden(arg1, arg2, arg3, arg4)
    ccall((:MatCreateLMVMDiagBroyden, $petsc_library), PetscErrorCode, (MPI_Comm, PetscInt, PetscInt, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

function MatLMVMUpdate(arg1, arg2, arg3)
    ccall((:MatLMVMUpdate, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatLMVMIsAllocated(arg1, arg2)
    ccall((:MatLMVMIsAllocated, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

function MatLMVMAllocate(arg1, arg2, arg3)
    ccall((:MatLMVMAllocate, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatLMVMReset(arg1, arg2)
    ccall((:MatLMVMReset, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

function MatLMVMResetShift(arg1)
    ccall((:MatLMVMResetShift, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatLMVMClearJ0(arg1)
    ccall((:MatLMVMClearJ0, $petsc_library), PetscErrorCode, (Mat,), arg1)
end

function MatLMVMSetJ0(arg1, arg2)
    ccall((:MatLMVMSetJ0, $petsc_library), PetscErrorCode, (Mat, Mat), arg1, arg2)
end

function MatLMVMSetJ0Scale(arg1, arg2)
    ccall((:MatLMVMSetJ0Scale, $petsc_library), PetscErrorCode, (Mat, PetscReal), arg1, arg2)
end

function MatLMVMSetJ0Diag(arg1, arg2)
    ccall((:MatLMVMSetJ0Diag, $petsc_library), PetscErrorCode, (Mat, Vec), arg1, arg2)
end

function MatLMVMSetJ0PC(arg1, arg2)
    ccall((:MatLMVMSetJ0PC, $petsc_library), PetscErrorCode, (Mat, PC), arg1, arg2)
end

function MatLMVMSetJ0KSP(arg1, arg2)
    ccall((:MatLMVMSetJ0KSP, $petsc_library), PetscErrorCode, (Mat, KSP), arg1, arg2)
end

function MatLMVMApplyJ0Fwd(arg1, arg2, arg3)
    ccall((:MatLMVMApplyJ0Fwd, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatLMVMApplyJ0Inv(arg1, arg2, arg3)
    ccall((:MatLMVMApplyJ0Inv, $petsc_library), PetscErrorCode, (Mat, Vec, Vec), arg1, arg2, arg3)
end

function MatLMVMGetJ0(arg1, arg2)
    ccall((:MatLMVMGetJ0, $petsc_library), PetscErrorCode, (Mat, Ptr{Mat}), arg1, arg2)
end

function MatLMVMGetJ0PC(arg1, arg2)
    ccall((:MatLMVMGetJ0PC, $petsc_library), PetscErrorCode, (Mat, Ptr{PC}), arg1, arg2)
end

function MatLMVMGetJ0KSP(arg1, arg2)
    ccall((:MatLMVMGetJ0KSP, $petsc_library), PetscErrorCode, (Mat, Ptr{KSP}), arg1, arg2)
end

function MatLMVMSetHistorySize(arg1, arg2)
    ccall((:MatLMVMSetHistorySize, $petsc_library), PetscErrorCode, (Mat, PetscInt), arg1, arg2)
end

function MatLMVMGetHistorySize(arg1, arg2)
    ccall((:MatLMVMGetHistorySize, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatLMVMGetUpdateCount(arg1, arg2)
    ccall((:MatLMVMGetUpdateCount, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatLMVMGetRejectCount(arg1, arg2)
    ccall((:MatLMVMGetRejectCount, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscInt}), arg1, arg2)
end

function MatLMVMSymBroydenSetDelta(arg1, arg2)
    ccall((:MatLMVMSymBroydenSetDelta, $petsc_library), PetscErrorCode, (Mat, PetscScalar), arg1, arg2)
end

@enum MatLMVMSymBroydenScaleType::UInt32 begin
    MAT_LMVM_SYMBROYDEN_SCALE_NONE = 0
    MAT_LMVM_SYMBROYDEN_SCALE_SCALAR = 1
    MAT_LMVM_SYMBROYDEN_SCALE_DIAGONAL = 2
    MAT_LMVM_SYMBROYDEN_SCALE_USER = 3
end

function MatLMVMSymBroydenSetScaleType(arg1, arg2)
    ccall((:MatLMVMSymBroydenSetScaleType, $petsc_library), PetscErrorCode, (Mat, MatLMVMSymBroydenScaleType), arg1, arg2)
end

@enum MatLMVMDenseType::UInt32 begin
    MAT_LMVM_DENSE_REORDER = 0
    MAT_LMVM_DENSE_INPLACE = 1
end

function MatLMVMDenseSetType(arg1, arg2)
    ccall((:MatLMVMDenseSetType, $petsc_library), PetscErrorCode, (Mat, MatLMVMDenseType), arg1, arg2)
end

function KSPSetDM(arg1, arg2)
    ccall((:KSPSetDM, $petsc_library), PetscErrorCode, (KSP, DM), arg1, arg2)
end

function KSPSetDMActive(arg1, arg2)
    ccall((:KSPSetDMActive, $petsc_library), PetscErrorCode, (KSP, PetscBool), arg1, arg2)
end

function KSPGetDM(arg1, arg2)
    ccall((:KSPGetDM, $petsc_library), PetscErrorCode, (KSP, Ptr{DM}), arg1, arg2)
end

function KSPSetApplicationContext(arg1, arg2)
    ccall((:KSPSetApplicationContext, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}), arg1, arg2)
end

function KSPGetApplicationContext(arg1, arg2)
    ccall((:KSPGetApplicationContext, $petsc_library), PetscErrorCode, (KSP, Ptr{Cvoid}), arg1, arg2)
end

# typedef PetscErrorCode ( KSPComputeRHSFn ) ( KSP ksp , Vec b , void * ctx )
const KSPComputeRHSFn = Cvoid

function KSPSetComputeRHS(arg1, arg2, arg3)
    ccall((:KSPSetComputeRHS, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPComputeRHSFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

# typedef PetscErrorCode ( KSPComputeOperatorsFn ) ( KSP ksp , Mat A , Mat P , void * ctx )
const KSPComputeOperatorsFn = Cvoid

function KSPSetComputeOperators(arg1, arg2, arg3)
    ccall((:KSPSetComputeOperators, $petsc_library), PetscErrorCode, (KSP, KSPComputeOperatorsFn, Ptr{Cvoid}), arg1, arg2, arg3)
end

# typedef PetscErrorCode ( KSPComputeInitialGuessFn ) ( KSP ksp , Vec x , void * ctx )
const KSPComputeInitialGuessFn = Cvoid

function KSPSetComputeInitialGuess(arg1, arg2, arg3)
    ccall((:KSPSetComputeInitialGuess, $petsc_library), PetscErrorCode, (KSP, Ptr{KSPComputeInitialGuessFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMKSPSetComputeOperators(arg1, arg2, arg3)
    ccall((:DMKSPSetComputeOperators, $petsc_library), PetscErrorCode, (DM, Ptr{KSPComputeOperatorsFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMKSPGetComputeOperators(arg1, arg2, arg3)
    ccall((:DMKSPGetComputeOperators, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{KSPComputeOperatorsFn}}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMKSPSetComputeRHS(arg1, arg2, arg3)
    ccall((:DMKSPSetComputeRHS, $petsc_library), PetscErrorCode, (DM, Ptr{KSPComputeRHSFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMKSPGetComputeRHS(arg1, arg2, arg3)
    ccall((:DMKSPGetComputeRHS, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{KSPComputeRHSFn}}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMKSPSetComputeInitialGuess(arg1, arg2, arg3)
    ccall((:DMKSPSetComputeInitialGuess, $petsc_library), PetscErrorCode, (DM, Ptr{KSPComputeInitialGuessFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMKSPGetComputeInitialGuess(arg1, arg2, arg3)
    ccall((:DMKSPGetComputeInitialGuess, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{KSPComputeInitialGuessFn}}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMGlobalToLocalSolve(arg1, arg2, arg3)
    ccall((:DMGlobalToLocalSolve, $petsc_library), PetscErrorCode, (DM, Vec, Vec), arg1, arg2, arg3)
end

function DMProjectField(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMProjectField, $petsc_library), PetscErrorCode, (DM, PetscReal, Vec, Ptr{Ptr{Cvoid}}, InsertMode, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMSwarmProjectFields(arg1, arg2, arg3, arg4, arg5, mode)
    ccall((:DMSwarmProjectFields, $petsc_library), PetscErrorCode, (DM, DM, PetscInt, Ptr{Ptr{Cchar}}, Ptr{Vec}, ScatterMode), arg1, arg2, arg3, arg4, arg5, mode)
end

function DMAdaptInterpolator(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMAdaptInterpolator, $petsc_library), PetscErrorCode, (DM, DM, Mat, KSP, Mat, Mat, Ptr{Mat}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMCheckInterpolator(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMCheckInterpolator, $petsc_library), PetscErrorCode, (DM, Mat, Mat, Mat, PetscReal), arg1, arg2, arg3, arg4, arg5)
end

function PCBJKOKKOSSetKSP(arg1, arg2)
    ccall((:PCBJKOKKOSSetKSP, $petsc_library), PetscErrorCode, (PC, KSP), arg1, arg2)
end

function PCBJKOKKOSGetKSP(arg1, arg2)
    ccall((:PCBJKOKKOSGetKSP, $petsc_library), PetscErrorCode, (PC, Ptr{KSP}), arg1, arg2)
end

function SNESInitializePackage()
    ccall((:SNESInitializePackage, $petsc_library), PetscErrorCode, ())
end

function SNESFinalizePackage()
    ccall((:SNESFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function SNESCreate(arg1, arg2)
    ccall((:SNESCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{SNES}), arg1, arg2)
end

function SNESReset(arg1)
    ccall((:SNESReset, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESDestroy(arg1)
    ccall((:SNESDestroy, $petsc_library), PetscErrorCode, (Ptr{SNES},), arg1)
end

function SNESSetType(arg1, arg2)
    ccall((:SNESSetType, $petsc_library), PetscErrorCode, (SNES, SNESType), arg1, arg2)
end

function SNESMonitor(arg1, arg2, arg3)
    ccall((:SNESMonitor, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal), arg1, arg2, arg3)
end

function SNESMonitorSet(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorSet, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function SNESMonitorSetFromOptions(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESMonitorSetFromOptions, $petsc_library), PetscErrorCode, (SNES, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESMonitorCancel(arg1)
    ccall((:SNESMonitorCancel, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESMonitorSAWs(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorSAWs, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function SNESMonitorSAWsCreate(arg1, arg2)
    ccall((:SNESMonitorSAWsCreate, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function SNESMonitorSAWsDestroy(arg1)
    ccall((:SNESMonitorSAWsDestroy, $petsc_library), PetscErrorCode, (Ptr{Ptr{Cvoid}},), arg1)
end

function SNESSetConvergenceHistory(arg1, arg2, arg3, arg4, arg5)
    ccall((:SNESSetConvergenceHistory, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscReal}, Ptr{PetscInt}, PetscInt, PetscBool), arg1, arg2, arg3, arg4, arg5)
end

function SNESGetConvergenceHistory(arg1, arg2, arg3, arg4)
    ccall((:SNESGetConvergenceHistory, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscInt}}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function SNESSetUp(arg1)
    ccall((:SNESSetUp, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESSolve(arg1, arg2, arg3)
    ccall((:SNESSolve, $petsc_library), PetscErrorCode, (SNES, Vec, Vec), arg1, arg2, arg3)
end

function SNESSetErrorIfNotConverged(arg1, arg2)
    ccall((:SNESSetErrorIfNotConverged, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESGetErrorIfNotConverged(arg1, arg2)
    ccall((:SNESGetErrorIfNotConverged, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESConverged(arg1, arg2, arg3, arg4, arg5)
    ccall((:SNESConverged, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5)
end

function SNESSetWorkVecs(arg1, arg2)
    ccall((:SNESSetWorkVecs, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESAddOptionsChecker(arg1)
    ccall((:SNESAddOptionsChecker, $petsc_library), PetscErrorCode, (Ptr{Cvoid},), arg1)
end

function SNESSetUpdate(arg1, arg2)
    ccall((:SNESSetUpdate, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}), arg1, arg2)
end

function SNESRegister(arg1, arg2)
    ccall((:SNESRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function SNESGetKSP(arg1, arg2)
    ccall((:SNESGetKSP, $petsc_library), PetscErrorCode, (SNES, Ptr{KSP}), arg1, arg2)
end

function SNESSetKSP(arg1, arg2)
    ccall((:SNESSetKSP, $petsc_library), PetscErrorCode, (SNES, KSP), arg1, arg2)
end

function SNESSetSolution(arg1, arg2)
    ccall((:SNESSetSolution, $petsc_library), PetscErrorCode, (SNES, Vec), arg1, arg2)
end

function SNESGetSolution(arg1, arg2)
    ccall((:SNESGetSolution, $petsc_library), PetscErrorCode, (SNES, Ptr{Vec}), arg1, arg2)
end

function SNESGetSolutionUpdate(arg1, arg2)
    ccall((:SNESGetSolutionUpdate, $petsc_library), PetscErrorCode, (SNES, Ptr{Vec}), arg1, arg2)
end

function SNESGetRhs(arg1, arg2)
    ccall((:SNESGetRhs, $petsc_library), PetscErrorCode, (SNES, Ptr{Vec}), arg1, arg2)
end

function SNESView(arg1, arg2)
    ccall((:SNESView, $petsc_library), PetscErrorCode, (SNES, PetscViewer), arg1, arg2)
end

function SNESLoad(arg1, arg2)
    ccall((:SNESLoad, $petsc_library), PetscErrorCode, (SNES, PetscViewer), arg1, arg2)
end

function SNESConvergedReasonViewSet(arg1, arg2, arg3, arg4)
    ccall((:SNESConvergedReasonViewSet, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function SNESViewFromOptions(arg1, arg2, arg3)
    ccall((:SNESViewFromOptions, $petsc_library), PetscErrorCode, (SNES, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function SNESConvergedReasonView(arg1, arg2)
    ccall((:SNESConvergedReasonView, $petsc_library), PetscErrorCode, (SNES, PetscViewer), arg1, arg2)
end

function SNESConvergedReasonViewFromOptions(arg1)
    ccall((:SNESConvergedReasonViewFromOptions, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESConvergedReasonViewCancel(arg1)
    ccall((:SNESConvergedReasonViewCancel, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESReasonView(snes, v)
    ccall((:SNESReasonView, $petsc_library), PetscErrorCode, (SNES, PetscViewer), snes, v)
end

function SNESReasonViewFromOptions(snes)
    ccall((:SNESReasonViewFromOptions, $petsc_library), PetscErrorCode, (SNES,), snes)
end

function SNESSetOptionsPrefix(arg1, arg2)
    ccall((:SNESSetOptionsPrefix, $petsc_library), PetscErrorCode, (SNES, Ptr{Cchar}), arg1, arg2)
end

function SNESAppendOptionsPrefix(arg1, arg2)
    ccall((:SNESAppendOptionsPrefix, $petsc_library), PetscErrorCode, (SNES, Ptr{Cchar}), arg1, arg2)
end

function SNESGetOptionsPrefix(arg1, arg2)
    ccall((:SNESGetOptionsPrefix, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function SNESSetFromOptions(arg1)
    ccall((:SNESSetFromOptions, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESResetFromOptions(arg1)
    ccall((:SNESResetFromOptions, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESSetUseMatrixFree(arg1, arg2, arg3)
    ccall((:SNESSetUseMatrixFree, $petsc_library), PetscErrorCode, (SNES, PetscBool, PetscBool), arg1, arg2, arg3)
end

function SNESGetUseMatrixFree(arg1, arg2, arg3)
    ccall((:SNESGetUseMatrixFree, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3)
end

function MatCreateSNESMF(arg1, arg2)
    ccall((:MatCreateSNESMF, $petsc_library), PetscErrorCode, (SNES, Ptr{Mat}), arg1, arg2)
end

function MatSNESMFGetSNES(arg1, arg2)
    ccall((:MatSNESMFGetSNES, $petsc_library), PetscErrorCode, (Mat, Ptr{SNES}), arg1, arg2)
end

function MatSNESMFSetReuseBase(arg1, arg2)
    ccall((:MatSNESMFSetReuseBase, $petsc_library), PetscErrorCode, (Mat, PetscBool), arg1, arg2)
end

function MatSNESMFGetReuseBase(arg1, arg2)
    ccall((:MatSNESMFGetReuseBase, $petsc_library), PetscErrorCode, (Mat, Ptr{PetscBool}), arg1, arg2)
end

function MatMFFDComputeJacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:MatMFFDComputeJacobian, $petsc_library), PetscErrorCode, (SNES, Vec, Mat, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function MatCreateSNESMFMore(arg1, arg2, arg3)
    ccall((:MatCreateSNESMFMore, $petsc_library), PetscErrorCode, (SNES, Vec, Ptr{Mat}), arg1, arg2, arg3)
end

function MatSNESMFMoreSetParameters(arg1, arg2, arg3, arg4)
    ccall((:MatSNESMFMoreSetParameters, $petsc_library), PetscErrorCode, (Mat, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4)
end

function SNESGetType(arg1, arg2)
    ccall((:SNESGetType, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESType}), arg1, arg2)
end

function SNESMonitorDefaultSetUp(arg1, arg2)
    ccall((:SNESMonitorDefaultSetUp, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscViewerAndFormat}), arg1, arg2)
end

function SNESMonitorDefault(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorDefault, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function SNESMonitorScaling(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorScaling, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function SNESMonitorRange(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorRange, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function SNESMonitorRatio(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorRatio, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function SNESMonitorRatioSetUp(arg1, arg2)
    ccall((:SNESMonitorRatioSetUp, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscViewerAndFormat}), arg1, arg2)
end

function SNESMonitorSolution(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorSolution, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function SNESMonitorResidual(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorResidual, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function SNESMonitorSolutionUpdate(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorSolutionUpdate, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function SNESMonitorDefaultShort(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorDefaultShort, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function SNESMonitorDefaultField(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorDefaultField, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function SNESMonitorJacUpdateSpectrum(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorJacUpdateSpectrum, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function SNESMonitorFields(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorFields, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorSNESResidual(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSNESResidual, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorSNESResidualDrawLG(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSNESResidualDrawLG, $petsc_library), PetscErrorCode, (KSP, PetscInt, PetscReal, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4)
end

function KSPMonitorSNESResidualDrawLGCreate(arg1, arg2, arg3, arg4)
    ccall((:KSPMonitorSNESResidualDrawLGCreate, $petsc_library), PetscErrorCode, (PetscViewer, PetscViewerFormat, Ptr{Cvoid}, Ptr{Ptr{PetscViewerAndFormat}}), arg1, arg2, arg3, arg4)
end

function SNESSetTolerances(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESSetTolerances, $petsc_library), PetscErrorCode, (SNES, PetscReal, PetscReal, PetscReal, PetscInt, PetscInt), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESSetDivergenceTolerance(arg1, arg2)
    ccall((:SNESSetDivergenceTolerance, $petsc_library), PetscErrorCode, (SNES, PetscReal), arg1, arg2)
end

function SNESGetTolerances(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESGetTolerances, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESGetDivergenceTolerance(arg1, arg2)
    ccall((:SNESGetDivergenceTolerance, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscReal}), arg1, arg2)
end

function SNESSetTrustRegionTolerance(arg1, arg2)
    ccall((:SNESSetTrustRegionTolerance, $petsc_library), PetscErrorCode, (SNES, PetscReal), arg1, arg2)
end

function SNESGetForceIteration(arg1, arg2)
    ccall((:SNESGetForceIteration, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESSetForceIteration(arg1, arg2)
    ccall((:SNESSetForceIteration, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESGetIterationNumber(arg1, arg2)
    ccall((:SNESGetIterationNumber, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESSetIterationNumber(arg1, arg2)
    ccall((:SNESSetIterationNumber, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

@enum SNESNewtonTRFallbackType::UInt32 begin
    SNES_TR_FALLBACK_NEWTON = 0
    SNES_TR_FALLBACK_CAUCHY = 1
    SNES_TR_FALLBACK_DOGLEG = 2
end

function SNESNewtonTRSetPreCheck(arg1, arg2, ctx)
    ccall((:SNESNewtonTRSetPreCheck, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, ctx)
end

function SNESNewtonTRGetPreCheck(arg1, arg2, ctx)
    ccall((:SNESNewtonTRGetPreCheck, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, ctx)
end

function SNESNewtonTRSetPostCheck(arg1, arg2, ctx)
    ccall((:SNESNewtonTRSetPostCheck, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, ctx)
end

function SNESNewtonTRGetPostCheck(arg1, arg2, ctx)
    ccall((:SNESNewtonTRGetPostCheck, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, ctx)
end

function SNESNewtonTRSetFallbackType(arg1, arg2)
    ccall((:SNESNewtonTRSetFallbackType, $petsc_library), PetscErrorCode, (SNES, SNESNewtonTRFallbackType), arg1, arg2)
end

function SNESNewtonTRPreCheck(arg1, arg2, arg3, arg4)
    ccall((:SNESNewtonTRPreCheck, $petsc_library), PetscErrorCode, (SNES, Vec, Vec, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function SNESNewtonTRPostCheck(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESNewtonTRPostCheck, $petsc_library), PetscErrorCode, (SNES, Vec, Vec, Vec, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESNewtonTRSetNormType(arg1, arg2)
    ccall((:SNESNewtonTRSetNormType, $petsc_library), PetscErrorCode, (SNES, NormType), arg1, arg2)
end

@enum SNESNewtonTRQNType::UInt32 begin
    SNES_TR_QN_NONE = 0
    SNES_TR_QN_SAME = 1
    SNES_TR_QN_DIFFERENT = 2
end

function SNESNewtonTRSetQNType(arg1, arg2)
    ccall((:SNESNewtonTRSetQNType, $petsc_library), PetscErrorCode, (SNES, SNESNewtonTRQNType), arg1, arg2)
end

function SNESNewtonTRDCGetRhoFlag(arg1, arg2)
    ccall((:SNESNewtonTRDCGetRhoFlag, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESNewtonTRDCSetPreCheck(arg1, arg2, ctx)
    ccall((:SNESNewtonTRDCSetPreCheck, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, ctx)
end

function SNESNewtonTRDCGetPreCheck(arg1, arg2, ctx)
    ccall((:SNESNewtonTRDCGetPreCheck, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, ctx)
end

function SNESNewtonTRDCSetPostCheck(arg1, arg2, ctx)
    ccall((:SNESNewtonTRDCSetPostCheck, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, ctx)
end

function SNESNewtonTRDCGetPostCheck(arg1, arg2, ctx)
    ccall((:SNESNewtonTRDCGetPostCheck, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, ctx)
end

function SNESGetNonlinearStepFailures(arg1, arg2)
    ccall((:SNESGetNonlinearStepFailures, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESSetMaxNonlinearStepFailures(arg1, arg2)
    ccall((:SNESSetMaxNonlinearStepFailures, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESGetMaxNonlinearStepFailures(arg1, arg2)
    ccall((:SNESGetMaxNonlinearStepFailures, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESGetNumberFunctionEvals(arg1, arg2)
    ccall((:SNESGetNumberFunctionEvals, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESSetLagPreconditioner(arg1, arg2)
    ccall((:SNESSetLagPreconditioner, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESGetLagPreconditioner(arg1, arg2)
    ccall((:SNESGetLagPreconditioner, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESSetLagJacobian(arg1, arg2)
    ccall((:SNESSetLagJacobian, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESGetLagJacobian(arg1, arg2)
    ccall((:SNESGetLagJacobian, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESSetLagPreconditionerPersists(arg1, arg2)
    ccall((:SNESSetLagPreconditionerPersists, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESSetLagJacobianPersists(arg1, arg2)
    ccall((:SNESSetLagJacobianPersists, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESSetGridSequence(arg1, arg2)
    ccall((:SNESSetGridSequence, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESGetGridSequence(arg1, arg2)
    ccall((:SNESGetGridSequence, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESGetLinearSolveIterations(arg1, arg2)
    ccall((:SNESGetLinearSolveIterations, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESGetLinearSolveFailures(arg1, arg2)
    ccall((:SNESGetLinearSolveFailures, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESSetMaxLinearSolveFailures(arg1, arg2)
    ccall((:SNESSetMaxLinearSolveFailures, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESGetMaxLinearSolveFailures(arg1, arg2)
    ccall((:SNESGetMaxLinearSolveFailures, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESSetCountersReset(arg1, arg2)
    ccall((:SNESSetCountersReset, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESKSPSetUseEW(arg1, arg2)
    ccall((:SNESKSPSetUseEW, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESKSPGetUseEW(arg1, arg2)
    ccall((:SNESKSPGetUseEW, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESKSPSetParametersEW(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:SNESKSPSetParametersEW, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function SNESKSPGetParametersEW(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:SNESKSPGetParametersEW, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function SNESMonitorLGRange(arg1, arg2, arg3, arg4)
    ccall((:SNESMonitorLGRange, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function SNESSetApplicationContext(arg1, arg2)
    ccall((:SNESSetApplicationContext, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}), arg1, arg2)
end

function SNESGetApplicationContext(arg1, arg2)
    ccall((:SNESGetApplicationContext, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}), arg1, arg2)
end

function SNESSetComputeApplicationContext(arg1, arg2, arg3)
    ccall((:SNESSetComputeApplicationContext, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function SNESPythonSetType(arg1, arg2)
    ccall((:SNESPythonSetType, $petsc_library), PetscErrorCode, (SNES, Ptr{Cchar}), arg1, arg2)
end

function SNESPythonGetType(arg1, arg2)
    ccall((:SNESPythonGetType, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function SNESSetFunctionDomainError(arg1)
    ccall((:SNESSetFunctionDomainError, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESGetFunctionDomainError(arg1, arg2)
    ccall((:SNESGetFunctionDomainError, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESGetJacobianDomainError(arg1, arg2)
    ccall((:SNESGetJacobianDomainError, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESSetJacobianDomainError(arg1)
    ccall((:SNESSetJacobianDomainError, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESSetCheckJacobianDomainError(arg1, arg2)
    ccall((:SNESSetCheckJacobianDomainError, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESGetCheckJacobianDomainError(arg1, arg2)
    ccall((:SNESGetCheckJacobianDomainError, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESSetConvergenceTest(arg1, arg2, arg3, arg4)
    ccall((:SNESSetConvergenceTest, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function SNESConvergedDefault(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:SNESConvergedDefault, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, PetscReal, PetscReal, Ptr{SNESConvergedReason}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function SNESConvergedCorrectPressure(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:SNESConvergedCorrectPressure, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal, PetscReal, PetscReal, Ptr{SNESConvergedReason}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function SNESGetConvergedReason(arg1, arg2)
    ccall((:SNESGetConvergedReason, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESConvergedReason}), arg1, arg2)
end

function SNESGetConvergedReasonString(arg1, arg2)
    ccall((:SNESGetConvergedReasonString, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function SNESSetConvergedReason(arg1, arg2)
    ccall((:SNESSetConvergedReason, $petsc_library), PetscErrorCode, (SNES, SNESConvergedReason), arg1, arg2)
end

# typedef PetscErrorCode ( SNESInitialGuessFn ) ( SNES snes , Vec u , void * ctx )
const SNESInitialGuessFn = Cvoid

# typedef PetscErrorCode ( SNESFunctionFn ) ( SNES snes , Vec u , Vec F , void * ctx )
const SNESFunctionFn = Cvoid

# typedef PetscErrorCode ( SNESObjectiveFn ) ( SNES snes , Vec u , PetscReal * o , void * ctx )
const SNESObjectiveFn = Cvoid

# typedef PetscErrorCode ( SNESJacobianFn ) ( SNES snes , Vec u , Mat Amat , Mat Pmat , void * ctx )
const SNESJacobianFn = Cvoid

# typedef PetscErrorCode ( SNESNGSFn ) ( SNES snes , Vec u , Vec b , void * ctx )
const SNESNGSFn = Cvoid

function SNESSetFunction(arg1, arg2, arg3, arg4)
    ccall((:SNESSetFunction, $petsc_library), PetscErrorCode, (SNES, Vec, Ptr{SNESFunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function SNESGetFunction(arg1, arg2, arg3, arg4)
    ccall((:SNESGetFunction, $petsc_library), PetscErrorCode, (SNES, Ptr{Vec}, Ptr{Ptr{SNESFunctionFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function SNESComputeFunction(arg1, arg2, arg3)
    ccall((:SNESComputeFunction, $petsc_library), PetscErrorCode, (SNES, Vec, Vec), arg1, arg2, arg3)
end

function SNESComputeMFFunction(arg1, arg2, arg3)
    ccall((:SNESComputeMFFunction, $petsc_library), PetscErrorCode, (SNES, Vec, Vec), arg1, arg2, arg3)
end

function SNESSetInitialFunction(arg1, arg2)
    ccall((:SNESSetInitialFunction, $petsc_library), PetscErrorCode, (SNES, Vec), arg1, arg2)
end

function SNESSetJacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:SNESSetJacobian, $petsc_library), PetscErrorCode, (SNES, Mat, Mat, Ptr{SNESJacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function SNESGetJacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:SNESGetJacobian, $petsc_library), PetscErrorCode, (SNES, Ptr{Mat}, Ptr{Mat}, Ptr{Ptr{SNESJacobianFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5)
end

function SNESPruneJacobianColor(arg1, arg2, arg3)
    ccall((:SNESPruneJacobianColor, $petsc_library), PetscErrorCode, (SNES, Mat, Mat), arg1, arg2, arg3)
end

function SNESSetComputeInitialGuess(arg1, arg2, arg3)
    ccall((:SNESSetComputeInitialGuess, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESInitialGuessFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function SNESSetPicard(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:SNESSetPicard, $petsc_library), PetscErrorCode, (SNES, Vec, Ptr{SNESFunctionFn}, Mat, Mat, Ptr{SNESJacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function SNESGetPicard(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:SNESGetPicard, $petsc_library), PetscErrorCode, (SNES, Ptr{Vec}, Ptr{Ptr{SNESFunctionFn}}, Ptr{Mat}, Ptr{Mat}, Ptr{Ptr{SNESJacobianFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function SNESSetObjective(arg1, arg2, arg3)
    ccall((:SNESSetObjective, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESObjectiveFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function SNESGetObjective(arg1, arg2, arg3)
    ccall((:SNESGetObjective, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{SNESObjectiveFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function SNESComputeObjective(arg1, arg2, arg3)
    ccall((:SNESComputeObjective, $petsc_library), PetscErrorCode, (SNES, Vec, Ptr{PetscReal}), arg1, arg2, arg3)
end

@enum SNESNormSchedule::Int32 begin
    SNES_NORM_DEFAULT = -1
    SNES_NORM_NONE = 0
    SNES_NORM_ALWAYS = 1
    SNES_NORM_INITIAL_ONLY = 2
    SNES_NORM_FINAL_ONLY = 3
    SNES_NORM_INITIAL_FINAL_ONLY = 4
end

function SNESSetNormSchedule(arg1, arg2)
    ccall((:SNESSetNormSchedule, $petsc_library), PetscErrorCode, (SNES, SNESNormSchedule), arg1, arg2)
end

function SNESGetNormSchedule(arg1, arg2)
    ccall((:SNESGetNormSchedule, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESNormSchedule}), arg1, arg2)
end

function SNESSetFunctionNorm(arg1, arg2)
    ccall((:SNESSetFunctionNorm, $petsc_library), PetscErrorCode, (SNES, PetscReal), arg1, arg2)
end

function SNESGetFunctionNorm(arg1, arg2)
    ccall((:SNESGetFunctionNorm, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscReal}), arg1, arg2)
end

function SNESGetUpdateNorm(arg1, arg2)
    ccall((:SNESGetUpdateNorm, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscReal}), arg1, arg2)
end

function SNESGetSolutionNorm(arg1, arg2)
    ccall((:SNESGetSolutionNorm, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscReal}), arg1, arg2)
end

@enum SNESFunctionType::Int32 begin
    SNES_FUNCTION_DEFAULT = -1
    SNES_FUNCTION_UNPRECONDITIONED = 0
    SNES_FUNCTION_PRECONDITIONED = 1
end

function SNESSetFunctionType(arg1, arg2)
    ccall((:SNESSetFunctionType, $petsc_library), PetscErrorCode, (SNES, SNESFunctionType), arg1, arg2)
end

function SNESGetFunctionType(arg1, arg2)
    ccall((:SNESGetFunctionType, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESFunctionType}), arg1, arg2)
end

function SNESSetNGS(arg1, arg2, arg3)
    ccall((:SNESSetNGS, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESNGSFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function SNESGetNGS(arg1, arg2, arg3)
    ccall((:SNESGetNGS, $petsc_library), PetscErrorCode, (SNES, Ptr{Ptr{SNESNGSFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function SNESComputeNGS(arg1, arg2, arg3)
    ccall((:SNESComputeNGS, $petsc_library), PetscErrorCode, (SNES, Vec, Vec), arg1, arg2, arg3)
end

function SNESNGSSetSweeps(arg1, arg2)
    ccall((:SNESNGSSetSweeps, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESNGSGetSweeps(arg1, arg2)
    ccall((:SNESNGSGetSweeps, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESNGSSetTolerances(arg1, arg2, arg3, arg4, arg5)
    ccall((:SNESNGSSetTolerances, $petsc_library), PetscErrorCode, (SNES, PetscReal, PetscReal, PetscReal, PetscInt), arg1, arg2, arg3, arg4, arg5)
end

function SNESNGSGetTolerances(arg1, arg2, arg3, arg4, arg5)
    ccall((:SNESNGSGetTolerances, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5)
end

function SNESSetAlwaysComputesFinalResidual(arg1, arg2)
    ccall((:SNESSetAlwaysComputesFinalResidual, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESGetAlwaysComputesFinalResidual(arg1, arg2)
    ccall((:SNESGetAlwaysComputesFinalResidual, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESShellGetContext(arg1, arg2)
    ccall((:SNESShellGetContext, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}), arg1, arg2)
end

function SNESShellSetContext(arg1, arg2)
    ccall((:SNESShellSetContext, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}), arg1, arg2)
end

function SNESShellSetSolve(arg1, arg2)
    ccall((:SNESShellSetSolve, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}), arg1, arg2)
end

mutable struct _p_LineSearch end

const SNESLineSearch = Ptr{_p_LineSearch}

const SNESLineSearchType = Ptr{Cchar}

# typedef PetscErrorCode ( SNESLineSearchVIProjectFn ) ( SNES snes , Vec u )
const SNESLineSearchVIProjectFn = Cvoid

const SNESLineSearchVIProjectFunc = Ptr{SNESLineSearchVIProjectFn}

# typedef PetscErrorCode ( SNESLineSearchVINormFn ) ( SNES snes , Vec f , Vec u , PetscReal * fnorm )
const SNESLineSearchVINormFn = Cvoid

const SNESLineSearchVINormFunc = Ptr{SNESLineSearchVINormFn}

# typedef PetscErrorCode ( SNESLineSearchApplyFn ) ( SNESLineSearch )
const SNESLineSearchApplyFn = Cvoid

const SNESLineSearchApplyFunc = Ptr{SNESLineSearchApplyFn}

# typedef PetscErrorCode ( SNESLineSearchShellApplyFn ) ( SNESLineSearch , void * )
const SNESLineSearchShellApplyFn = Cvoid

const SNESLineSearchUserFunc = Ptr{SNESLineSearchShellApplyFn}

function SNESLineSearchCreate(arg1, arg2)
    ccall((:SNESLineSearchCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{SNESLineSearch}), arg1, arg2)
end

function SNESLineSearchReset(arg1)
    ccall((:SNESLineSearchReset, $petsc_library), PetscErrorCode, (SNESLineSearch,), arg1)
end

function SNESLineSearchView(arg1, arg2)
    ccall((:SNESLineSearchView, $petsc_library), PetscErrorCode, (SNESLineSearch, PetscViewer), arg1, arg2)
end

function SNESLineSearchDestroy(arg1)
    ccall((:SNESLineSearchDestroy, $petsc_library), PetscErrorCode, (Ptr{SNESLineSearch},), arg1)
end

function SNESLineSearchGetType(arg1, arg2)
    ccall((:SNESLineSearchGetType, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{SNESLineSearchType}), arg1, arg2)
end

function SNESLineSearchSetType(arg1, arg2)
    ccall((:SNESLineSearchSetType, $petsc_library), PetscErrorCode, (SNESLineSearch, SNESLineSearchType), arg1, arg2)
end

function SNESLineSearchSetFromOptions(arg1)
    ccall((:SNESLineSearchSetFromOptions, $petsc_library), PetscErrorCode, (SNESLineSearch,), arg1)
end

function SNESLineSearchSetFunction(arg1, arg2)
    ccall((:SNESLineSearchSetFunction, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Cvoid}), arg1, arg2)
end

function SNESLineSearchSetUp(arg1)
    ccall((:SNESLineSearchSetUp, $petsc_library), PetscErrorCode, (SNESLineSearch,), arg1)
end

function SNESLineSearchApply(arg1, arg2, arg3, arg4, arg5)
    ccall((:SNESLineSearchApply, $petsc_library), PetscErrorCode, (SNESLineSearch, Vec, Vec, Ptr{PetscReal}, Vec), arg1, arg2, arg3, arg4, arg5)
end

function SNESLineSearchPreCheck(arg1, arg2, arg3, arg4)
    ccall((:SNESLineSearchPreCheck, $petsc_library), PetscErrorCode, (SNESLineSearch, Vec, Vec, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function SNESLineSearchPostCheck(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESLineSearchPostCheck, $petsc_library), PetscErrorCode, (SNESLineSearch, Vec, Vec, Vec, Ptr{PetscBool}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESLineSearchSetWorkVecs(arg1, arg2)
    ccall((:SNESLineSearchSetWorkVecs, $petsc_library), PetscErrorCode, (SNESLineSearch, PetscInt), arg1, arg2)
end

function SNESLineSearchSetPreCheck(arg1, arg2, ctx)
    ccall((:SNESLineSearchSetPreCheck, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, ctx)
end

function SNESLineSearchSetPostCheck(arg1, arg2, ctx)
    ccall((:SNESLineSearchSetPostCheck, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, ctx)
end

function SNESLineSearchGetPreCheck(arg1, arg2, ctx)
    ccall((:SNESLineSearchGetPreCheck, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, ctx)
end

function SNESLineSearchGetPostCheck(arg1, arg2, ctx)
    ccall((:SNESLineSearchGetPostCheck, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, ctx)
end

function SNESLineSearchSetVIFunctions(arg1, arg2, arg3)
    ccall((:SNESLineSearchSetVIFunctions, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{SNESLineSearchVIProjectFn}, Ptr{SNESLineSearchVINormFn}), arg1, arg2, arg3)
end

function SNESLineSearchGetVIFunctions(arg1, arg2, arg3)
    ccall((:SNESLineSearchGetVIFunctions, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Ptr{SNESLineSearchVIProjectFn}}, Ptr{Ptr{SNESLineSearchVINormFn}}), arg1, arg2, arg3)
end

function SNESLineSearchSetSNES(arg1, arg2)
    ccall((:SNESLineSearchSetSNES, $petsc_library), PetscErrorCode, (SNESLineSearch, SNES), arg1, arg2)
end

function SNESLineSearchGetSNES(arg1, arg2)
    ccall((:SNESLineSearchGetSNES, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{SNES}), arg1, arg2)
end

function SNESLineSearchGetTolerances(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:SNESLineSearchGetTolerances, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function SNESLineSearchSetTolerances(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:SNESLineSearchSetTolerances, $petsc_library), PetscErrorCode, (SNESLineSearch, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal, PetscInt), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function SNESLineSearchPreCheckPicard(arg1, arg2, arg3, arg4, arg5)
    ccall((:SNESLineSearchPreCheckPicard, $petsc_library), PetscErrorCode, (SNESLineSearch, Vec, Vec, Ptr{PetscBool}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function SNESLineSearchGetLambda(arg1, arg2)
    ccall((:SNESLineSearchGetLambda, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{PetscReal}), arg1, arg2)
end

function SNESLineSearchSetLambda(arg1, arg2)
    ccall((:SNESLineSearchSetLambda, $petsc_library), PetscErrorCode, (SNESLineSearch, PetscReal), arg1, arg2)
end

function SNESLineSearchGetDamping(arg1, arg2)
    ccall((:SNESLineSearchGetDamping, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{PetscReal}), arg1, arg2)
end

function SNESLineSearchSetDamping(arg1, arg2)
    ccall((:SNESLineSearchSetDamping, $petsc_library), PetscErrorCode, (SNESLineSearch, PetscReal), arg1, arg2)
end

function SNESLineSearchGetOrder(arg1, order)
    ccall((:SNESLineSearchGetOrder, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{PetscInt}), arg1, order)
end

function SNESLineSearchSetOrder(arg1, order)
    ccall((:SNESLineSearchSetOrder, $petsc_library), PetscErrorCode, (SNESLineSearch, PetscInt), arg1, order)
end

@enum SNESLineSearchReason::UInt32 begin
    SNES_LINESEARCH_SUCCEEDED = 0
    SNES_LINESEARCH_FAILED_NANORINF = 1
    SNES_LINESEARCH_FAILED_DOMAIN = 2
    SNES_LINESEARCH_FAILED_REDUCT = 3
    SNES_LINESEARCH_FAILED_USER = 4
    SNES_LINESEARCH_FAILED_FUNCTION = 5
end

function SNESLineSearchGetReason(arg1, arg2)
    ccall((:SNESLineSearchGetReason, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{SNESLineSearchReason}), arg1, arg2)
end

function SNESLineSearchSetReason(arg1, arg2)
    ccall((:SNESLineSearchSetReason, $petsc_library), PetscErrorCode, (SNESLineSearch, SNESLineSearchReason), arg1, arg2)
end

function SNESLineSearchGetVecs(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESLineSearchGetVecs, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Vec}, Ptr{Vec}, Ptr{Vec}, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESLineSearchSetVecs(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESLineSearchSetVecs, $petsc_library), PetscErrorCode, (SNESLineSearch, Vec, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESLineSearchGetNorms(arg1, arg2, arg3, arg4)
    ccall((:SNESLineSearchGetNorms, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function SNESLineSearchSetNorms(arg1, arg2, arg3, arg4)
    ccall((:SNESLineSearchSetNorms, $petsc_library), PetscErrorCode, (SNESLineSearch, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4)
end

function SNESLineSearchComputeNorms(arg1)
    ccall((:SNESLineSearchComputeNorms, $petsc_library), PetscErrorCode, (SNESLineSearch,), arg1)
end

function SNESLineSearchSetComputeNorms(arg1, arg2)
    ccall((:SNESLineSearchSetComputeNorms, $petsc_library), PetscErrorCode, (SNESLineSearch, PetscBool), arg1, arg2)
end

function SNESLineSearchMonitor(arg1)
    ccall((:SNESLineSearchMonitor, $petsc_library), PetscErrorCode, (SNESLineSearch,), arg1)
end

function SNESLineSearchMonitorSet(arg1, arg2, arg3, arg4)
    ccall((:SNESLineSearchMonitorSet, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function SNESLineSearchMonitorSetFromOptions(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESLineSearchMonitorSetFromOptions, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESLineSearchMonitorCancel(arg1)
    ccall((:SNESLineSearchMonitorCancel, $petsc_library), PetscErrorCode, (SNESLineSearch,), arg1)
end

function SNESLineSearchSetDefaultMonitor(arg1, arg2)
    ccall((:SNESLineSearchSetDefaultMonitor, $petsc_library), PetscErrorCode, (SNESLineSearch, PetscViewer), arg1, arg2)
end

function SNESLineSearchGetDefaultMonitor(arg1, arg2)
    ccall((:SNESLineSearchGetDefaultMonitor, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{PetscViewer}), arg1, arg2)
end

function SNESLineSearchMonitorSolutionUpdate(arg1, arg2)
    ccall((:SNESLineSearchMonitorSolutionUpdate, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{PetscViewerAndFormat}), arg1, arg2)
end

function SNESLineSearchAppendOptionsPrefix(arg1, prefix)
    ccall((:SNESLineSearchAppendOptionsPrefix, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Cchar}), arg1, prefix)
end

function SNESLineSearchGetOptionsPrefix(arg1, prefix)
    ccall((:SNESLineSearchGetOptionsPrefix, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Ptr{Cchar}}), arg1, prefix)
end

function SNESLineSearchShellSetApply(arg1, arg2, arg3)
    ccall((:SNESLineSearchShellSetApply, $petsc_library), PetscErrorCode, (SNESLineSearch, SNESLineSearchShellApplyFn, Ptr{Cvoid}), arg1, arg2, arg3)
end

function SNESLineSearchShellGetApply(arg1, arg2, arg3)
    ccall((:SNESLineSearchShellGetApply, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{Ptr{SNESLineSearchShellApplyFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function SNESLineSearchShellSetUserFunc(ls, f, ctx)
    ccall((:SNESLineSearchShellSetUserFunc, $petsc_library), PetscErrorCode, (SNESLineSearch, SNESLineSearchUserFunc, Ptr{Cvoid}), ls, f, ctx)
end

function SNESLineSearchShellGetUserFunc(ls, f, ctx)
    ccall((:SNESLineSearchShellGetUserFunc, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{SNESLineSearchUserFunc}, Ptr{Ptr{Cvoid}}), ls, f, ctx)
end

function SNESLineSearchBTSetAlpha(arg1, arg2)
    ccall((:SNESLineSearchBTSetAlpha, $petsc_library), PetscErrorCode, (SNESLineSearch, PetscReal), arg1, arg2)
end

function SNESLineSearchBTGetAlpha(arg1, arg2)
    ccall((:SNESLineSearchBTGetAlpha, $petsc_library), PetscErrorCode, (SNESLineSearch, Ptr{PetscReal}), arg1, arg2)
end

function SNESLineSearchRegister(arg1, arg2)
    ccall((:SNESLineSearchRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function SNESVISetVariableBounds(arg1, arg2, arg3)
    ccall((:SNESVISetVariableBounds, $petsc_library), PetscErrorCode, (SNES, Vec, Vec), arg1, arg2, arg3)
end

function SNESVIGetVariableBounds(arg1, arg2, arg3)
    ccall((:SNESVIGetVariableBounds, $petsc_library), PetscErrorCode, (SNES, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3)
end

function SNESVISetComputeVariableBounds(arg1, arg2)
    ccall((:SNESVISetComputeVariableBounds, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}), arg1, arg2)
end

function SNESVIGetInactiveSet(arg1, arg2)
    ccall((:SNESVIGetInactiveSet, $petsc_library), PetscErrorCode, (SNES, Ptr{IS}), arg1, arg2)
end

function SNESVIGetActiveSetIS(arg1, arg2, arg3, arg4)
    ccall((:SNESVIGetActiveSetIS, $petsc_library), PetscErrorCode, (SNES, Vec, Vec, Ptr{IS}), arg1, arg2, arg3, arg4)
end

function SNESVIComputeInactiveSetFnorm(arg1, arg2, arg3, arg4)
    ccall((:SNESVIComputeInactiveSetFnorm, $petsc_library), PetscErrorCode, (SNES, Vec, Vec, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function SNESVISetRedundancyCheck(arg1, arg2, arg3)
    ccall((:SNESVISetRedundancyCheck, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function SNESVIComputeMeritFunction(arg1, arg2, arg3)
    ccall((:SNESVIComputeMeritFunction, $petsc_library), PetscErrorCode, (Vec, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function SNESVIComputeFunction(arg1, arg2, arg3, arg4)
    ccall((:SNESVIComputeFunction, $petsc_library), PetscErrorCode, (SNES, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMSetVI(arg1, arg2)
    ccall((:DMSetVI, $petsc_library), PetscErrorCode, (DM, IS), arg1, arg2)
end

function DMDestroyVI(arg1)
    ccall((:DMDestroyVI, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function SNESTestLocalMin(arg1)
    ccall((:SNESTestLocalMin, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESComputeJacobian(arg1, arg2, arg3, arg4)
    ccall((:SNESComputeJacobian, $petsc_library), PetscErrorCode, (SNES, Vec, Mat, Mat), arg1, arg2, arg3, arg4)
end

function SNESTestJacobian(arg1)
    ccall((:SNESTestJacobian, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESTestFunction(arg1)
    ccall((:SNESTestFunction, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function SNESSetDM(arg1, arg2)
    ccall((:SNESSetDM, $petsc_library), PetscErrorCode, (SNES, DM), arg1, arg2)
end

function SNESGetDM(arg1, arg2)
    ccall((:SNESGetDM, $petsc_library), PetscErrorCode, (SNES, Ptr{DM}), arg1, arg2)
end

function SNESSetNPC(arg1, arg2)
    ccall((:SNESSetNPC, $petsc_library), PetscErrorCode, (SNES, SNES), arg1, arg2)
end

function SNESGetNPC(arg1, arg2)
    ccall((:SNESGetNPC, $petsc_library), PetscErrorCode, (SNES, Ptr{SNES}), arg1, arg2)
end

function SNESHasNPC(arg1, arg2)
    ccall((:SNESHasNPC, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESApplyNPC(arg1, arg2, arg3, arg4)
    ccall((:SNESApplyNPC, $petsc_library), PetscErrorCode, (SNES, Vec, Vec, Vec), arg1, arg2, arg3, arg4)
end

function SNESGetNPCFunction(arg1, arg2, arg3)
    ccall((:SNESGetNPCFunction, $petsc_library), PetscErrorCode, (SNES, Vec, Ptr{PetscReal}), arg1, arg2, arg3)
end

function SNESComputeFunctionDefaultNPC(arg1, arg2, arg3)
    ccall((:SNESComputeFunctionDefaultNPC, $petsc_library), PetscErrorCode, (SNES, Vec, Vec), arg1, arg2, arg3)
end

function SNESSetNPCSide(arg1, arg2)
    ccall((:SNESSetNPCSide, $petsc_library), PetscErrorCode, (SNES, PCSide), arg1, arg2)
end

function SNESGetNPCSide(arg1, arg2)
    ccall((:SNESGetNPCSide, $petsc_library), PetscErrorCode, (SNES, Ptr{PCSide}), arg1, arg2)
end

function SNESSetLineSearch(arg1, arg2)
    ccall((:SNESSetLineSearch, $petsc_library), PetscErrorCode, (SNES, SNESLineSearch), arg1, arg2)
end

function SNESGetLineSearch(arg1, arg2)
    ccall((:SNESGetLineSearch, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESLineSearch}), arg1, arg2)
end

function SNESGetSNESLineSearch(snes, ls)
    ccall((:SNESGetSNESLineSearch, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESLineSearch}), snes, ls)
end

function SNESSetSNESLineSearch(snes, ls)
    ccall((:SNESSetSNESLineSearch, $petsc_library), PetscErrorCode, (SNES, SNESLineSearch), snes, ls)
end

function SNESSetUpMatrices(arg1)
    ccall((:SNESSetUpMatrices, $petsc_library), PetscErrorCode, (SNES,), arg1)
end

function DMSNESSetFunction(arg1, arg2, arg3)
    ccall((:DMSNESSetFunction, $petsc_library), PetscErrorCode, (DM, Ptr{SNESFunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMSNESGetFunction(arg1, arg2, arg3)
    ccall((:DMSNESGetFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{SNESFunctionFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMSNESSetFunctionContextDestroy(arg1, arg2)
    ccall((:DMSNESSetFunctionContextDestroy, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMSNESSetMFFunction(arg1, arg2, arg3)
    ccall((:DMSNESSetMFFunction, $petsc_library), PetscErrorCode, (DM, Ptr{SNESFunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMSNESSetNGS(arg1, arg2, arg3)
    ccall((:DMSNESSetNGS, $petsc_library), PetscErrorCode, (DM, Ptr{SNESNGSFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMSNESGetNGS(arg1, arg2, arg3)
    ccall((:DMSNESGetNGS, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{SNESNGSFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMSNESSetJacobian(arg1, arg2, arg3)
    ccall((:DMSNESSetJacobian, $petsc_library), PetscErrorCode, (DM, Ptr{SNESJacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMSNESGetJacobian(arg1, arg2, arg3)
    ccall((:DMSNESGetJacobian, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{SNESJacobianFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMSNESSetJacobianContextDestroy(arg1, arg2)
    ccall((:DMSNESSetJacobianContextDestroy, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMSNESSetPicard(arg1, arg2, arg3, arg4)
    ccall((:DMSNESSetPicard, $petsc_library), PetscErrorCode, (DM, Ptr{SNESFunctionFn}, Ptr{SNESJacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMSNESGetPicard(arg1, arg2, arg3, arg4)
    ccall((:DMSNESGetPicard, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{SNESFunctionFn}}, Ptr{Ptr{SNESJacobianFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function DMSNESSetObjective(arg1, arg2, arg3)
    ccall((:DMSNESSetObjective, $petsc_library), PetscErrorCode, (DM, Ptr{SNESObjectiveFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMSNESGetObjective(arg1, arg2, arg3)
    ccall((:DMSNESGetObjective, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{SNESObjectiveFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMCopyDMSNES(arg1, arg2)
    ccall((:DMCopyDMSNES, $petsc_library), PetscErrorCode, (DM, DM), arg1, arg2)
end

# typedef PetscErrorCode ( DMDASNESFunctionFn ) ( DMDALocalInfo * , void * , void * , void * )
const DMDASNESFunctionFn = Cvoid

# typedef PetscErrorCode ( DMDASNESJacobianFn ) ( DMDALocalInfo * , void * , Mat , Mat , void * )
const DMDASNESJacobianFn = Cvoid

# typedef PetscErrorCode ( DMDASNESObjectiveFn ) ( DMDALocalInfo * , void * , PetscReal * , void * )
const DMDASNESObjectiveFn = Cvoid

# typedef PetscErrorCode ( DMDASNESFunctionVecFn ) ( DMDALocalInfo * , Vec , Vec , void * )
const DMDASNESFunctionVecFn = Cvoid

# typedef PetscErrorCode ( DMDASNESJacobianVecFn ) ( DMDALocalInfo * , Vec , Mat , Mat , void * )
const DMDASNESJacobianVecFn = Cvoid

# typedef PetscErrorCode ( DMDASNESObjectiveVecFn ) ( DMDALocalInfo * , Vec , PetscReal * , void * )
const DMDASNESObjectiveVecFn = Cvoid

function DMDASNESSetFunctionLocal(arg1, arg2, arg3, arg4)
    ccall((:DMDASNESSetFunctionLocal, $petsc_library), PetscErrorCode, (DM, InsertMode, Ptr{DMDASNESFunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMDASNESSetJacobianLocal(arg1, arg2, arg3)
    ccall((:DMDASNESSetJacobianLocal, $petsc_library), PetscErrorCode, (DM, Ptr{DMDASNESJacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDASNESSetObjectiveLocal(arg1, arg2, arg3)
    ccall((:DMDASNESSetObjectiveLocal, $petsc_library), PetscErrorCode, (DM, Ptr{DMDASNESObjectiveFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDASNESSetPicardLocal(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMDASNESSetPicardLocal, $petsc_library), PetscErrorCode, (DM, InsertMode, Ptr{DMDASNESFunctionFn}, DMDASNESJacobianFn, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMDASNESSetFunctionLocalVec(arg1, arg2, arg3, arg4)
    ccall((:DMDASNESSetFunctionLocalVec, $petsc_library), PetscErrorCode, (DM, InsertMode, Ptr{DMDASNESFunctionVecFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMDASNESSetJacobianLocalVec(arg1, arg2, arg3)
    ccall((:DMDASNESSetJacobianLocalVec, $petsc_library), PetscErrorCode, (DM, Ptr{DMDASNESJacobianVecFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDASNESSetObjectiveLocalVec(arg1, arg2, arg3)
    ccall((:DMDASNESSetObjectiveLocalVec, $petsc_library), PetscErrorCode, (DM, Ptr{DMDASNESObjectiveVecFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMSNESSetBoundaryLocal(arg1, arg2, arg3)
    ccall((:DMSNESSetBoundaryLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMSNESSetObjectiveLocal(arg1, arg2, arg3)
    ccall((:DMSNESSetObjectiveLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMSNESSetFunctionLocal(arg1, arg2, arg3)
    ccall((:DMSNESSetFunctionLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMSNESSetJacobianLocal(arg1, arg2, arg3)
    ccall((:DMSNESSetJacobianLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMSNESGetBoundaryLocal(arg1, arg2, arg3)
    ccall((:DMSNESGetBoundaryLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMSNESGetObjectiveLocal(arg1, arg2, arg3)
    ccall((:DMSNESGetObjectiveLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMSNESGetFunctionLocal(arg1, arg2, arg3)
    ccall((:DMSNESGetFunctionLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMSNESGetJacobianLocal(arg1, arg2, arg3)
    ccall((:DMSNESGetJacobianLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function SNESMultiblockSetFields(arg1, arg2, arg3, arg4)
    ccall((:SNESMultiblockSetFields, $petsc_library), PetscErrorCode, (SNES, Ptr{Cchar}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function SNESMultiblockSetIS(arg1, arg2, arg3)
    ccall((:SNESMultiblockSetIS, $petsc_library), PetscErrorCode, (SNES, Ptr{Cchar}, IS), arg1, arg2, arg3)
end

function SNESMultiblockSetBlockSize(arg1, arg2)
    ccall((:SNESMultiblockSetBlockSize, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESMultiblockSetType(arg1, arg2)
    ccall((:SNESMultiblockSetType, $petsc_library), PetscErrorCode, (SNES, PCCompositeType), arg1, arg2)
end

function SNESMultiblockGetSubSNES(arg1, arg2, arg3)
    ccall((:SNESMultiblockGetSubSNES, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}, Ptr{Ptr{SNES}}), arg1, arg2, arg3)
end

const SNESMSType = Ptr{Cchar}

function SNESMSRegister(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:SNESMSRegister, $petsc_library), PetscErrorCode, (SNESMSType, PetscInt, PetscInt, PetscReal, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function SNESMSRegisterAll()
    ccall((:SNESMSRegisterAll, $petsc_library), PetscErrorCode, ())
end

function SNESMSGetType(arg1, arg2)
    ccall((:SNESMSGetType, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESMSType}), arg1, arg2)
end

function SNESMSSetType(arg1, arg2)
    ccall((:SNESMSSetType, $petsc_library), PetscErrorCode, (SNES, SNESMSType), arg1, arg2)
end

function SNESMSGetDamping(arg1, arg2)
    ccall((:SNESMSGetDamping, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscReal}), arg1, arg2)
end

function SNESMSSetDamping(arg1, arg2)
    ccall((:SNESMSSetDamping, $petsc_library), PetscErrorCode, (SNES, PetscReal), arg1, arg2)
end

function SNESMSFinalizePackage()
    ccall((:SNESMSFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function SNESMSInitializePackage()
    ccall((:SNESMSInitializePackage, $petsc_library), PetscErrorCode, ())
end

function SNESMSRegisterDestroy()
    ccall((:SNESMSRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

@enum SNESNGMRESRestartType::UInt32 begin
    SNES_NGMRES_RESTART_NONE = 0
    SNES_NGMRES_RESTART_PERIODIC = 1
    SNES_NGMRES_RESTART_DIFFERENCE = 2
end

@enum SNESNGMRESSelectType::UInt32 begin
    SNES_NGMRES_SELECT_NONE = 0
    SNES_NGMRES_SELECT_DIFFERENCE = 1
    SNES_NGMRES_SELECT_LINESEARCH = 2
end

function SNESNGMRESSetRestartType(arg1, arg2)
    ccall((:SNESNGMRESSetRestartType, $petsc_library), PetscErrorCode, (SNES, SNESNGMRESRestartType), arg1, arg2)
end

function SNESNGMRESSetSelectType(arg1, arg2)
    ccall((:SNESNGMRESSetSelectType, $petsc_library), PetscErrorCode, (SNES, SNESNGMRESSelectType), arg1, arg2)
end

function SNESNGMRESSetRestartFmRise(arg1, arg2)
    ccall((:SNESNGMRESSetRestartFmRise, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESNGMRESGetRestartFmRise(arg1, arg2)
    ccall((:SNESNGMRESGetRestartFmRise, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

@enum SNESNCGType::UInt32 begin
    SNES_NCG_FR = 0
    SNES_NCG_PRP = 1
    SNES_NCG_HS = 2
    SNES_NCG_DY = 3
    SNES_NCG_CD = 4
end

function SNESNCGSetType(arg1, arg2)
    ccall((:SNESNCGSetType, $petsc_library), PetscErrorCode, (SNES, SNESNCGType), arg1, arg2)
end

@enum SNESQNScaleType::UInt32 begin
    SNES_QN_SCALE_DEFAULT = 0
    SNES_QN_SCALE_NONE = 1
    SNES_QN_SCALE_SCALAR = 2
    SNES_QN_SCALE_DIAGONAL = 3
    SNES_QN_SCALE_JACOBIAN = 4
end

@enum SNESQNRestartType::UInt32 begin
    SNES_QN_RESTART_DEFAULT = 0
    SNES_QN_RESTART_NONE = 1
    SNES_QN_RESTART_POWELL = 2
    SNES_QN_RESTART_PERIODIC = 3
end

@enum SNESQNType::UInt32 begin
    SNES_QN_LBFGS = 0
    SNES_QN_BROYDEN = 1
    SNES_QN_BADBROYDEN = 2
end

function SNESQNSetType(arg1, arg2)
    ccall((:SNESQNSetType, $petsc_library), PetscErrorCode, (SNES, SNESQNType), arg1, arg2)
end

function SNESQNSetScaleType(arg1, arg2)
    ccall((:SNESQNSetScaleType, $petsc_library), PetscErrorCode, (SNES, SNESQNScaleType), arg1, arg2)
end

function SNESQNSetRestartType(arg1, arg2)
    ccall((:SNESQNSetRestartType, $petsc_library), PetscErrorCode, (SNES, SNESQNRestartType), arg1, arg2)
end

function SNESNASMGetType(arg1, arg2)
    ccall((:SNESNASMGetType, $petsc_library), PetscErrorCode, (SNES, Ptr{PCASMType}), arg1, arg2)
end

function SNESNASMSetType(arg1, arg2)
    ccall((:SNESNASMSetType, $petsc_library), PetscErrorCode, (SNES, PCASMType), arg1, arg2)
end

function SNESNASMGetSubdomains(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESNASMGetSubdomains, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}, Ptr{Ptr{SNES}}, Ptr{Ptr{VecScatter}}, Ptr{Ptr{VecScatter}}, Ptr{Ptr{VecScatter}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESNASMSetSubdomains(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESNASMSetSubdomains, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{SNES}, Ptr{VecScatter}, Ptr{VecScatter}, Ptr{VecScatter}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESNASMSetDamping(arg1, arg2)
    ccall((:SNESNASMSetDamping, $petsc_library), PetscErrorCode, (SNES, PetscReal), arg1, arg2)
end

function SNESNASMGetDamping(arg1, arg2)
    ccall((:SNESNASMGetDamping, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscReal}), arg1, arg2)
end

function SNESNASMGetSubdomainVecs(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:SNESNASMGetSubdomainVecs, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}, Ptr{Ptr{Vec}}, Ptr{Ptr{Vec}}, Ptr{Ptr{Vec}}, Ptr{Ptr{Vec}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function SNESNASMSetComputeFinalJacobian(arg1, arg2)
    ccall((:SNESNASMSetComputeFinalJacobian, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESNASMGetSNES(arg1, arg2, arg3)
    ccall((:SNESNASMGetSNES, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{SNES}), arg1, arg2, arg3)
end

function SNESNASMGetNumber(arg1, arg2)
    ccall((:SNESNASMGetNumber, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESNASMSetWeight(arg1, arg2)
    ccall((:SNESNASMSetWeight, $petsc_library), PetscErrorCode, (SNES, Vec), arg1, arg2)
end

@enum SNESCompositeType::UInt32 begin
    SNES_COMPOSITE_ADDITIVE = 0
    SNES_COMPOSITE_MULTIPLICATIVE = 1
    SNES_COMPOSITE_ADDITIVEOPTIMAL = 2
end

function SNESCompositeSetType(arg1, arg2)
    ccall((:SNESCompositeSetType, $petsc_library), PetscErrorCode, (SNES, SNESCompositeType), arg1, arg2)
end

function SNESCompositeAddSNES(arg1, arg2)
    ccall((:SNESCompositeAddSNES, $petsc_library), PetscErrorCode, (SNES, SNESType), arg1, arg2)
end

function SNESCompositeGetSNES(arg1, arg2, arg3)
    ccall((:SNESCompositeGetSNES, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{SNES}), arg1, arg2, arg3)
end

function SNESCompositeGetNumber(arg1, arg2)
    ccall((:SNESCompositeGetNumber, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESCompositeSetDamping(arg1, arg2, arg3)
    ccall((:SNESCompositeSetDamping, $petsc_library), PetscErrorCode, (SNES, PetscInt, PetscReal), arg1, arg2, arg3)
end

function SNESPatchSetDiscretisationInfo(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:SNESPatchSetDiscretisationInfo, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{DM}, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}, PetscInt, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function SNESPatchSetComputeOperator(arg1, func, arg3)
    ccall((:SNESPatchSetComputeOperator, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}), arg1, func, arg3)
end

function SNESPatchSetComputeFunction(arg1, func, arg3)
    ccall((:SNESPatchSetComputeFunction, $petsc_library), PetscErrorCode, (SNES, Ptr{Cvoid}, Ptr{Cvoid}), arg1, func, arg3)
end

function SNESPatchSetConstructType(arg1, arg2, func, arg4)
    ccall((:SNESPatchSetConstructType, $petsc_library), PetscErrorCode, (SNES, PCPatchConstructType, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, func, arg4)
end

function SNESPatchSetCellNumbering(arg1, arg2)
    ccall((:SNESPatchSetCellNumbering, $petsc_library), PetscErrorCode, (SNES, PetscSection), arg1, arg2)
end

@enum SNESFASType::UInt32 begin
    SNES_FAS_MULTIPLICATIVE = 0
    SNES_FAS_ADDITIVE = 1
    SNES_FAS_FULL = 2
    SNES_FAS_KASKADE = 3
end

function SNESFASSetType(arg1, arg2)
    ccall((:SNESFASSetType, $petsc_library), PetscErrorCode, (SNES, SNESFASType), arg1, arg2)
end

function SNESFASGetType(arg1, arg2)
    ccall((:SNESFASGetType, $petsc_library), PetscErrorCode, (SNES, Ptr{SNESFASType}), arg1, arg2)
end

function SNESFASSetLevels(arg1, arg2, arg3)
    ccall((:SNESFASSetLevels, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{MPI_Comm}), arg1, arg2, arg3)
end

function SNESFASGetLevels(arg1, arg2)
    ccall((:SNESFASGetLevels, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscInt}), arg1, arg2)
end

function SNESFASGetCycleSNES(arg1, arg2, arg3)
    ccall((:SNESFASGetCycleSNES, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{SNES}), arg1, arg2, arg3)
end

function SNESFASSetNumberSmoothUp(arg1, arg2)
    ccall((:SNESFASSetNumberSmoothUp, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESFASSetNumberSmoothDown(arg1, arg2)
    ccall((:SNESFASSetNumberSmoothDown, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESFASSetCycles(arg1, arg2)
    ccall((:SNESFASSetCycles, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESFASSetMonitor(arg1, arg2, arg3)
    ccall((:SNESFASSetMonitor, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscViewerAndFormat}, PetscBool), arg1, arg2, arg3)
end

function SNESFASSetLog(arg1, arg2)
    ccall((:SNESFASSetLog, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESFASSetGalerkin(arg1, arg2)
    ccall((:SNESFASSetGalerkin, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESFASGetGalerkin(arg1, arg2)
    ccall((:SNESFASGetGalerkin, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESFASGalerkinFunctionDefault(arg1, arg2, arg3, arg4)
    ccall((:SNESFASGalerkinFunctionDefault, $petsc_library), PetscErrorCode, (SNES, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function SNESFASCycleGetSmoother(arg1, arg2)
    ccall((:SNESFASCycleGetSmoother, $petsc_library), PetscErrorCode, (SNES, Ptr{SNES}), arg1, arg2)
end

function SNESFASCycleGetSmootherUp(arg1, arg2)
    ccall((:SNESFASCycleGetSmootherUp, $petsc_library), PetscErrorCode, (SNES, Ptr{SNES}), arg1, arg2)
end

function SNESFASCycleGetSmootherDown(arg1, arg2)
    ccall((:SNESFASCycleGetSmootherDown, $petsc_library), PetscErrorCode, (SNES, Ptr{SNES}), arg1, arg2)
end

function SNESFASCycleGetCorrection(arg1, arg2)
    ccall((:SNESFASCycleGetCorrection, $petsc_library), PetscErrorCode, (SNES, Ptr{SNES}), arg1, arg2)
end

function SNESFASCycleGetInterpolation(arg1, arg2)
    ccall((:SNESFASCycleGetInterpolation, $petsc_library), PetscErrorCode, (SNES, Ptr{Mat}), arg1, arg2)
end

function SNESFASCycleGetRestriction(arg1, arg2)
    ccall((:SNESFASCycleGetRestriction, $petsc_library), PetscErrorCode, (SNES, Ptr{Mat}), arg1, arg2)
end

function SNESFASCycleGetInjection(arg1, arg2)
    ccall((:SNESFASCycleGetInjection, $petsc_library), PetscErrorCode, (SNES, Ptr{Mat}), arg1, arg2)
end

function SNESFASCycleGetRScale(arg1, arg2)
    ccall((:SNESFASCycleGetRScale, $petsc_library), PetscErrorCode, (SNES, Ptr{Vec}), arg1, arg2)
end

function SNESFASCycleSetCycles(arg1, arg2)
    ccall((:SNESFASCycleSetCycles, $petsc_library), PetscErrorCode, (SNES, PetscInt), arg1, arg2)
end

function SNESFASCycleIsFine(arg1, arg2)
    ccall((:SNESFASCycleIsFine, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function SNESFASSetInterpolation(arg1, arg2, arg3)
    ccall((:SNESFASSetInterpolation, $petsc_library), PetscErrorCode, (SNES, PetscInt, Mat), arg1, arg2, arg3)
end

function SNESFASGetInterpolation(arg1, arg2, arg3)
    ccall((:SNESFASGetInterpolation, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{Mat}), arg1, arg2, arg3)
end

function SNESFASSetRestriction(arg1, arg2, arg3)
    ccall((:SNESFASSetRestriction, $petsc_library), PetscErrorCode, (SNES, PetscInt, Mat), arg1, arg2, arg3)
end

function SNESFASGetRestriction(arg1, arg2, arg3)
    ccall((:SNESFASGetRestriction, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{Mat}), arg1, arg2, arg3)
end

function SNESFASSetInjection(arg1, arg2, arg3)
    ccall((:SNESFASSetInjection, $petsc_library), PetscErrorCode, (SNES, PetscInt, Mat), arg1, arg2, arg3)
end

function SNESFASGetInjection(arg1, arg2, arg3)
    ccall((:SNESFASGetInjection, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{Mat}), arg1, arg2, arg3)
end

function SNESFASSetRScale(arg1, arg2, arg3)
    ccall((:SNESFASSetRScale, $petsc_library), PetscErrorCode, (SNES, PetscInt, Vec), arg1, arg2, arg3)
end

function SNESFASGetRScale(arg1, arg2, arg3)
    ccall((:SNESFASGetRScale, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function SNESFASSetContinuation(arg1, arg2)
    ccall((:SNESFASSetContinuation, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESFASGetSmoother(arg1, arg2, arg3)
    ccall((:SNESFASGetSmoother, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{SNES}), arg1, arg2, arg3)
end

function SNESFASGetSmootherUp(arg1, arg2, arg3)
    ccall((:SNESFASGetSmootherUp, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{SNES}), arg1, arg2, arg3)
end

function SNESFASGetSmootherDown(arg1, arg2, arg3)
    ccall((:SNESFASGetSmootherDown, $petsc_library), PetscErrorCode, (SNES, PetscInt, Ptr{SNES}), arg1, arg2, arg3)
end

function SNESFASGetCoarseSolve(arg1, arg2)
    ccall((:SNESFASGetCoarseSolve, $petsc_library), PetscErrorCode, (SNES, Ptr{SNES}), arg1, arg2)
end

function SNESFASFullSetDownSweep(arg1, arg2)
    ccall((:SNESFASFullSetDownSweep, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESFASCreateCoarseVec(arg1, arg2)
    ccall((:SNESFASCreateCoarseVec, $petsc_library), PetscErrorCode, (SNES, Ptr{Vec}), arg1, arg2)
end

function SNESFASRestrict(arg1, arg2, arg3)
    ccall((:SNESFASRestrict, $petsc_library), PetscErrorCode, (SNES, Vec, Vec), arg1, arg2, arg3)
end

function SNESFASFullSetTotal(arg1, arg2)
    ccall((:SNESFASFullSetTotal, $petsc_library), PetscErrorCode, (SNES, PetscBool), arg1, arg2)
end

function SNESFASFullGetTotal(arg1, arg2)
    ccall((:SNESFASFullGetTotal, $petsc_library), PetscErrorCode, (SNES, Ptr{PetscBool}), arg1, arg2)
end

function DMSNESCheckDiscretization(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMSNESCheckDiscretization, $petsc_library), PetscErrorCode, (SNES, DM, PetscReal, Vec, PetscReal, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMSNESCheckResidual(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMSNESCheckResidual, $petsc_library), PetscErrorCode, (SNES, DM, Vec, PetscReal, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function DMSNESCheckJacobian(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:DMSNESCheckJacobian, $petsc_library), PetscErrorCode, (SNES, DM, Vec, PetscReal, Ptr{PetscBool}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function DMSNESCheckFromOptions(arg1, arg2)
    ccall((:DMSNESCheckFromOptions, $petsc_library), PetscErrorCode, (SNES, Vec), arg1, arg2)
end

function DMSNESComputeJacobianAction(arg1, arg2, arg3, arg4, arg5)
    ccall((:DMSNESComputeJacobianAction, $petsc_library), PetscErrorCode, (DM, Vec, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function DMSNESCreateJacobianMF(arg1, arg2, arg3, arg4)
    ccall((:DMSNESCreateJacobianMF, $petsc_library), PetscErrorCode, (DM, Vec, Ptr{Cvoid}, Ptr{Mat}), arg1, arg2, arg3, arg4)
end

mutable struct _p_PetscConvEst end

const PetscConvEst = Ptr{_p_PetscConvEst}

function PetscConvEstCreate(arg1, arg2)
    ccall((:PetscConvEstCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{PetscConvEst}), arg1, arg2)
end

function PetscConvEstDestroy(arg1)
    ccall((:PetscConvEstDestroy, $petsc_library), PetscErrorCode, (Ptr{PetscConvEst},), arg1)
end

function PetscConvEstView(arg1, arg2)
    ccall((:PetscConvEstView, $petsc_library), PetscErrorCode, (PetscConvEst, PetscViewer), arg1, arg2)
end

function PetscConvEstSetFromOptions(arg1)
    ccall((:PetscConvEstSetFromOptions, $petsc_library), PetscErrorCode, (PetscConvEst,), arg1)
end

function PetscConvEstGetSolver(arg1, arg2)
    ccall((:PetscConvEstGetSolver, $petsc_library), PetscErrorCode, (PetscConvEst, Ptr{PetscObject}), arg1, arg2)
end

function PetscConvEstSetSolver(arg1, arg2)
    ccall((:PetscConvEstSetSolver, $petsc_library), PetscErrorCode, (PetscConvEst, PetscObject), arg1, arg2)
end

function PetscConvEstSetUp(arg1)
    ccall((:PetscConvEstSetUp, $petsc_library), PetscErrorCode, (PetscConvEst,), arg1)
end

function PetscConvEstComputeInitialGuess(arg1, arg2, arg3, arg4)
    ccall((:PetscConvEstComputeInitialGuess, $petsc_library), PetscErrorCode, (PetscConvEst, PetscInt, DM, Vec), arg1, arg2, arg3, arg4)
end

function PetscConvEstComputeError(arg1, arg2, arg3, arg4, arg5)
    ccall((:PetscConvEstComputeError, $petsc_library), PetscErrorCode, (PetscConvEst, PetscInt, DM, Vec, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function PetscConvEstGetConvRate(arg1, arg2)
    ccall((:PetscConvEstGetConvRate, $petsc_library), PetscErrorCode, (PetscConvEst, Ptr{PetscReal}), arg1, arg2)
end

function PetscConvEstMonitorDefault(arg1, arg2)
    ccall((:PetscConvEstMonitorDefault, $petsc_library), PetscErrorCode, (PetscConvEst, PetscInt), arg1, arg2)
end

function PetscConvEstRateView(arg1, arg2, arg3)
    ccall((:PetscConvEstRateView, $petsc_library), PetscErrorCode, (PetscConvEst, Ptr{PetscReal}, PetscViewer), arg1, arg2, arg3)
end

mutable struct _p_TS end

const TS = Ptr{_p_TS}

const TSType = Ptr{Cchar}

@enum TSProblemType::UInt32 begin
    TS_LINEAR = 0
    TS_NONLINEAR = 1
end

@enum TSEquationType::Int32 begin
    TS_EQ_UNSPECIFIED = -1
    TS_EQ_EXPLICIT = 0
    TS_EQ_ODE_EXPLICIT = 1
    TS_EQ_DAE_SEMI_EXPLICIT_INDEX1 = 100
    TS_EQ_DAE_SEMI_EXPLICIT_INDEX2 = 200
    TS_EQ_DAE_SEMI_EXPLICIT_INDEX3 = 300
    TS_EQ_DAE_SEMI_EXPLICIT_INDEXHI = 500
    TS_EQ_IMPLICIT = 1000
    TS_EQ_ODE_IMPLICIT = 1001
    TS_EQ_DAE_IMPLICIT_INDEX1 = 1100
    TS_EQ_DAE_IMPLICIT_INDEX2 = 1200
    TS_EQ_DAE_IMPLICIT_INDEX3 = 1300
    TS_EQ_DAE_IMPLICIT_INDEXHI = 1500
end

@enum TSConvergedReason::Int32 begin
    TS_CONVERGED_ITERATING = 0
    TS_CONVERGED_TIME = 1
    TS_CONVERGED_ITS = 2
    TS_CONVERGED_USER = 3
    TS_CONVERGED_EVENT = 4
    TS_CONVERGED_PSEUDO_FATOL = 5
    TS_CONVERGED_PSEUDO_FRTOL = 6
    TS_DIVERGED_NONLINEAR_SOLVE = -1
    TS_DIVERGED_STEP_REJECTED = -2
    TSFORWARD_DIVERGED_LINEAR_SOLVE = -3
    TSADJOINT_DIVERGED_LINEAR_SOLVE = -4
end

@enum TSExactFinalTimeOption::UInt32 begin
    TS_EXACTFINALTIME_UNSPECIFIED = 0
    TS_EXACTFINALTIME_STEPOVER = 1
    TS_EXACTFINALTIME_INTERPOLATE = 2
    TS_EXACTFINALTIME_MATCHSTEP = 3
end

function TSInitializePackage()
    ccall((:TSInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSFinalizePackage()
    ccall((:TSFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSCreate(arg1, arg2)
    ccall((:TSCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{TS}), arg1, arg2)
end

function TSClone(arg1, arg2)
    ccall((:TSClone, $petsc_library), PetscErrorCode, (TS, Ptr{TS}), arg1, arg2)
end

function TSDestroy(arg1)
    ccall((:TSDestroy, $petsc_library), PetscErrorCode, (Ptr{TS},), arg1)
end

function TSSetProblemType(arg1, arg2)
    ccall((:TSSetProblemType, $petsc_library), PetscErrorCode, (TS, TSProblemType), arg1, arg2)
end

function TSGetProblemType(arg1, arg2)
    ccall((:TSGetProblemType, $petsc_library), PetscErrorCode, (TS, Ptr{TSProblemType}), arg1, arg2)
end

function TSMonitor(arg1, arg2, arg3, arg4)
    ccall((:TSMonitor, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec), arg1, arg2, arg3, arg4)
end

function TSMonitorSet(arg1, arg2, arg3, arg4)
    ccall((:TSMonitorSet, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSMonitorSetFromOptions(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSMonitorSetFromOptions, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSMonitorCancel(arg1)
    ccall((:TSMonitorCancel, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSSetOptionsPrefix(arg1, arg2)
    ccall((:TSSetOptionsPrefix, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}), arg1, arg2)
end

function TSAppendOptionsPrefix(arg1, arg2)
    ccall((:TSAppendOptionsPrefix, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}), arg1, arg2)
end

function TSGetOptionsPrefix(arg1, arg2)
    ccall((:TSGetOptionsPrefix, $petsc_library), PetscErrorCode, (TS, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function TSSetFromOptions(arg1)
    ccall((:TSSetFromOptions, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSSetUp(arg1)
    ccall((:TSSetUp, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSReset(arg1)
    ccall((:TSReset, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSSetSolution(arg1, arg2)
    ccall((:TSSetSolution, $petsc_library), PetscErrorCode, (TS, Vec), arg1, arg2)
end

function TSGetSolution(arg1, arg2)
    ccall((:TSGetSolution, $petsc_library), PetscErrorCode, (TS, Ptr{Vec}), arg1, arg2)
end

function TS2SetSolution(arg1, arg2, arg3)
    ccall((:TS2SetSolution, $petsc_library), PetscErrorCode, (TS, Vec, Vec), arg1, arg2, arg3)
end

function TS2GetSolution(arg1, arg2, arg3)
    ccall((:TS2GetSolution, $petsc_library), PetscErrorCode, (TS, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3)
end

function TSGetSolutionComponents(arg1, arg2, arg3)
    ccall((:TSGetSolutionComponents, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Vec}), arg1, arg2, arg3)
end

function TSGetAuxSolution(arg1, arg2)
    ccall((:TSGetAuxSolution, $petsc_library), PetscErrorCode, (TS, Ptr{Vec}), arg1, arg2)
end

function TSGetTimeError(arg1, arg2, arg3)
    ccall((:TSGetTimeError, $petsc_library), PetscErrorCode, (TS, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function TSSetTimeError(arg1, arg2)
    ccall((:TSSetTimeError, $petsc_library), PetscErrorCode, (TS, Vec), arg1, arg2)
end

function TSSetRHSJacobianP(arg1, arg2, arg3, arg4)
    ccall((:TSSetRHSJacobianP, $petsc_library), PetscErrorCode, (TS, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSGetRHSJacobianP(arg1, arg2, arg3, arg4)
    ccall((:TSGetRHSJacobianP, $petsc_library), PetscErrorCode, (TS, Ptr{Mat}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function TSComputeRHSJacobianP(arg1, arg2, arg3, arg4)
    ccall((:TSComputeRHSJacobianP, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Mat), arg1, arg2, arg3, arg4)
end

function TSSetIJacobianP(arg1, arg2, arg3, arg4)
    ccall((:TSSetIJacobianP, $petsc_library), PetscErrorCode, (TS, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSComputeIJacobianP(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:TSComputeIJacobianP, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Vec, PetscReal, Mat, PetscBool), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function TSComputeDRDPFunction(arg1, arg2, arg3, arg4)
    ccall((:TSComputeDRDPFunction, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function TSComputeDRDUFunction(arg1, arg2, arg3, arg4)
    ccall((:TSComputeDRDUFunction, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function TSSetIHessianProduct(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:TSSetIHessianProduct, $petsc_library), PetscErrorCode, (TS, Ptr{Vec}, Ptr{Cvoid}, Ptr{Vec}, Ptr{Cvoid}, Ptr{Vec}, Ptr{Cvoid}, Ptr{Vec}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function TSComputeIHessianProductFunctionUU(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeIHessianProductFunctionUU, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSComputeIHessianProductFunctionUP(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeIHessianProductFunctionUP, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSComputeIHessianProductFunctionPU(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeIHessianProductFunctionPU, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSComputeIHessianProductFunctionPP(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeIHessianProductFunctionPP, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSSetRHSHessianProduct(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
    ccall((:TSSetRHSHessianProduct, $petsc_library), PetscErrorCode, (TS, Ptr{Vec}, Ptr{Cvoid}, Ptr{Vec}, Ptr{Cvoid}, Ptr{Vec}, Ptr{Cvoid}, Ptr{Vec}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
end

function TSComputeRHSHessianProductFunctionUU(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeRHSHessianProductFunctionUU, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSComputeRHSHessianProductFunctionUP(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeRHSHessianProductFunctionUP, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSComputeRHSHessianProductFunctionPU(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeRHSHessianProductFunctionPU, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSComputeRHSHessianProductFunctionPP(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeRHSHessianProductFunctionPP, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSSetCostHessianProducts(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSSetCostHessianProducts, $petsc_library), PetscErrorCode, (TS, PetscInt, Ptr{Vec}, Ptr{Vec}, Vec), arg1, arg2, arg3, arg4, arg5)
end

function TSGetCostHessianProducts(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSGetCostHessianProducts, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Ptr{Vec}}, Ptr{Ptr{Vec}}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function TSComputeSNESJacobian(arg1, arg2, arg3, arg4)
    ccall((:TSComputeSNESJacobian, $petsc_library), PetscErrorCode, (TS, Vec, Mat, Mat), arg1, arg2, arg3, arg4)
end

mutable struct _p_TSTrajectory end

const TSTrajectory = Ptr{_p_TSTrajectory}

const TSTrajectoryType = Ptr{Cchar}

function TSSetSaveTrajectory(arg1)
    ccall((:TSSetSaveTrajectory, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSResetTrajectory(arg1)
    ccall((:TSResetTrajectory, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSRemoveTrajectory(arg1)
    ccall((:TSRemoveTrajectory, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSTrajectoryCreate(arg1, arg2)
    ccall((:TSTrajectoryCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{TSTrajectory}), arg1, arg2)
end

function TSTrajectoryReset(arg1)
    ccall((:TSTrajectoryReset, $petsc_library), PetscErrorCode, (TSTrajectory,), arg1)
end

function TSTrajectoryDestroy(arg1)
    ccall((:TSTrajectoryDestroy, $petsc_library), PetscErrorCode, (Ptr{TSTrajectory},), arg1)
end

function TSTrajectoryView(arg1, arg2)
    ccall((:TSTrajectoryView, $petsc_library), PetscErrorCode, (TSTrajectory, PetscViewer), arg1, arg2)
end

function TSTrajectorySetType(arg1, arg2, arg3)
    ccall((:TSTrajectorySetType, $petsc_library), PetscErrorCode, (TSTrajectory, TS, TSTrajectoryType), arg1, arg2, arg3)
end

function TSTrajectoryGetType(arg1, arg2, arg3)
    ccall((:TSTrajectoryGetType, $petsc_library), PetscErrorCode, (TSTrajectory, TS, Ptr{TSTrajectoryType}), arg1, arg2, arg3)
end

function TSTrajectorySet(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSTrajectorySet, $petsc_library), PetscErrorCode, (TSTrajectory, TS, PetscInt, PetscReal, Vec), arg1, arg2, arg3, arg4, arg5)
end

function TSTrajectoryGet(arg1, arg2, arg3, arg4)
    ccall((:TSTrajectoryGet, $petsc_library), PetscErrorCode, (TSTrajectory, TS, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function TSTrajectoryGetVecs(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSTrajectoryGetVecs, $petsc_library), PetscErrorCode, (TSTrajectory, TS, PetscInt, Ptr{PetscReal}, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSTrajectoryGetUpdatedHistoryVecs(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSTrajectoryGetUpdatedHistoryVecs, $petsc_library), PetscErrorCode, (TSTrajectory, TS, PetscReal, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function TSTrajectoryGetNumSteps(arg1, arg2)
    ccall((:TSTrajectoryGetNumSteps, $petsc_library), PetscErrorCode, (TSTrajectory, Ptr{PetscInt}), arg1, arg2)
end

function TSTrajectoryRestoreUpdatedHistoryVecs(arg1, arg2, arg3)
    ccall((:TSTrajectoryRestoreUpdatedHistoryVecs, $petsc_library), PetscErrorCode, (TSTrajectory, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3)
end

function TSTrajectorySetFromOptions(arg1, arg2)
    ccall((:TSTrajectorySetFromOptions, $petsc_library), PetscErrorCode, (TSTrajectory, TS), arg1, arg2)
end

function TSTrajectoryRegister(arg1, arg2)
    ccall((:TSTrajectoryRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function TSTrajectoryRegisterAll()
    ccall((:TSTrajectoryRegisterAll, $petsc_library), PetscErrorCode, ())
end

function TSTrajectorySetUp(arg1, arg2)
    ccall((:TSTrajectorySetUp, $petsc_library), PetscErrorCode, (TSTrajectory, TS), arg1, arg2)
end

function TSTrajectorySetUseHistory(arg1, arg2)
    ccall((:TSTrajectorySetUseHistory, $petsc_library), PetscErrorCode, (TSTrajectory, PetscBool), arg1, arg2)
end

function TSTrajectorySetMonitor(arg1, arg2)
    ccall((:TSTrajectorySetMonitor, $petsc_library), PetscErrorCode, (TSTrajectory, PetscBool), arg1, arg2)
end

function TSTrajectorySetVariableNames(arg1, arg2)
    ccall((:TSTrajectorySetVariableNames, $petsc_library), PetscErrorCode, (TSTrajectory, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function TSTrajectorySetTransform(arg1, arg2, arg3, arg4)
    ccall((:TSTrajectorySetTransform, $petsc_library), PetscErrorCode, (TSTrajectory, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSTrajectorySetSolutionOnly(arg1, arg2)
    ccall((:TSTrajectorySetSolutionOnly, $petsc_library), PetscErrorCode, (TSTrajectory, PetscBool), arg1, arg2)
end

function TSTrajectoryGetSolutionOnly(arg1, arg2)
    ccall((:TSTrajectoryGetSolutionOnly, $petsc_library), PetscErrorCode, (TSTrajectory, Ptr{PetscBool}), arg1, arg2)
end

function TSTrajectorySetKeepFiles(arg1, arg2)
    ccall((:TSTrajectorySetKeepFiles, $petsc_library), PetscErrorCode, (TSTrajectory, PetscBool), arg1, arg2)
end

function TSTrajectorySetDirname(arg1, arg2)
    ccall((:TSTrajectorySetDirname, $petsc_library), PetscErrorCode, (TSTrajectory, Ptr{Cchar}), arg1, arg2)
end

function TSTrajectorySetFiletemplate(arg1, arg2)
    ccall((:TSTrajectorySetFiletemplate, $petsc_library), PetscErrorCode, (TSTrajectory, Ptr{Cchar}), arg1, arg2)
end

function TSGetTrajectory(arg1, arg2)
    ccall((:TSGetTrajectory, $petsc_library), PetscErrorCode, (TS, Ptr{TSTrajectory}), arg1, arg2)
end

@enum TSTrajectoryMemoryType::UInt32 begin
    TJ_REVOLVE = 0
    TJ_CAMS = 1
    TJ_PETSC = 2
end

function TSTrajectoryMemorySetType(arg1, arg2)
    ccall((:TSTrajectoryMemorySetType, $petsc_library), PetscErrorCode, (TSTrajectory, TSTrajectoryMemoryType), arg1, arg2)
end

function TSTrajectorySetMaxCpsRAM(arg1, arg2)
    ccall((:TSTrajectorySetMaxCpsRAM, $petsc_library), PetscErrorCode, (TSTrajectory, PetscInt), arg1, arg2)
end

function TSTrajectorySetMaxCpsDisk(arg1, arg2)
    ccall((:TSTrajectorySetMaxCpsDisk, $petsc_library), PetscErrorCode, (TSTrajectory, PetscInt), arg1, arg2)
end

function TSTrajectorySetMaxUnitsRAM(arg1, arg2)
    ccall((:TSTrajectorySetMaxUnitsRAM, $petsc_library), PetscErrorCode, (TSTrajectory, PetscInt), arg1, arg2)
end

function TSTrajectorySetMaxUnitsDisk(arg1, arg2)
    ccall((:TSTrajectorySetMaxUnitsDisk, $petsc_library), PetscErrorCode, (TSTrajectory, PetscInt), arg1, arg2)
end

function TSSetCostGradients(arg1, arg2, arg3, arg4)
    ccall((:TSSetCostGradients, $petsc_library), PetscErrorCode, (TS, PetscInt, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function TSGetCostGradients(arg1, arg2, arg3, arg4)
    ccall((:TSGetCostGradients, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Ptr{Vec}}, Ptr{Ptr{Vec}}), arg1, arg2, arg3, arg4)
end

function TSSetCostIntegrand(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:TSSetCostIntegrand, $petsc_library), PetscErrorCode, (TS, PetscInt, Vec, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, PetscBool, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function TSGetCostIntegral(arg1, arg2)
    ccall((:TSGetCostIntegral, $petsc_library), PetscErrorCode, (TS, Ptr{Vec}), arg1, arg2)
end

function TSComputeCostIntegrand(arg1, arg2, arg3, arg4)
    ccall((:TSComputeCostIntegrand, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Vec), arg1, arg2, arg3, arg4)
end

function TSCreateQuadratureTS(arg1, arg2, arg3)
    ccall((:TSCreateQuadratureTS, $petsc_library), PetscErrorCode, (TS, PetscBool, Ptr{TS}), arg1, arg2, arg3)
end

function TSGetQuadratureTS(arg1, arg2, arg3)
    ccall((:TSGetQuadratureTS, $petsc_library), PetscErrorCode, (TS, Ptr{PetscBool}, Ptr{TS}), arg1, arg2, arg3)
end

function TSAdjointMonitor(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:TSAdjointMonitor, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, PetscInt, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function TSAdjointMonitorSet(arg1, arg2, arg3, arg4)
    ccall((:TSAdjointMonitorSet, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSAdjointMonitorCancel(arg1)
    ccall((:TSAdjointMonitorCancel, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSAdjointMonitorSetFromOptions(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSAdjointMonitorSetFromOptions, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSAdjointSetRHSJacobian(arg1, arg2, arg3, arg4)
    ccall((:TSAdjointSetRHSJacobian, $petsc_library), PetscErrorCode, (TS, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSAdjointComputeRHSJacobian(arg1, arg2, arg3, arg4)
    ccall((:TSAdjointComputeRHSJacobian, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Mat), arg1, arg2, arg3, arg4)
end

function TSAdjointComputeDRDPFunction(arg1, arg2, arg3, arg4)
    ccall((:TSAdjointComputeDRDPFunction, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function TSAdjointComputeDRDYFunction(arg1, arg2, arg3, arg4)
    ccall((:TSAdjointComputeDRDYFunction, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function TSAdjointSolve(arg1)
    ccall((:TSAdjointSolve, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSAdjointSetSteps(arg1, arg2)
    ccall((:TSAdjointSetSteps, $petsc_library), PetscErrorCode, (TS, PetscInt), arg1, arg2)
end

function TSAdjointStep(arg1)
    ccall((:TSAdjointStep, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSAdjointSetUp(arg1)
    ccall((:TSAdjointSetUp, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSAdjointReset(arg1)
    ccall((:TSAdjointReset, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSAdjointCostIntegral(arg1)
    ccall((:TSAdjointCostIntegral, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSAdjointSetForward(arg1, arg2)
    ccall((:TSAdjointSetForward, $petsc_library), PetscErrorCode, (TS, Mat), arg1, arg2)
end

function TSAdjointResetForward(arg1)
    ccall((:TSAdjointResetForward, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSForwardSetSensitivities(arg1, arg2, arg3)
    ccall((:TSForwardSetSensitivities, $petsc_library), PetscErrorCode, (TS, PetscInt, Mat), arg1, arg2, arg3)
end

function TSForwardGetSensitivities(arg1, arg2, arg3)
    ccall((:TSForwardGetSensitivities, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Mat}), arg1, arg2, arg3)
end

function TSForwardSetIntegralGradients(arg1, arg2, arg3)
    ccall((:TSForwardSetIntegralGradients, $petsc_library), PetscErrorCode, (TS, PetscInt, Ptr{Vec}), arg1, arg2, arg3)
end

function TSForwardGetIntegralGradients(arg1, arg2, arg3)
    ccall((:TSForwardGetIntegralGradients, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Ptr{Vec}}), arg1, arg2, arg3)
end

function TSForwardSetUp(arg1)
    ccall((:TSForwardSetUp, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSForwardReset(arg1)
    ccall((:TSForwardReset, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSForwardCostIntegral(arg1)
    ccall((:TSForwardCostIntegral, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSForwardStep(arg1)
    ccall((:TSForwardStep, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSForwardSetInitialSensitivities(arg1, arg2)
    ccall((:TSForwardSetInitialSensitivities, $petsc_library), PetscErrorCode, (TS, Mat), arg1, arg2)
end

function TSForwardGetStages(arg1, arg2, arg3)
    ccall((:TSForwardGetStages, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Ptr{Mat}}), arg1, arg2, arg3)
end

function TSSetMaxSteps(arg1, arg2)
    ccall((:TSSetMaxSteps, $petsc_library), PetscErrorCode, (TS, PetscInt), arg1, arg2)
end

function TSGetMaxSteps(arg1, arg2)
    ccall((:TSGetMaxSteps, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSSetMaxTime(arg1, arg2)
    ccall((:TSSetMaxTime, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSGetMaxTime(arg1, arg2)
    ccall((:TSGetMaxTime, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}), arg1, arg2)
end

function TSSetExactFinalTime(arg1, arg2)
    ccall((:TSSetExactFinalTime, $petsc_library), PetscErrorCode, (TS, TSExactFinalTimeOption), arg1, arg2)
end

function TSGetExactFinalTime(arg1, arg2)
    ccall((:TSGetExactFinalTime, $petsc_library), PetscErrorCode, (TS, Ptr{TSExactFinalTimeOption}), arg1, arg2)
end

function TSSetTimeSpan(arg1, arg2, arg3)
    ccall((:TSSetTimeSpan, $petsc_library), PetscErrorCode, (TS, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3)
end

function TSGetTimeSpan(arg1, arg2, arg3)
    ccall((:TSGetTimeSpan, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Ptr{PetscReal}}), arg1, arg2, arg3)
end

function TSGetTimeSpanSolutions(arg1, arg2, arg3)
    ccall((:TSGetTimeSpanSolutions, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Ptr{Vec}}), arg1, arg2, arg3)
end

function TSSetInitialTimeStep(arg1, arg2, arg3)
    ccall((:TSSetInitialTimeStep, $petsc_library), PetscErrorCode, (TS, PetscReal, PetscReal), arg1, arg2, arg3)
end

function TSSetDuration(arg1, arg2, arg3)
    ccall((:TSSetDuration, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal), arg1, arg2, arg3)
end

function TSGetDuration(arg1, arg2, arg3)
    ccall((:TSGetDuration, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function TSGetTimeStepNumber(arg1, arg2)
    ccall((:TSGetTimeStepNumber, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSGetTotalSteps(arg1, arg2)
    ccall((:TSGetTotalSteps, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSMonitorDefault(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorDefault, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorExtreme(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorExtreme, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4, arg5)
end

mutable struct _n_TSMonitorDrawCtx end

const TSMonitorDrawCtx = Ptr{_n_TSMonitorDrawCtx}

function TSMonitorDrawCtxCreate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:TSMonitorDrawCtxCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Cint, Cint, Cint, Cint, PetscInt, Ptr{TSMonitorDrawCtx}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function TSMonitorDrawCtxDestroy(arg1)
    ccall((:TSMonitorDrawCtxDestroy, $petsc_library), PetscErrorCode, (Ptr{TSMonitorDrawCtx},), arg1)
end

function TSMonitorDrawSolution(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorDrawSolution, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorDrawSolutionPhase(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorDrawSolutionPhase, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorDrawError(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorDrawError, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorDrawSolutionFunction(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorDrawSolutionFunction, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSAdjointMonitorDefault(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:TSAdjointMonitorDefault, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, PetscInt, Ptr{Vec}, Ptr{Vec}, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function TSAdjointMonitorDrawSensi(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:TSAdjointMonitorDrawSensi, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, PetscInt, Ptr{Vec}, Ptr{Vec}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function TSMonitorSolution(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorSolution, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorSolutionVTK(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorSolutionVTK, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorSolutionVTKDestroy(arg1)
    ccall((:TSMonitorSolutionVTKDestroy, $petsc_library), PetscErrorCode, (Ptr{Cvoid},), arg1)
end

function TSStep(arg1)
    ccall((:TSStep, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSEvaluateWLTE(arg1, arg2, arg3, arg4)
    ccall((:TSEvaluateWLTE, $petsc_library), PetscErrorCode, (TS, NormType, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function TSEvaluateStep(arg1, arg2, arg3, arg4)
    ccall((:TSEvaluateStep, $petsc_library), PetscErrorCode, (TS, PetscInt, Vec, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function TSSolve(arg1, arg2)
    ccall((:TSSolve, $petsc_library), PetscErrorCode, (TS, Vec), arg1, arg2)
end

function TSGetEquationType(arg1, arg2)
    ccall((:TSGetEquationType, $petsc_library), PetscErrorCode, (TS, Ptr{TSEquationType}), arg1, arg2)
end

function TSSetEquationType(arg1, arg2)
    ccall((:TSSetEquationType, $petsc_library), PetscErrorCode, (TS, TSEquationType), arg1, arg2)
end

function TSGetConvergedReason(arg1, arg2)
    ccall((:TSGetConvergedReason, $petsc_library), PetscErrorCode, (TS, Ptr{TSConvergedReason}), arg1, arg2)
end

function TSSetConvergedReason(arg1, arg2)
    ccall((:TSSetConvergedReason, $petsc_library), PetscErrorCode, (TS, TSConvergedReason), arg1, arg2)
end

function TSGetSolveTime(arg1, arg2)
    ccall((:TSGetSolveTime, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}), arg1, arg2)
end

function TSGetSNESIterations(arg1, arg2)
    ccall((:TSGetSNESIterations, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSGetKSPIterations(arg1, arg2)
    ccall((:TSGetKSPIterations, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSGetStepRejections(arg1, arg2)
    ccall((:TSGetStepRejections, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSSetMaxStepRejections(arg1, arg2)
    ccall((:TSSetMaxStepRejections, $petsc_library), PetscErrorCode, (TS, PetscInt), arg1, arg2)
end

function TSGetSNESFailures(arg1, arg2)
    ccall((:TSGetSNESFailures, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSSetMaxSNESFailures(arg1, arg2)
    ccall((:TSSetMaxSNESFailures, $petsc_library), PetscErrorCode, (TS, PetscInt), arg1, arg2)
end

function TSSetErrorIfStepFails(arg1, arg2)
    ccall((:TSSetErrorIfStepFails, $petsc_library), PetscErrorCode, (TS, PetscBool), arg1, arg2)
end

function TSRestartStep(arg1)
    ccall((:TSRestartStep, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSRollBack(arg1)
    ccall((:TSRollBack, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSGetStepRollBack(arg1, arg2)
    ccall((:TSGetStepRollBack, $petsc_library), PetscErrorCode, (TS, Ptr{PetscBool}), arg1, arg2)
end

function TSGetStages(arg1, arg2, arg3)
    ccall((:TSGetStages, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Ptr{Vec}}), arg1, arg2, arg3)
end

function TSGetTime(arg1, arg2)
    ccall((:TSGetTime, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}), arg1, arg2)
end

function TSSetTime(arg1, arg2)
    ccall((:TSSetTime, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSGetPrevTime(arg1, arg2)
    ccall((:TSGetPrevTime, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}), arg1, arg2)
end

function TSGetTimeStep(arg1, arg2)
    ccall((:TSGetTimeStep, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}), arg1, arg2)
end

function TSSetTimeStep(arg1, arg2)
    ccall((:TSSetTimeStep, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSGetStepNumber(arg1, arg2)
    ccall((:TSGetStepNumber, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSSetStepNumber(arg1, arg2)
    ccall((:TSSetStepNumber, $petsc_library), PetscErrorCode, (TS, PetscInt), arg1, arg2)
end

# typedef PetscErrorCode ( TSRHSFunctionFn ) ( TS ts , PetscReal t , Vec u , Vec F , void * ctx )
const TSRHSFunctionFn = Cvoid

const TSRHSFunction = Ptr{TSRHSFunctionFn}

# typedef PetscErrorCode ( TSRHSJacobianFn ) ( TS ts , PetscReal t , Vec u , Mat Amat , Mat Pmat , void * ctx )
const TSRHSJacobianFn = Cvoid

const TSRHSJacobian = Ptr{TSRHSJacobianFn}

# typedef PetscErrorCode ( TSRHSJacobianPFn ) ( TS ts , PetscReal t , Vec U , Mat A , void * ctx )
const TSRHSJacobianPFn = Cvoid

const TSRHSJacobianP = Ptr{TSRHSJacobianPFn}

function TSSetRHSFunction(arg1, arg2, arg3, arg4)
    ccall((:TSSetRHSFunction, $petsc_library), PetscErrorCode, (TS, Vec, Ptr{TSRHSFunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSGetRHSFunction(arg1, arg2, arg3, arg4)
    ccall((:TSGetRHSFunction, $petsc_library), PetscErrorCode, (TS, Ptr{Vec}, Ptr{Ptr{TSRHSFunctionFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function TSSetRHSJacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSSetRHSJacobian, $petsc_library), PetscErrorCode, (TS, Mat, Mat, Ptr{TSRHSJacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSGetRHSJacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSGetRHSJacobian, $petsc_library), PetscErrorCode, (TS, Ptr{Mat}, Ptr{Mat}, Ptr{Ptr{TSRHSJacobianFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5)
end

function TSRHSJacobianSetReuse(arg1, arg2)
    ccall((:TSRHSJacobianSetReuse, $petsc_library), PetscErrorCode, (TS, PetscBool), arg1, arg2)
end

# typedef PetscErrorCode ( TSSolutionFn ) ( TS ts , PetscReal t , Vec u , void * ctx )
const TSSolutionFn = Cvoid

const TSSolutionFunction = Ptr{TSSolutionFn}

function TSSetSolutionFunction(arg1, arg2, arg3)
    ccall((:TSSetSolutionFunction, $petsc_library), PetscErrorCode, (TS, Ptr{TSSolutionFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

# typedef PetscErrorCode ( TSForcingFn ) ( TS ts , PetscReal t , Vec f , void * ctx )
const TSForcingFn = Cvoid

const TSForcingFunction = Ptr{TSForcingFn}

function TSSetForcingFunction(arg1, arg2, arg3)
    ccall((:TSSetForcingFunction, $petsc_library), PetscErrorCode, (TS, Ptr{TSForcingFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

# typedef PetscErrorCode ( TSIFunctionFn ) ( TS ts , PetscReal t , Vec U , Vec U_t , Vec F , void * ctx )
const TSIFunctionFn = Cvoid

const TSIFunction = Ptr{TSIFunctionFn}

# typedef PetscErrorCode ( TSIJacobianFn ) ( TS ts , PetscReal t , Vec U , Vec U_t , PetscReal a , Mat Amat , Mat Pmat , void * ctx )
const TSIJacobianFn = Cvoid

const TSIJacobian = Ptr{TSIJacobianFn}

function TSSetIFunction(arg1, arg2, arg3, arg4)
    ccall((:TSSetIFunction, $petsc_library), PetscErrorCode, (TS, Vec, Ptr{TSIFunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSGetIFunction(arg1, arg2, arg3, arg4)
    ccall((:TSGetIFunction, $petsc_library), PetscErrorCode, (TS, Ptr{Vec}, Ptr{Ptr{TSIFunctionFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function TSSetIJacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSSetIJacobian, $petsc_library), PetscErrorCode, (TS, Mat, Mat, Ptr{TSIJacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSGetIJacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSGetIJacobian, $petsc_library), PetscErrorCode, (TS, Ptr{Mat}, Ptr{Mat}, Ptr{Ptr{TSIJacobianFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5)
end

# typedef PetscErrorCode ( TSI2FunctionFn ) ( TS ts , PetscReal t , Vec U , Vec U_t , Vec U_tt , Vec F , void * ctx )
const TSI2FunctionFn = Cvoid

const TSI2Function = Ptr{TSI2FunctionFn}

# typedef PetscErrorCode ( TSI2JacobianFn ) ( TS ts , PetscReal t , Vec U , Vec U_t , Vec U_tt , PetscReal v , PetscReal a , Mat J , Mat Jac , void * ctx )
const TSI2JacobianFn = Cvoid

const TSI2Jacobian = Ptr{TSI2JacobianFn}

function TSSetI2Function(arg1, arg2, arg3, arg4)
    ccall((:TSSetI2Function, $petsc_library), PetscErrorCode, (TS, Vec, Ptr{TSI2FunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSGetI2Function(arg1, arg2, arg3, arg4)
    ccall((:TSGetI2Function, $petsc_library), PetscErrorCode, (TS, Ptr{Vec}, Ptr{Ptr{TSI2FunctionFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function TSSetI2Jacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSSetI2Jacobian, $petsc_library), PetscErrorCode, (TS, Mat, Mat, Ptr{TSI2JacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSGetI2Jacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSGetI2Jacobian, $petsc_library), PetscErrorCode, (TS, Ptr{Mat}, Ptr{Mat}, Ptr{Ptr{TSI2JacobianFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5)
end

function TSRHSSplitSetIS(arg1, arg2, arg3)
    ccall((:TSRHSSplitSetIS, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}, IS), arg1, arg2, arg3)
end

function TSRHSSplitGetIS(arg1, arg2, arg3)
    ccall((:TSRHSSplitGetIS, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}, Ptr{IS}), arg1, arg2, arg3)
end

function TSRHSSplitSetRHSFunction(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSRHSSplitSetRHSFunction, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}, Vec, Ptr{TSRHSFunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSRHSSplitGetSubTS(arg1, arg2, arg3)
    ccall((:TSRHSSplitGetSubTS, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}, Ptr{TS}), arg1, arg2, arg3)
end

function TSRHSSplitGetSubTSs(arg1, arg2, arg3)
    ccall((:TSRHSSplitGetSubTSs, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Ptr{TS}}), arg1, arg2, arg3)
end

function TSSetUseSplitRHSFunction(arg1, arg2)
    ccall((:TSSetUseSplitRHSFunction, $petsc_library), PetscErrorCode, (TS, PetscBool), arg1, arg2)
end

function TSGetUseSplitRHSFunction(arg1, arg2)
    ccall((:TSGetUseSplitRHSFunction, $petsc_library), PetscErrorCode, (TS, Ptr{PetscBool}), arg1, arg2)
end

function TSComputeIFunctionLinear(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeIFunctionLinear, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSComputeIJacobianConstant(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:TSComputeIJacobianConstant, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Vec, PetscReal, Mat, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function TSComputeSolutionFunction(arg1, arg2, arg3)
    ccall((:TSComputeSolutionFunction, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec), arg1, arg2, arg3)
end

function TSComputeForcingFunction(arg1, arg2, arg3)
    ccall((:TSComputeForcingFunction, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec), arg1, arg2, arg3)
end

function TSComputeIJacobianDefaultColor(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:TSComputeIJacobianDefaultColor, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Vec, PetscReal, Mat, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function TSPruneIJacobianColor(arg1, arg2, arg3)
    ccall((:TSPruneIJacobianColor, $petsc_library), PetscErrorCode, (TS, Mat, Mat), arg1, arg2, arg3)
end

function TSSetPreStep(arg1, arg2)
    ccall((:TSSetPreStep, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}), arg1, arg2)
end

function TSSetPreStage(arg1, arg2)
    ccall((:TSSetPreStage, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}), arg1, arg2)
end

function TSSetPostStage(arg1, arg2)
    ccall((:TSSetPostStage, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}), arg1, arg2)
end

function TSSetPostEvaluate(arg1, arg2)
    ccall((:TSSetPostEvaluate, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}), arg1, arg2)
end

function TSSetPostStep(arg1, arg2)
    ccall((:TSSetPostStep, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}), arg1, arg2)
end

function TSSetResize(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSSetResize, $petsc_library), PetscErrorCode, (TS, PetscBool, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSPreStep(arg1)
    ccall((:TSPreStep, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSPreStage(arg1, arg2)
    ccall((:TSPreStage, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSPostStage(arg1, arg2, arg3, arg4)
    ccall((:TSPostStage, $petsc_library), PetscErrorCode, (TS, PetscReal, PetscInt, Ptr{Vec}), arg1, arg2, arg3, arg4)
end

function TSPostEvaluate(arg1)
    ccall((:TSPostEvaluate, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSPostStep(arg1)
    ccall((:TSPostStep, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSResize(arg1)
    ccall((:TSResize, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSResizeRetrieveVec(arg1, arg2, arg3)
    ccall((:TSResizeRetrieveVec, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}, Ptr{Vec}), arg1, arg2, arg3)
end

function TSResizeRegisterVec(arg1, arg2, arg3)
    ccall((:TSResizeRegisterVec, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}, Vec), arg1, arg2, arg3)
end

function TSInterpolate(arg1, arg2, arg3)
    ccall((:TSInterpolate, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec), arg1, arg2, arg3)
end

function TSSetTolerances(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSSetTolerances, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, PetscReal, Vec), arg1, arg2, arg3, arg4, arg5)
end

function TSGetTolerances(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSGetTolerances, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}, Ptr{Vec}, Ptr{PetscReal}, Ptr{Vec}), arg1, arg2, arg3, arg4, arg5)
end

function TSErrorWeightedNorm(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:TSErrorWeightedNorm, $petsc_library), PetscErrorCode, (TS, Vec, Vec, NormType, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function TSErrorWeightedENorm(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:TSErrorWeightedENorm, $petsc_library), PetscErrorCode, (TS, Vec, Vec, Vec, NormType, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function TSSetCFLTimeLocal(arg1, arg2)
    ccall((:TSSetCFLTimeLocal, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSGetCFLTime(arg1, arg2)
    ccall((:TSGetCFLTime, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}), arg1, arg2)
end

function TSSetFunctionDomainError(arg1, arg2)
    ccall((:TSSetFunctionDomainError, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}), arg1, arg2)
end

function TSFunctionDomainError(arg1, arg2, arg3, arg4)
    ccall((:TSFunctionDomainError, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function TSPseudoSetTimeStep(arg1, arg2, arg3)
    ccall((:TSPseudoSetTimeStep, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TSPseudoTimeStepDefault(arg1, arg2, arg3)
    ccall((:TSPseudoTimeStepDefault, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TSPseudoComputeTimeStep(arg1, arg2)
    ccall((:TSPseudoComputeTimeStep, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}), arg1, arg2)
end

function TSPseudoSetMaxTimeStep(arg1, arg2)
    ccall((:TSPseudoSetMaxTimeStep, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSPseudoSetVerifyTimeStep(arg1, arg2, arg3)
    ccall((:TSPseudoSetVerifyTimeStep, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TSPseudoVerifyTimeStepDefault(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSPseudoVerifyTimeStepDefault, $petsc_library), PetscErrorCode, (TS, Vec, Ptr{Cvoid}, Ptr{PetscReal}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function TSPseudoVerifyTimeStep(arg1, arg2, arg3, arg4)
    ccall((:TSPseudoVerifyTimeStep, $petsc_library), PetscErrorCode, (TS, Vec, Ptr{PetscReal}, Ptr{PetscBool}), arg1, arg2, arg3, arg4)
end

function TSPseudoSetTimeStepIncrement(arg1, arg2)
    ccall((:TSPseudoSetTimeStepIncrement, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSPseudoIncrementDtFromInitialDt(arg1)
    ccall((:TSPseudoIncrementDtFromInitialDt, $petsc_library), PetscErrorCode, (TS,), arg1)
end

function TSPythonSetType(arg1, arg2)
    ccall((:TSPythonSetType, $petsc_library), PetscErrorCode, (TS, Ptr{Cchar}), arg1, arg2)
end

function TSPythonGetType(arg1, arg2)
    ccall((:TSPythonGetType, $petsc_library), PetscErrorCode, (TS, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function TSComputeRHSFunction(arg1, arg2, arg3, arg4)
    ccall((:TSComputeRHSFunction, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Vec), arg1, arg2, arg3, arg4)
end

function TSComputeRHSJacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSComputeRHSJacobian, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Mat, Mat), arg1, arg2, arg3, arg4, arg5)
end

function TSComputeIFunction(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeIFunction, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Vec, Vec, PetscBool), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSComputeIJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:TSComputeIJacobian, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Vec, PetscReal, Mat, Mat, PetscBool), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function TSComputeI2Function(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSComputeI2Function, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSComputeI2Jacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:TSComputeI2Jacobian, $petsc_library), PetscErrorCode, (TS, PetscReal, Vec, Vec, Vec, PetscReal, PetscReal, Mat, Mat), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function TSComputeLinearStability(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSComputeLinearStability, $petsc_library), PetscErrorCode, (TS, PetscReal, PetscReal, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function TSVISetVariableBounds(arg1, arg2, arg3)
    ccall((:TSVISetVariableBounds, $petsc_library), PetscErrorCode, (TS, Vec, Vec), arg1, arg2, arg3)
end

function DMTSSetBoundaryLocal(arg1, arg2, arg3)
    ccall((:DMTSSetBoundaryLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSSetRHSFunction(arg1, arg2, arg3)
    ccall((:DMTSSetRHSFunction, $petsc_library), PetscErrorCode, (DM, Ptr{TSRHSFunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetRHSFunction(arg1, arg2, arg3)
    ccall((:DMTSGetRHSFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{TSRHSFunctionFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSSetRHSFunctionContextDestroy(arg1, arg2)
    ccall((:DMTSSetRHSFunctionContextDestroy, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMTSSetRHSJacobian(arg1, arg2, arg3)
    ccall((:DMTSSetRHSJacobian, $petsc_library), PetscErrorCode, (DM, Ptr{TSRHSJacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetRHSJacobian(arg1, arg2, arg3)
    ccall((:DMTSGetRHSJacobian, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{TSRHSJacobianFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSSetRHSJacobianContextDestroy(arg1, arg2)
    ccall((:DMTSSetRHSJacobianContextDestroy, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMTSSetIFunction(arg1, arg2, arg3)
    ccall((:DMTSSetIFunction, $petsc_library), PetscErrorCode, (DM, Ptr{TSIFunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetIFunction(arg1, arg2, arg3)
    ccall((:DMTSGetIFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{TSIFunctionFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSSetIFunctionContextDestroy(arg1, arg2)
    ccall((:DMTSSetIFunctionContextDestroy, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMTSSetIJacobian(arg1, arg2, arg3)
    ccall((:DMTSSetIJacobian, $petsc_library), PetscErrorCode, (DM, Ptr{TSIJacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetIJacobian(arg1, arg2, arg3)
    ccall((:DMTSGetIJacobian, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{TSIJacobianFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSSetIJacobianContextDestroy(arg1, arg2)
    ccall((:DMTSSetIJacobianContextDestroy, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMTSSetI2Function(arg1, arg2, arg3)
    ccall((:DMTSSetI2Function, $petsc_library), PetscErrorCode, (DM, Ptr{TSI2FunctionFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetI2Function(arg1, arg2, arg3)
    ccall((:DMTSGetI2Function, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{TSI2FunctionFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSSetI2FunctionContextDestroy(arg1, arg2)
    ccall((:DMTSSetI2FunctionContextDestroy, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

function DMTSSetI2Jacobian(arg1, arg2, arg3)
    ccall((:DMTSSetI2Jacobian, $petsc_library), PetscErrorCode, (DM, Ptr{TSI2JacobianFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetI2Jacobian(arg1, arg2, arg3)
    ccall((:DMTSGetI2Jacobian, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{TSI2JacobianFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSSetI2JacobianContextDestroy(arg1, arg2)
    ccall((:DMTSSetI2JacobianContextDestroy, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}), arg1, arg2)
end

# typedef PetscErrorCode ( TSTransientVariableFn ) ( TS ts , Vec p , Vec c , void * ctx )
const TSTransientVariableFn = Cvoid

const TSTransientVariable = Ptr{TSTransientVariableFn}

function TSSetTransientVariable(arg1, arg2, arg3)
    ccall((:TSSetTransientVariable, $petsc_library), PetscErrorCode, (TS, Ptr{TSTransientVariableFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSSetTransientVariable(arg1, arg2, arg3)
    ccall((:DMTSSetTransientVariable, $petsc_library), PetscErrorCode, (DM, Ptr{TSTransientVariableFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetTransientVariable(arg1, arg2, arg3)
    ccall((:DMTSGetTransientVariable, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{TSTransientVariableFn}}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TSComputeTransientVariable(arg1, arg2, arg3)
    ccall((:TSComputeTransientVariable, $petsc_library), PetscErrorCode, (TS, Vec, Vec), arg1, arg2, arg3)
end

function TSHasTransientVariable(arg1, arg2)
    ccall((:TSHasTransientVariable, $petsc_library), PetscErrorCode, (TS, Ptr{PetscBool}), arg1, arg2)
end

function DMTSSetSolutionFunction(arg1, arg2, arg3)
    ccall((:DMTSSetSolutionFunction, $petsc_library), PetscErrorCode, (DM, Ptr{TSSolutionFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetSolutionFunction(arg1, arg2, arg3)
    ccall((:DMTSGetSolutionFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{TSSolutionFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSSetForcingFunction(arg1, arg2, arg3)
    ccall((:DMTSSetForcingFunction, $petsc_library), PetscErrorCode, (DM, Ptr{TSForcingFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetForcingFunction(arg1, arg2, arg3)
    ccall((:DMTSGetForcingFunction, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{TSForcingFn}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSCheckResidual(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:DMTSCheckResidual, $petsc_library), PetscErrorCode, (TS, DM, PetscReal, Vec, Vec, PetscReal, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function DMTSCheckJacobian(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    ccall((:DMTSCheckJacobian, $petsc_library), PetscErrorCode, (TS, DM, PetscReal, Vec, Vec, PetscReal, Ptr{PetscBool}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
end

function DMTSCheckFromOptions(arg1, arg2)
    ccall((:DMTSCheckFromOptions, $petsc_library), PetscErrorCode, (TS, Vec), arg1, arg2)
end

function DMTSGetIFunctionLocal(arg1, arg2, arg3)
    ccall((:DMTSGetIFunctionLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSSetIFunctionLocal(arg1, arg2, arg3)
    ccall((:DMTSSetIFunctionLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetIJacobianLocal(arg1, arg2, arg3)
    ccall((:DMTSGetIJacobianLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSSetIJacobianLocal(arg1, arg2, arg3)
    ccall((:DMTSSetIJacobianLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSGetRHSFunctionLocal(arg1, arg2, arg3)
    ccall((:DMTSGetRHSFunctionLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function DMTSSetRHSFunctionLocal(arg1, arg2, arg3)
    ccall((:DMTSSetRHSFunctionLocal, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSCreateRHSMassMatrix(arg1)
    ccall((:DMTSCreateRHSMassMatrix, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMTSCreateRHSMassMatrixLumped(arg1)
    ccall((:DMTSCreateRHSMassMatrixLumped, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMTSDestroyRHSMassMatrix(arg1)
    ccall((:DMTSDestroyRHSMassMatrix, $petsc_library), PetscErrorCode, (DM,), arg1)
end

function DMTSSetIFunctionSerialize(arg1, arg2, arg3)
    ccall((:DMTSSetIFunctionSerialize, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMTSSetIJacobianSerialize(arg1, arg2, arg3)
    ccall((:DMTSSetIJacobianSerialize, $petsc_library), PetscErrorCode, (DM, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

# typedef PetscErrorCode ( DMDATSRHSFunctionLocalFn ) ( DMDALocalInfo * info , PetscReal t , void * x , void * f , void * ctx )
const DMDATSRHSFunctionLocalFn = Cvoid

const DMDATSRHSFunctionLocal = Ptr{DMDATSRHSFunctionLocalFn}

# typedef PetscErrorCode ( DMDATSRHSJacobianLocalFn ) ( DMDALocalInfo * info , PetscReal t , void * x , Mat J , Mat B , void * ctx )
const DMDATSRHSJacobianLocalFn = Cvoid

const DMDATSRHSJacobianLocal = Ptr{DMDATSRHSJacobianLocalFn}

# typedef PetscErrorCode ( DMDATSIFunctionLocalFn ) ( DMDALocalInfo * info , PetscReal t , void * x , void * xdot , void * imode , void * ctx )
const DMDATSIFunctionLocalFn = Cvoid

const DMDATSIFunctionLocal = Ptr{DMDATSIFunctionLocalFn}

# typedef PetscErrorCode ( DMDATSIJacobianLocalFn ) ( DMDALocalInfo * info , PetscReal t , void * x , void * xdot , PetscReal shift , Mat J , Mat B , void * ctx )
const DMDATSIJacobianLocalFn = Cvoid

const DMDATSIJacobianLocal = Ptr{DMDATSIJacobianLocalFn}

function DMDATSSetRHSFunctionLocal(arg1, arg2, arg3, arg4)
    ccall((:DMDATSSetRHSFunctionLocal, $petsc_library), PetscErrorCode, (DM, InsertMode, Ptr{DMDATSRHSFunctionLocalFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMDATSSetRHSJacobianLocal(arg1, arg2, arg3)
    ccall((:DMDATSSetRHSJacobianLocal, $petsc_library), PetscErrorCode, (DM, Ptr{DMDATSRHSJacobianLocalFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function DMDATSSetIFunctionLocal(arg1, arg2, arg3, arg4)
    ccall((:DMDATSSetIFunctionLocal, $petsc_library), PetscErrorCode, (DM, InsertMode, Ptr{DMDATSIFunctionLocalFn}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function DMDATSSetIJacobianLocal(arg1, arg2, arg3)
    ccall((:DMDATSSetIJacobianLocal, $petsc_library), PetscErrorCode, (DM, Ptr{DMDATSIJacobianLocalFn}, Ptr{Cvoid}), arg1, arg2, arg3)
end

mutable struct _n_TSMonitorLGCtx end

const TSMonitorLGCtx = Ptr{_n_TSMonitorLGCtx}

mutable struct TSMonitorDMDARayCtx
    ray::Vec
    scatter::VecScatter
    viewer::PetscViewer
    lgctx::TSMonitorLGCtx
    TSMonitorDMDARayCtx() = new()
end

function TSMonitorDMDARayDestroy(arg1)
    ccall((:TSMonitorDMDARayDestroy, $petsc_library), PetscErrorCode, (Ptr{Ptr{Cvoid}},), arg1)
end

function TSMonitorDMDARay(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorDMDARay, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorLGDMDARay(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorLGDMDARay, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSGetType(arg1, arg2)
    ccall((:TSGetType, $petsc_library), PetscErrorCode, (TS, Ptr{TSType}), arg1, arg2)
end

function TSSetType(arg1, arg2)
    ccall((:TSSetType, $petsc_library), PetscErrorCode, (TS, TSType), arg1, arg2)
end

function TSRegister(arg1, arg2)
    ccall((:TSRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function TSGetSNES(arg1, arg2)
    ccall((:TSGetSNES, $petsc_library), PetscErrorCode, (TS, Ptr{SNES}), arg1, arg2)
end

function TSSetSNES(arg1, arg2)
    ccall((:TSSetSNES, $petsc_library), PetscErrorCode, (TS, SNES), arg1, arg2)
end

function TSGetKSP(arg1, arg2)
    ccall((:TSGetKSP, $petsc_library), PetscErrorCode, (TS, Ptr{KSP}), arg1, arg2)
end

function TSView(arg1, arg2)
    ccall((:TSView, $petsc_library), PetscErrorCode, (TS, PetscViewer), arg1, arg2)
end

function TSLoad(arg1, arg2)
    ccall((:TSLoad, $petsc_library), PetscErrorCode, (TS, PetscViewer), arg1, arg2)
end

function TSViewFromOptions(arg1, arg2, arg3)
    ccall((:TSViewFromOptions, $petsc_library), PetscErrorCode, (TS, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function TSTrajectoryViewFromOptions(arg1, arg2, arg3)
    ccall((:TSTrajectoryViewFromOptions, $petsc_library), PetscErrorCode, (TSTrajectory, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function TSSetApplicationContext(arg1, arg2)
    ccall((:TSSetApplicationContext, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}), arg1, arg2)
end

function TSGetApplicationContext(arg1, arg2)
    ccall((:TSGetApplicationContext, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}), arg1, arg2)
end

function TSMonitorLGCtxCreate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:TSMonitorLGCtxCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Cint, Cint, Cint, Cint, PetscInt, Ptr{TSMonitorLGCtx}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function TSMonitorLGCtxDestroy(arg1)
    ccall((:TSMonitorLGCtxDestroy, $petsc_library), PetscErrorCode, (Ptr{TSMonitorLGCtx},), arg1)
end

function TSMonitorLGTimeStep(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorLGTimeStep, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorLGSolution(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorLGSolution, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorLGSetVariableNames(arg1, arg2)
    ccall((:TSMonitorLGSetVariableNames, $petsc_library), PetscErrorCode, (TS, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function TSMonitorLGGetVariableNames(arg1, arg2)
    ccall((:TSMonitorLGGetVariableNames, $petsc_library), PetscErrorCode, (TS, Ptr{Ptr{Ptr{Cchar}}}), arg1, arg2)
end

function TSMonitorLGCtxSetVariableNames(arg1, arg2)
    ccall((:TSMonitorLGCtxSetVariableNames, $petsc_library), PetscErrorCode, (TSMonitorLGCtx, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function TSMonitorLGSetDisplayVariables(arg1, arg2)
    ccall((:TSMonitorLGSetDisplayVariables, $petsc_library), PetscErrorCode, (TS, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function TSMonitorLGCtxSetDisplayVariables(arg1, arg2)
    ccall((:TSMonitorLGCtxSetDisplayVariables, $petsc_library), PetscErrorCode, (TSMonitorLGCtx, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function TSMonitorLGSetTransform(arg1, arg2, arg3, arg4)
    ccall((:TSMonitorLGSetTransform, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSMonitorLGCtxSetTransform(arg1, arg2, arg3, arg4)
    ccall((:TSMonitorLGCtxSetTransform, $petsc_library), PetscErrorCode, (TSMonitorLGCtx, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TSMonitorLGError(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorLGError, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorLGSNESIterations(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorLGSNESIterations, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorLGKSPIterations(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorLGKSPIterations, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorError(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorError, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4, arg5)
end

function TSDMSwarmMonitorMoments(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSDMSwarmMonitorMoments, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{PetscViewerAndFormat}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorLGCtxNetworkSolution(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorLGCtxNetworkSolution, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

mutable struct _n_TSMonitorEnvelopeCtx end

const TSMonitorEnvelopeCtx = Ptr{_n_TSMonitorEnvelopeCtx}

function TSMonitorEnvelopeCtxCreate(arg1, arg2)
    ccall((:TSMonitorEnvelopeCtxCreate, $petsc_library), PetscErrorCode, (TS, Ptr{TSMonitorEnvelopeCtx}), arg1, arg2)
end

function TSMonitorEnvelope(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorEnvelope, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorEnvelopeGetBounds(arg1, arg2, arg3)
    ccall((:TSMonitorEnvelopeGetBounds, $petsc_library), PetscErrorCode, (TS, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3)
end

function TSMonitorEnvelopeCtxDestroy(arg1)
    ccall((:TSMonitorEnvelopeCtxDestroy, $petsc_library), PetscErrorCode, (Ptr{TSMonitorEnvelopeCtx},), arg1)
end

mutable struct _n_TSMonitorSPEigCtx end

const TSMonitorSPEigCtx = Ptr{_n_TSMonitorSPEigCtx}

function TSMonitorSPEigCtxCreate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:TSMonitorSPEigCtxCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Cint, Cint, Cint, Cint, PetscInt, Ptr{TSMonitorSPEigCtx}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function TSMonitorSPEigCtxDestroy(arg1)
    ccall((:TSMonitorSPEigCtxDestroy, $petsc_library), PetscErrorCode, (Ptr{TSMonitorSPEigCtx},), arg1)
end

function TSMonitorSPEig(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorSPEig, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

mutable struct _n_TSMonitorSPCtx end

const TSMonitorSPCtx = Ptr{_n_TSMonitorSPCtx}

function TSMonitorSPCtxCreate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
    ccall((:TSMonitorSPCtxCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Cint, Cint, Cint, Cint, PetscInt, PetscInt, PetscBool, PetscBool, Ptr{TSMonitorSPCtx}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
end

function TSMonitorSPCtxDestroy(arg1)
    ccall((:TSMonitorSPCtxDestroy, $petsc_library), PetscErrorCode, (Ptr{TSMonitorSPCtx},), arg1)
end

function TSMonitorSPSwarmSolution(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorSPSwarmSolution, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

mutable struct _n_TSMonitorHGCtx end

const TSMonitorHGCtx = Ptr{_n_TSMonitorHGCtx}

function TSMonitorHGCtxCreate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
    ccall((:TSMonitorHGCtxCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Cint, Cint, Cint, Cint, PetscInt, PetscInt, PetscInt, PetscBool, Ptr{TSMonitorHGCtx}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
end

function TSMonitorHGSwarmSolution(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSMonitorHGSwarmSolution, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscReal, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSMonitorHGCtxDestroy(arg1)
    ccall((:TSMonitorHGCtxDestroy, $petsc_library), PetscErrorCode, (Ptr{TSMonitorHGCtx},), arg1)
end

function TSSetEventHandler(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:TSSetEventHandler, $petsc_library), PetscErrorCode, (TS, PetscInt, Ptr{PetscInt}, Ptr{PetscBool}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function TSSetPostEventStep(arg1, arg2)
    ccall((:TSSetPostEventStep, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSSetPostEventSecondStep(arg1, arg2)
    ccall((:TSSetPostEventSecondStep, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSSetPostEventIntervalStep(ts, dt)
    ccall((:TSSetPostEventIntervalStep, $petsc_library), PetscErrorCode, (TS, PetscReal), ts, dt)
end

function TSSetEventTolerances(arg1, arg2, arg3)
    ccall((:TSSetEventTolerances, $petsc_library), PetscErrorCode, (TS, PetscReal, Ptr{PetscReal}), arg1, arg2, arg3)
end

function TSGetNumEvents(arg1, arg2)
    ccall((:TSGetNumEvents, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

const TSSSPType = Ptr{Cchar}

function TSSSPSetType(arg1, arg2)
    ccall((:TSSSPSetType, $petsc_library), PetscErrorCode, (TS, TSSSPType), arg1, arg2)
end

function TSSSPGetType(arg1, arg2)
    ccall((:TSSSPGetType, $petsc_library), PetscErrorCode, (TS, Ptr{TSSSPType}), arg1, arg2)
end

function TSSSPSetNumStages(arg1, arg2)
    ccall((:TSSSPSetNumStages, $petsc_library), PetscErrorCode, (TS, PetscInt), arg1, arg2)
end

function TSSSPGetNumStages(arg1, arg2)
    ccall((:TSSSPGetNumStages, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSSSPInitializePackage()
    ccall((:TSSSPInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSSSPFinalizePackage()
    ccall((:TSSSPFinalizePackage, $petsc_library), PetscErrorCode, ())
end

mutable struct _p_TSAdapt end

const TSAdapt = Ptr{_p_TSAdapt}

const TSAdaptType = Ptr{Cchar}

function TSGetAdapt(arg1, arg2)
    ccall((:TSGetAdapt, $petsc_library), PetscErrorCode, (TS, Ptr{TSAdapt}), arg1, arg2)
end

function TSAdaptRegister(arg1, arg2)
    ccall((:TSAdaptRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function TSAdaptInitializePackage()
    ccall((:TSAdaptInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSAdaptFinalizePackage()
    ccall((:TSAdaptFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSAdaptCreate(arg1, arg2)
    ccall((:TSAdaptCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{TSAdapt}), arg1, arg2)
end

function TSAdaptSetType(arg1, arg2)
    ccall((:TSAdaptSetType, $petsc_library), PetscErrorCode, (TSAdapt, TSAdaptType), arg1, arg2)
end

function TSAdaptGetType(arg1, arg2)
    ccall((:TSAdaptGetType, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{TSAdaptType}), arg1, arg2)
end

function TSAdaptSetOptionsPrefix(arg1, arg2)
    ccall((:TSAdaptSetOptionsPrefix, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{Cchar}), arg1, arg2)
end

function TSAdaptCandidatesClear(arg1)
    ccall((:TSAdaptCandidatesClear, $petsc_library), PetscErrorCode, (TSAdapt,), arg1)
end

function TSAdaptCandidateAdd(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:TSAdaptCandidateAdd, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{Cchar}, PetscInt, PetscInt, PetscReal, PetscReal, PetscBool), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function TSAdaptCandidatesGet(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSAdaptCandidatesGet, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{PetscInt}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscInt}}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSAdaptChoose(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSAdaptChoose, $petsc_library), PetscErrorCode, (TSAdapt, TS, PetscReal, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSAdaptCheckStage(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSAdaptCheckStage, $petsc_library), PetscErrorCode, (TSAdapt, TS, PetscReal, Vec, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5)
end

function TSAdaptView(arg1, arg2)
    ccall((:TSAdaptView, $petsc_library), PetscErrorCode, (TSAdapt, PetscViewer), arg1, arg2)
end

function TSAdaptLoad(arg1, arg2)
    ccall((:TSAdaptLoad, $petsc_library), PetscErrorCode, (TSAdapt, PetscViewer), arg1, arg2)
end

function TSAdaptReset(arg1)
    ccall((:TSAdaptReset, $petsc_library), PetscErrorCode, (TSAdapt,), arg1)
end

function TSAdaptDestroy(arg1)
    ccall((:TSAdaptDestroy, $petsc_library), PetscErrorCode, (Ptr{TSAdapt},), arg1)
end

function TSAdaptSetMonitor(arg1, arg2)
    ccall((:TSAdaptSetMonitor, $petsc_library), PetscErrorCode, (TSAdapt, PetscBool), arg1, arg2)
end

function TSAdaptSetAlwaysAccept(arg1, arg2)
    ccall((:TSAdaptSetAlwaysAccept, $petsc_library), PetscErrorCode, (TSAdapt, PetscBool), arg1, arg2)
end

function TSAdaptSetSafety(arg1, arg2, arg3)
    ccall((:TSAdaptSetSafety, $petsc_library), PetscErrorCode, (TSAdapt, PetscReal, PetscReal), arg1, arg2, arg3)
end

function TSAdaptGetSafety(arg1, arg2, arg3)
    ccall((:TSAdaptGetSafety, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function TSAdaptSetMaxIgnore(arg1, arg2)
    ccall((:TSAdaptSetMaxIgnore, $petsc_library), PetscErrorCode, (TSAdapt, PetscReal), arg1, arg2)
end

function TSAdaptGetMaxIgnore(arg1, arg2)
    ccall((:TSAdaptGetMaxIgnore, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{PetscReal}), arg1, arg2)
end

function TSAdaptSetClip(arg1, arg2, arg3)
    ccall((:TSAdaptSetClip, $petsc_library), PetscErrorCode, (TSAdapt, PetscReal, PetscReal), arg1, arg2, arg3)
end

function TSAdaptGetClip(arg1, arg2, arg3)
    ccall((:TSAdaptGetClip, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function TSAdaptSetScaleSolveFailed(arg1, arg2)
    ccall((:TSAdaptSetScaleSolveFailed, $petsc_library), PetscErrorCode, (TSAdapt, PetscReal), arg1, arg2)
end

function TSAdaptGetScaleSolveFailed(arg1, arg2)
    ccall((:TSAdaptGetScaleSolveFailed, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{PetscReal}), arg1, arg2)
end

function TSAdaptSetStepLimits(arg1, arg2, arg3)
    ccall((:TSAdaptSetStepLimits, $petsc_library), PetscErrorCode, (TSAdapt, PetscReal, PetscReal), arg1, arg2, arg3)
end

function TSAdaptGetStepLimits(arg1, arg2, arg3)
    ccall((:TSAdaptGetStepLimits, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function TSAdaptSetCheckStage(arg1, arg2)
    ccall((:TSAdaptSetCheckStage, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{Cvoid}), arg1, arg2)
end

function TSAdaptHistorySetHistory(arg1, n, hist, arg4)
    ccall((:TSAdaptHistorySetHistory, $petsc_library), PetscErrorCode, (TSAdapt, PetscInt, Ptr{PetscReal}, PetscBool), arg1, n, hist, arg4)
end

function TSAdaptHistorySetTrajectory(arg1, arg2, arg3)
    ccall((:TSAdaptHistorySetTrajectory, $petsc_library), PetscErrorCode, (TSAdapt, TSTrajectory, PetscBool), arg1, arg2, arg3)
end

function TSAdaptHistoryGetStep(arg1, arg2, arg3, arg4)
    ccall((:TSAdaptHistoryGetStep, $petsc_library), PetscErrorCode, (TSAdapt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function TSAdaptSetTimeStepIncreaseDelay(arg1, arg2)
    ccall((:TSAdaptSetTimeStepIncreaseDelay, $petsc_library), PetscErrorCode, (TSAdapt, PetscInt), arg1, arg2)
end

function TSAdaptDSPSetFilter(arg1, arg2)
    ccall((:TSAdaptDSPSetFilter, $petsc_library), PetscErrorCode, (TSAdapt, Ptr{Cchar}), arg1, arg2)
end

function TSAdaptDSPSetPID(arg1, arg2, arg3, arg4)
    ccall((:TSAdaptDSPSetPID, $petsc_library), PetscErrorCode, (TSAdapt, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4)
end

mutable struct _p_TSGLLEAdapt end

const TSGLLEAdapt = Ptr{_p_TSGLLEAdapt}

const TSGLLEAdaptType = Ptr{Cchar}

function TSGLLEAdaptRegister(arg1, arg2)
    ccall((:TSGLLEAdaptRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function TSGLLEAdaptInitializePackage()
    ccall((:TSGLLEAdaptInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSGLLEAdaptFinalizePackage()
    ccall((:TSGLLEAdaptFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSGLLEAdaptCreate(arg1, arg2)
    ccall((:TSGLLEAdaptCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{TSGLLEAdapt}), arg1, arg2)
end

function TSGLLEAdaptSetType(arg1, arg2)
    ccall((:TSGLLEAdaptSetType, $petsc_library), PetscErrorCode, (TSGLLEAdapt, TSGLLEAdaptType), arg1, arg2)
end

function TSGLLEAdaptSetOptionsPrefix(arg1, arg2)
    ccall((:TSGLLEAdaptSetOptionsPrefix, $petsc_library), PetscErrorCode, (TSGLLEAdapt, Ptr{Cchar}), arg1, arg2)
end

function TSGLLEAdaptChoose(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:TSGLLEAdaptChoose, $petsc_library), PetscErrorCode, (TSGLLEAdapt, PetscInt, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, PetscInt, PetscReal, PetscReal, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function TSGLLEAdaptView(arg1, arg2)
    ccall((:TSGLLEAdaptView, $petsc_library), PetscErrorCode, (TSGLLEAdapt, PetscViewer), arg1, arg2)
end

function TSGLLEAdaptDestroy(arg1)
    ccall((:TSGLLEAdaptDestroy, $petsc_library), PetscErrorCode, (Ptr{TSGLLEAdapt},), arg1)
end

const TSGLLEAcceptType = Ptr{Cchar}

# typedef PetscErrorCode ( TSGLLEAcceptFn ) ( TS ts , PetscReal nt , PetscReal h , const PetscReal enorm [ ] , PetscBool * accept )
const TSGLLEAcceptFn = Cvoid

const TSGLLEAcceptFunction = Ptr{TSGLLEAcceptFn}

function TSGLLEAcceptRegister(arg1, arg2)
    ccall((:TSGLLEAcceptRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{TSGLLEAcceptFn}), arg1, arg2)
end

const TSGLLEType = Ptr{Cchar}

function TSGLLERegister(arg1, arg2)
    ccall((:TSGLLERegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function TSGLLEInitializePackage()
    ccall((:TSGLLEInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSGLLEFinalizePackage()
    ccall((:TSGLLEFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSGLLESetType(arg1, arg2)
    ccall((:TSGLLESetType, $petsc_library), PetscErrorCode, (TS, TSGLLEType), arg1, arg2)
end

function TSGLLEGetAdapt(arg1, arg2)
    ccall((:TSGLLEGetAdapt, $petsc_library), PetscErrorCode, (TS, Ptr{TSGLLEAdapt}), arg1, arg2)
end

function TSGLLESetAcceptType(arg1, arg2)
    ccall((:TSGLLESetAcceptType, $petsc_library), PetscErrorCode, (TS, TSGLLEAcceptType), arg1, arg2)
end

function TSEIMEXSetMaxRows(ts, arg2)
    ccall((:TSEIMEXSetMaxRows, $petsc_library), PetscErrorCode, (TS, PetscInt), ts, arg2)
end

function TSEIMEXSetRowCol(ts, arg2, arg3)
    ccall((:TSEIMEXSetRowCol, $petsc_library), PetscErrorCode, (TS, PetscInt, PetscInt), ts, arg2, arg3)
end

function TSEIMEXSetOrdAdapt(arg1, arg2)
    ccall((:TSEIMEXSetOrdAdapt, $petsc_library), PetscErrorCode, (TS, PetscBool), arg1, arg2)
end

const TSRKType = Ptr{Cchar}

function TSRKGetOrder(arg1, arg2)
    ccall((:TSRKGetOrder, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSRKGetType(arg1, arg2)
    ccall((:TSRKGetType, $petsc_library), PetscErrorCode, (TS, Ptr{TSRKType}), arg1, arg2)
end

function TSRKSetType(arg1, arg2)
    ccall((:TSRKSetType, $petsc_library), PetscErrorCode, (TS, TSRKType), arg1, arg2)
end

function TSRKGetTableau(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:TSRKGetTableau, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}, Ptr{PetscInt}, Ptr{Ptr{PetscReal}}, Ptr{PetscBool}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function TSRKSetMultirate(arg1, arg2)
    ccall((:TSRKSetMultirate, $petsc_library), PetscErrorCode, (TS, PetscBool), arg1, arg2)
end

function TSRKGetMultirate(arg1, arg2)
    ccall((:TSRKGetMultirate, $petsc_library), PetscErrorCode, (TS, Ptr{PetscBool}), arg1, arg2)
end

function TSRKRegister(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:TSRKRegister, $petsc_library), PetscErrorCode, (TSRKType, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function TSRKInitializePackage()
    ccall((:TSRKInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSRKFinalizePackage()
    ccall((:TSRKFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSRKRegisterDestroy()
    ccall((:TSRKRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

const TSMPRKType = Ptr{Cchar}

function TSMPRKGetType(ts, arg2)
    ccall((:TSMPRKGetType, $petsc_library), PetscErrorCode, (TS, Ptr{TSMPRKType}), ts, arg2)
end

function TSMPRKSetType(ts, arg2)
    ccall((:TSMPRKSetType, $petsc_library), PetscErrorCode, (TS, TSMPRKType), ts, arg2)
end

function TSMPRKRegister(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)
    ccall((:TSMPRKRegister, $petsc_library), PetscErrorCode, (TSMPRKType, PetscInt, PetscInt, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)
end

function TSMPRKInitializePackage()
    ccall((:TSMPRKInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSMPRKFinalizePackage()
    ccall((:TSMPRKFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSMPRKRegisterDestroy()
    ccall((:TSMPRKRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

const TSIRKType = Ptr{Cchar}

function TSIRKGetType(arg1, arg2)
    ccall((:TSIRKGetType, $petsc_library), PetscErrorCode, (TS, Ptr{TSIRKType}), arg1, arg2)
end

function TSIRKSetType(arg1, arg2)
    ccall((:TSIRKSetType, $petsc_library), PetscErrorCode, (TS, TSIRKType), arg1, arg2)
end

function TSIRKGetNumStages(arg1, arg2)
    ccall((:TSIRKGetNumStages, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

function TSIRKSetNumStages(arg1, arg2)
    ccall((:TSIRKSetNumStages, $petsc_library), PetscErrorCode, (TS, PetscInt), arg1, arg2)
end

function TSIRKRegister(arg1, _function)
    ccall((:TSIRKRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, _function)
end

function TSIRKTableauCreate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:TSIRKTableauCreate, $petsc_library), PetscErrorCode, (TS, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscScalar}, Ptr{PetscScalar}, Ptr{PetscScalar}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function TSIRKInitializePackage()
    ccall((:TSIRKInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSIRKFinalizePackage()
    ccall((:TSIRKFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSIRKRegisterDestroy()
    ccall((:TSIRKRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

const TSGLEEType = Ptr{Cchar}

function TSGLEEGetType(ts, arg2)
    ccall((:TSGLEEGetType, $petsc_library), PetscErrorCode, (TS, Ptr{TSGLEEType}), ts, arg2)
end

function TSGLEESetType(ts, arg2)
    ccall((:TSGLEESetType, $petsc_library), PetscErrorCode, (TS, TSGLEEType), ts, arg2)
end

function TSGLEERegister(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
    ccall((:TSGLEERegister, $petsc_library), PetscErrorCode, (TSGLEEType, PetscInt, PetscInt, PetscInt, PetscReal, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
end

function TSGLEERegisterAll()
    ccall((:TSGLEERegisterAll, $petsc_library), PetscErrorCode, ())
end

function TSGLEEFinalizePackage()
    ccall((:TSGLEEFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSGLEEInitializePackage()
    ccall((:TSGLEEInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSGLEERegisterDestroy()
    ccall((:TSGLEERegisterDestroy, $petsc_library), PetscErrorCode, ())
end

const TSARKIMEXType = Ptr{Cchar}

function TSARKIMEXGetType(ts, arg2)
    ccall((:TSARKIMEXGetType, $petsc_library), PetscErrorCode, (TS, Ptr{TSARKIMEXType}), ts, arg2)
end

function TSARKIMEXSetType(ts, arg2)
    ccall((:TSARKIMEXSetType, $petsc_library), PetscErrorCode, (TS, TSARKIMEXType), ts, arg2)
end

function TSARKIMEXSetFullyImplicit(arg1, arg2)
    ccall((:TSARKIMEXSetFullyImplicit, $petsc_library), PetscErrorCode, (TS, PetscBool), arg1, arg2)
end

function TSARKIMEXGetFullyImplicit(arg1, arg2)
    ccall((:TSARKIMEXGetFullyImplicit, $petsc_library), PetscErrorCode, (TS, Ptr{PetscBool}), arg1, arg2)
end

function TSARKIMEXRegister(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
    ccall((:TSARKIMEXRegister, $petsc_library), PetscErrorCode, (TSARKIMEXType, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
end

function TSARKIMEXInitializePackage()
    ccall((:TSARKIMEXInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSARKIMEXFinalizePackage()
    ccall((:TSARKIMEXFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSARKIMEXRegisterDestroy()
    ccall((:TSARKIMEXRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

const TSDIRKType = Ptr{Cchar}

function TSDIRKGetType(ts, arg2)
    ccall((:TSDIRKGetType, $petsc_library), PetscErrorCode, (TS, Ptr{TSDIRKType}), ts, arg2)
end

function TSDIRKSetType(ts, arg2)
    ccall((:TSDIRKSetType, $petsc_library), PetscErrorCode, (TS, TSDIRKType), ts, arg2)
end

function TSDIRKRegister(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:TSDIRKRegister, $petsc_library), PetscErrorCode, (TSDIRKType, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

const TSRosWType = Ptr{Cchar}

function TSRosWGetType(arg1, arg2)
    ccall((:TSRosWGetType, $petsc_library), PetscErrorCode, (TS, Ptr{TSRosWType}), arg1, arg2)
end

function TSRosWSetType(arg1, arg2)
    ccall((:TSRosWSetType, $petsc_library), PetscErrorCode, (TS, TSRosWType), arg1, arg2)
end

function TSRosWSetRecomputeJacobian(arg1, arg2)
    ccall((:TSRosWSetRecomputeJacobian, $petsc_library), PetscErrorCode, (TS, PetscBool), arg1, arg2)
end

function TSRosWRegister(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:TSRosWRegister, $petsc_library), PetscErrorCode, (TSRosWType, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, PetscInt, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function TSRosWRegisterRos4(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TSRosWRegisterRos4, $petsc_library), PetscErrorCode, (TSRosWType, PetscReal, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TSRosWInitializePackage()
    ccall((:TSRosWInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSRosWFinalizePackage()
    ccall((:TSRosWFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSRosWRegisterDestroy()
    ccall((:TSRosWRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function TSBDFSetOrder(arg1, arg2)
    ccall((:TSBDFSetOrder, $petsc_library), PetscErrorCode, (TS, PetscInt), arg1, arg2)
end

function TSBDFGetOrder(arg1, arg2)
    ccall((:TSBDFGetOrder, $petsc_library), PetscErrorCode, (TS, Ptr{PetscInt}), arg1, arg2)
end

const TSBasicSymplecticType = Ptr{Cchar}

function TSBasicSymplecticSetType(arg1, arg2)
    ccall((:TSBasicSymplecticSetType, $petsc_library), PetscErrorCode, (TS, TSBasicSymplecticType), arg1, arg2)
end

function TSBasicSymplecticGetType(arg1, arg2)
    ccall((:TSBasicSymplecticGetType, $petsc_library), PetscErrorCode, (TS, Ptr{TSBasicSymplecticType}), arg1, arg2)
end

function TSBasicSymplecticRegister(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSBasicSymplecticRegister, $petsc_library), PetscErrorCode, (TSBasicSymplecticType, PetscInt, PetscInt, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

function TSBasicSymplecticRegisterAll()
    ccall((:TSBasicSymplecticRegisterAll, $petsc_library), PetscErrorCode, ())
end

function TSBasicSymplecticInitializePackage()
    ccall((:TSBasicSymplecticInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TSBasicSymplecticFinalizePackage()
    ccall((:TSBasicSymplecticFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TSBasicSymplecticRegisterDestroy()
    ccall((:TSBasicSymplecticRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function TSDiscGradSetFormulation(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSDiscGradSetFormulation, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSDiscGradGetFormulation(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSDiscGradGetFormulation, $petsc_library), PetscErrorCode, (TS, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSDiscGradIsGonzalez(arg1, arg2)
    ccall((:TSDiscGradIsGonzalez, $petsc_library), PetscErrorCode, (TS, Ptr{PetscBool}), arg1, arg2)
end

function TSDiscGradUseGonzalez(arg1, arg2)
    ccall((:TSDiscGradUseGonzalez, $petsc_library), PetscErrorCode, (TS, PetscBool), arg1, arg2)
end

function TSThetaSetTheta(arg1, arg2)
    ccall((:TSThetaSetTheta, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSThetaGetTheta(arg1, arg2)
    ccall((:TSThetaGetTheta, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}), arg1, arg2)
end

function TSThetaGetEndpoint(arg1, arg2)
    ccall((:TSThetaGetEndpoint, $petsc_library), PetscErrorCode, (TS, Ptr{PetscBool}), arg1, arg2)
end

function TSThetaSetEndpoint(arg1, arg2)
    ccall((:TSThetaSetEndpoint, $petsc_library), PetscErrorCode, (TS, PetscBool), arg1, arg2)
end

function TSAlphaSetRadius(arg1, arg2)
    ccall((:TSAlphaSetRadius, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSAlphaSetParams(arg1, arg2, arg3, arg4)
    ccall((:TSAlphaSetParams, $petsc_library), PetscErrorCode, (TS, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4)
end

function TSAlphaGetParams(arg1, arg2, arg3, arg4)
    ccall((:TSAlphaGetParams, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function TSAlpha2SetRadius(arg1, arg2)
    ccall((:TSAlpha2SetRadius, $petsc_library), PetscErrorCode, (TS, PetscReal), arg1, arg2)
end

function TSAlpha2SetParams(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSAlpha2SetParams, $petsc_library), PetscErrorCode, (TS, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5)
end

function TSAlpha2GetParams(arg1, arg2, arg3, arg4, arg5)
    ccall((:TSAlpha2GetParams, $petsc_library), PetscErrorCode, (TS, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5)
end

# typedef PetscErrorCode ( TSAlpha2PredictorFn ) ( TS ts , Vec X0 , Vec V0 , Vec A0 , Vec X1 , void * ctx )
const TSAlpha2PredictorFn = Cvoid

const TSAlpha2Predictor = Ptr{TSAlpha2PredictorFn}

function TSAlpha2SetPredictor(arg1, arg2, ctx)
    ccall((:TSAlpha2SetPredictor, $petsc_library), PetscErrorCode, (TS, Ptr{TSAlpha2PredictorFn}, Ptr{Cvoid}), arg1, arg2, ctx)
end

function TSSetDM(arg1, arg2)
    ccall((:TSSetDM, $petsc_library), PetscErrorCode, (TS, DM), arg1, arg2)
end

function TSGetDM(arg1, arg2)
    ccall((:TSGetDM, $petsc_library), PetscErrorCode, (TS, Ptr{DM}), arg1, arg2)
end

function SNESTSFormFunction(arg1, arg2, arg3, arg4)
    ccall((:SNESTSFormFunction, $petsc_library), PetscErrorCode, (SNES, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function SNESTSFormJacobian(arg1, arg2, arg3, arg4, arg5)
    ccall((:SNESTSFormJacobian, $petsc_library), PetscErrorCode, (SNES, Vec, Mat, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TSRHSJacobianTest(arg1, arg2)
    ccall((:TSRHSJacobianTest, $petsc_library), PetscErrorCode, (TS, Ptr{PetscBool}), arg1, arg2)
end

function TSRHSJacobianTestTranspose(arg1, arg2)
    ccall((:TSRHSJacobianTestTranspose, $petsc_library), PetscErrorCode, (TS, Ptr{PetscBool}), arg1, arg2)
end

function TSGetComputeInitialCondition(arg1, arg2)
    ccall((:TSGetComputeInitialCondition, $petsc_library), PetscErrorCode, (TS, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function TSSetComputeInitialCondition(arg1, arg2)
    ccall((:TSSetComputeInitialCondition, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}), arg1, arg2)
end

function TSComputeInitialCondition(arg1, arg2)
    ccall((:TSComputeInitialCondition, $petsc_library), PetscErrorCode, (TS, Vec), arg1, arg2)
end

function TSGetComputeExactError(arg1, arg2)
    ccall((:TSGetComputeExactError, $petsc_library), PetscErrorCode, (TS, Ptr{Ptr{Cvoid}}), arg1, arg2)
end

function TSSetComputeExactError(arg1, arg2)
    ccall((:TSSetComputeExactError, $petsc_library), PetscErrorCode, (TS, Ptr{Cvoid}), arg1, arg2)
end

function TSComputeExactError(arg1, arg2, arg3)
    ccall((:TSComputeExactError, $petsc_library), PetscErrorCode, (TS, Vec, Vec), arg1, arg2, arg3)
end

function PetscConvEstUseTS(arg1, arg2)
    ccall((:PetscConvEstUseTS, $petsc_library), PetscErrorCode, (PetscConvEst, PetscBool), arg1, arg2)
end

function TSSetMatStructure(arg1, arg2)
    ccall((:TSSetMatStructure, $petsc_library), PetscErrorCode, (TS, MatStructure), arg1, arg2)
end

function VecFischer(arg1, arg2, arg3, arg4, arg5)
    ccall((:VecFischer, $petsc_library), PetscErrorCode, (Vec, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5)
end

function VecSFischer(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:VecSFischer, $petsc_library), PetscErrorCode, (Vec, Vec, Vec, Vec, PetscReal, Vec), arg1, arg2, arg3, arg4, arg5, arg6)
end

function MatDFischer(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:MatDFischer, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec, Vec, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function MatDSFischer(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    ccall((:MatDSFischer, $petsc_library), PetscErrorCode, (Mat, Vec, Vec, Vec, Vec, PetscReal, Vec, Vec, Vec, Vec, Vec), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
end

function TaoSoftThreshold(arg1, arg2, arg3, arg4)
    ccall((:TaoSoftThreshold, $petsc_library), PetscErrorCode, (Vec, PetscReal, PetscReal, Vec), arg1, arg2, arg3, arg4)
end

@enum TaoSubsetType::UInt32 begin
    TAO_SUBSET_SUBVEC = 0
    TAO_SUBSET_MASK = 1
    TAO_SUBSET_MATRIXFREE = 2
end

mutable struct _p_Tao end

const Tao = Ptr{_p_Tao}

@enum TaoADMMUpdateType::UInt32 begin
    TAO_ADMM_UPDATE_BASIC = 0
    TAO_ADMM_UPDATE_ADAPTIVE = 1
    TAO_ADMM_UPDATE_ADAPTIVE_RELAXED = 2
end

@enum TaoADMMRegularizerType::UInt32 begin
    TAO_ADMM_REGULARIZER_USER = 0
    TAO_ADMM_REGULARIZER_SOFT_THRESH = 1
end

@enum TaoALMMType::UInt32 begin
    TAO_ALMM_CLASSIC = 0
    TAO_ALMM_PHR = 1
end

@enum TaoBNCGType::UInt32 begin
    TAO_BNCG_GD = 0
    TAO_BNCG_PCGD = 1
    TAO_BNCG_HS = 2
    TAO_BNCG_FR = 3
    TAO_BNCG_PRP = 4
    TAO_BNCG_PRP_PLUS = 5
    TAO_BNCG_DY = 6
    TAO_BNCG_HZ = 7
    TAO_BNCG_DK = 8
    TAO_BNCG_KD = 9
    TAO_BNCG_SSML_BFGS = 10
    TAO_BNCG_SSML_DFP = 11
    TAO_BNCG_SSML_BRDN = 12
end

const TaoType = Ptr{Cchar}

@enum TaoConvergedReason::Int32 begin
    TAO_CONVERGED_GATOL = 3
    TAO_CONVERGED_GRTOL = 4
    TAO_CONVERGED_GTTOL = 5
    TAO_CONVERGED_STEPTOL = 6
    TAO_CONVERGED_MINF = 7
    TAO_CONVERGED_USER = 8
    TAO_DIVERGED_MAXITS = -2
    TAO_DIVERGED_NAN = -4
    TAO_DIVERGED_MAXFCN = -5
    TAO_DIVERGED_LS_FAILURE = -6
    TAO_DIVERGED_TR_REDUCTION = -7
    TAO_DIVERGED_USER = -8
    TAO_CONTINUE_ITERATING = 0
end

function TaoInitializePackage()
    ccall((:TaoInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TaoFinalizePackage()
    ccall((:TaoFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TaoCreate(arg1, arg2)
    ccall((:TaoCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Tao}), arg1, arg2)
end

function TaoSetFromOptions(arg1)
    ccall((:TaoSetFromOptions, $petsc_library), PetscErrorCode, (Tao,), arg1)
end

function TaoSetUp(arg1)
    ccall((:TaoSetUp, $petsc_library), PetscErrorCode, (Tao,), arg1)
end

function TaoSetType(arg1, arg2)
    ccall((:TaoSetType, $petsc_library), PetscErrorCode, (Tao, TaoType), arg1, arg2)
end

function TaoGetType(arg1, arg2)
    ccall((:TaoGetType, $petsc_library), PetscErrorCode, (Tao, Ptr{TaoType}), arg1, arg2)
end

function TaoSetApplicationContext(arg1, arg2)
    ccall((:TaoSetApplicationContext, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoGetApplicationContext(arg1, arg2)
    ccall((:TaoGetApplicationContext, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoDestroy(arg1)
    ccall((:TaoDestroy, $petsc_library), PetscErrorCode, (Ptr{Tao},), arg1)
end

function TaoSetOptionsPrefix(arg1, arg2)
    ccall((:TaoSetOptionsPrefix, $petsc_library), PetscErrorCode, (Tao, Ptr{Cchar}), arg1, arg2)
end

function TaoView(arg1, arg2)
    ccall((:TaoView, $petsc_library), PetscErrorCode, (Tao, PetscViewer), arg1, arg2)
end

function TaoViewFromOptions(arg1, arg2, arg3)
    ccall((:TaoViewFromOptions, $petsc_library), PetscErrorCode, (Tao, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function TaoSolve(arg1)
    ccall((:TaoSolve, $petsc_library), PetscErrorCode, (Tao,), arg1)
end

function TaoRegister(arg1, arg2)
    ccall((:TaoRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function TaoRegisterDestroy()
    ccall((:TaoRegisterDestroy, $petsc_library), PetscErrorCode, ())
end

function TaoGetConvergedReason(arg1, arg2)
    ccall((:TaoGetConvergedReason, $petsc_library), PetscErrorCode, (Tao, Ptr{TaoConvergedReason}), arg1, arg2)
end

function TaoGetSolutionStatus(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:TaoGetSolutionStatus, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscInt}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{TaoConvergedReason}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function TaoSetConvergedReason(arg1, arg2)
    ccall((:TaoSetConvergedReason, $petsc_library), PetscErrorCode, (Tao, TaoConvergedReason), arg1, arg2)
end

function TaoSetSolution(arg1, arg2)
    ccall((:TaoSetSolution, $petsc_library), PetscErrorCode, (Tao, Vec), arg1, arg2)
end

function TaoGetSolution(arg1, arg2)
    ccall((:TaoGetSolution, $petsc_library), PetscErrorCode, (Tao, Ptr{Vec}), arg1, arg2)
end

function TaoSetObjective(arg1, arg2, arg3)
    ccall((:TaoSetObjective, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TaoGetObjective(arg1, arg2, arg3)
    ccall((:TaoGetObjective, $petsc_library), PetscErrorCode, (Tao, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3)
end

function TaoSetGradient(arg1, arg2, arg3, arg4)
    ccall((:TaoSetGradient, $petsc_library), PetscErrorCode, (Tao, Vec, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TaoGetGradient(arg1, arg2, arg3, arg4)
    ccall((:TaoGetGradient, $petsc_library), PetscErrorCode, (Tao, Ptr{Vec}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function TaoSetObjectiveAndGradient(arg1, arg2, arg3, arg4)
    ccall((:TaoSetObjectiveAndGradient, $petsc_library), PetscErrorCode, (Tao, Vec, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TaoGetObjectiveAndGradient(arg1, arg2, arg3, arg4)
    ccall((:TaoGetObjectiveAndGradient, $petsc_library), PetscErrorCode, (Tao, Ptr{Vec}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4)
end

function TaoSetHessian(arg1, arg2, arg3, arg4, arg5)
    ccall((:TaoSetHessian, $petsc_library), PetscErrorCode, (Tao, Mat, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TaoGetHessian(arg1, arg2, arg3, arg4, arg5)
    ccall((:TaoGetHessian, $petsc_library), PetscErrorCode, (Tao, Ptr{Mat}, Ptr{Mat}, Ptr{Ptr{Cvoid}}, Ptr{Ptr{Cvoid}}), arg1, arg2, arg3, arg4, arg5)
end

function TaoSetGradientNorm(arg1, arg2)
    ccall((:TaoSetGradientNorm, $petsc_library), PetscErrorCode, (Tao, Mat), arg1, arg2)
end

function TaoGetGradientNorm(arg1, arg2)
    ccall((:TaoGetGradientNorm, $petsc_library), PetscErrorCode, (Tao, Ptr{Mat}), arg1, arg2)
end

function TaoSetLMVMMatrix(arg1, arg2)
    ccall((:TaoSetLMVMMatrix, $petsc_library), PetscErrorCode, (Tao, Mat), arg1, arg2)
end

function TaoGetLMVMMatrix(arg1, arg2)
    ccall((:TaoGetLMVMMatrix, $petsc_library), PetscErrorCode, (Tao, Ptr{Mat}), arg1, arg2)
end

function TaoSetRecycleHistory(arg1, arg2)
    ccall((:TaoSetRecycleHistory, $petsc_library), PetscErrorCode, (Tao, PetscBool), arg1, arg2)
end

function TaoGetRecycleHistory(arg1, arg2)
    ccall((:TaoGetRecycleHistory, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscBool}), arg1, arg2)
end

function TaoLMVMSetH0(arg1, arg2)
    ccall((:TaoLMVMSetH0, $petsc_library), PetscErrorCode, (Tao, Mat), arg1, arg2)
end

function TaoLMVMGetH0(arg1, arg2)
    ccall((:TaoLMVMGetH0, $petsc_library), PetscErrorCode, (Tao, Ptr{Mat}), arg1, arg2)
end

function TaoLMVMGetH0KSP(arg1, arg2)
    ccall((:TaoLMVMGetH0KSP, $petsc_library), PetscErrorCode, (Tao, Ptr{KSP}), arg1, arg2)
end

function TaoLMVMRecycle(arg1, arg2)
    ccall((:TaoLMVMRecycle, $petsc_library), PetscErrorCode, (Tao, PetscBool), arg1, arg2)
end

function TaoSetResidualRoutine(arg1, arg2, arg3, arg4)
    ccall((:TaoSetResidualRoutine, $petsc_library), PetscErrorCode, (Tao, Vec, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TaoSetResidualWeights(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TaoSetResidualWeights, $petsc_library), PetscErrorCode, (Tao, Vec, PetscInt, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscReal}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TaoSetConstraintsRoutine(arg1, arg2, arg3, arg4)
    ccall((:TaoSetConstraintsRoutine, $petsc_library), PetscErrorCode, (Tao, Vec, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TaoSetInequalityConstraintsRoutine(arg1, arg2, arg3, arg4)
    ccall((:TaoSetInequalityConstraintsRoutine, $petsc_library), PetscErrorCode, (Tao, Vec, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TaoSetEqualityConstraintsRoutine(arg1, arg2, arg3, arg4)
    ccall((:TaoSetEqualityConstraintsRoutine, $petsc_library), PetscErrorCode, (Tao, Vec, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TaoSetJacobianResidualRoutine(arg1, arg2, arg3, arg4, arg5)
    ccall((:TaoSetJacobianResidualRoutine, $petsc_library), PetscErrorCode, (Tao, Mat, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TaoSetJacobianRoutine(arg1, arg2, arg3, arg4, arg5)
    ccall((:TaoSetJacobianRoutine, $petsc_library), PetscErrorCode, (Tao, Mat, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TaoSetJacobianStateRoutine(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TaoSetJacobianStateRoutine, $petsc_library), PetscErrorCode, (Tao, Mat, Mat, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TaoSetJacobianDesignRoutine(arg1, arg2, arg3, arg4)
    ccall((:TaoSetJacobianDesignRoutine, $petsc_library), PetscErrorCode, (Tao, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TaoSetJacobianInequalityRoutine(arg1, arg2, arg3, arg4, arg5)
    ccall((:TaoSetJacobianInequalityRoutine, $petsc_library), PetscErrorCode, (Tao, Mat, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TaoSetJacobianEqualityRoutine(arg1, arg2, arg3, arg4, arg5)
    ccall((:TaoSetJacobianEqualityRoutine, $petsc_library), PetscErrorCode, (Tao, Mat, Mat, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TaoPythonSetType(arg1, arg2)
    ccall((:TaoPythonSetType, $petsc_library), PetscErrorCode, (Tao, Ptr{Cchar}), arg1, arg2)
end

function TaoPythonGetType(arg1, arg2)
    ccall((:TaoPythonGetType, $petsc_library), PetscErrorCode, (Tao, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function TaoShellSetSolve(arg1, arg2)
    ccall((:TaoShellSetSolve, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoShellSetContext(arg1, arg2)
    ccall((:TaoShellSetContext, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoShellGetContext(arg1, arg2)
    ccall((:TaoShellGetContext, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoSetStateDesignIS(arg1, arg2, arg3)
    ccall((:TaoSetStateDesignIS, $petsc_library), PetscErrorCode, (Tao, IS, IS), arg1, arg2, arg3)
end

function TaoComputeObjective(arg1, arg2, arg3)
    ccall((:TaoComputeObjective, $petsc_library), PetscErrorCode, (Tao, Vec, Ptr{PetscReal}), arg1, arg2, arg3)
end

function TaoComputeResidual(arg1, arg2, arg3)
    ccall((:TaoComputeResidual, $petsc_library), PetscErrorCode, (Tao, Vec, Vec), arg1, arg2, arg3)
end

function TaoTestGradient(arg1, arg2, arg3)
    ccall((:TaoTestGradient, $petsc_library), PetscErrorCode, (Tao, Vec, Vec), arg1, arg2, arg3)
end

function TaoComputeGradient(arg1, arg2, arg3)
    ccall((:TaoComputeGradient, $petsc_library), PetscErrorCode, (Tao, Vec, Vec), arg1, arg2, arg3)
end

function TaoComputeObjectiveAndGradient(arg1, arg2, arg3, arg4)
    ccall((:TaoComputeObjectiveAndGradient, $petsc_library), PetscErrorCode, (Tao, Vec, Ptr{PetscReal}, Vec), arg1, arg2, arg3, arg4)
end

function TaoComputeConstraints(arg1, arg2, arg3)
    ccall((:TaoComputeConstraints, $petsc_library), PetscErrorCode, (Tao, Vec, Vec), arg1, arg2, arg3)
end

function TaoComputeInequalityConstraints(arg1, arg2, arg3)
    ccall((:TaoComputeInequalityConstraints, $petsc_library), PetscErrorCode, (Tao, Vec, Vec), arg1, arg2, arg3)
end

function TaoComputeEqualityConstraints(arg1, arg2, arg3)
    ccall((:TaoComputeEqualityConstraints, $petsc_library), PetscErrorCode, (Tao, Vec, Vec), arg1, arg2, arg3)
end

function TaoDefaultComputeGradient(arg1, arg2, arg3, arg4)
    ccall((:TaoDefaultComputeGradient, $petsc_library), PetscErrorCode, (Tao, Vec, Vec, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TaoIsObjectiveDefined(arg1, arg2)
    ccall((:TaoIsObjectiveDefined, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscBool}), arg1, arg2)
end

function TaoIsGradientDefined(arg1, arg2)
    ccall((:TaoIsGradientDefined, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscBool}), arg1, arg2)
end

function TaoIsObjectiveAndGradientDefined(arg1, arg2)
    ccall((:TaoIsObjectiveAndGradientDefined, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscBool}), arg1, arg2)
end

function TaoTestHessian(arg1)
    ccall((:TaoTestHessian, $petsc_library), PetscErrorCode, (Tao,), arg1)
end

function TaoComputeHessian(arg1, arg2, arg3, arg4)
    ccall((:TaoComputeHessian, $petsc_library), PetscErrorCode, (Tao, Vec, Mat, Mat), arg1, arg2, arg3, arg4)
end

function TaoComputeResidualJacobian(arg1, arg2, arg3, arg4)
    ccall((:TaoComputeResidualJacobian, $petsc_library), PetscErrorCode, (Tao, Vec, Mat, Mat), arg1, arg2, arg3, arg4)
end

function TaoComputeJacobian(arg1, arg2, arg3, arg4)
    ccall((:TaoComputeJacobian, $petsc_library), PetscErrorCode, (Tao, Vec, Mat, Mat), arg1, arg2, arg3, arg4)
end

function TaoComputeJacobianState(arg1, arg2, arg3, arg4, arg5)
    ccall((:TaoComputeJacobianState, $petsc_library), PetscErrorCode, (Tao, Vec, Mat, Mat, Mat), arg1, arg2, arg3, arg4, arg5)
end

function TaoComputeJacobianEquality(arg1, arg2, arg3, arg4)
    ccall((:TaoComputeJacobianEquality, $petsc_library), PetscErrorCode, (Tao, Vec, Mat, Mat), arg1, arg2, arg3, arg4)
end

function TaoComputeJacobianInequality(arg1, arg2, arg3, arg4)
    ccall((:TaoComputeJacobianInequality, $petsc_library), PetscErrorCode, (Tao, Vec, Mat, Mat), arg1, arg2, arg3, arg4)
end

function TaoComputeJacobianDesign(arg1, arg2, arg3)
    ccall((:TaoComputeJacobianDesign, $petsc_library), PetscErrorCode, (Tao, Vec, Mat), arg1, arg2, arg3)
end

function TaoDefaultComputeHessian(arg1, arg2, arg3, arg4, arg5)
    ccall((:TaoDefaultComputeHessian, $petsc_library), PetscErrorCode, (Tao, Vec, Mat, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TaoDefaultComputeHessianColor(arg1, arg2, arg3, arg4, arg5)
    ccall((:TaoDefaultComputeHessianColor, $petsc_library), PetscErrorCode, (Tao, Vec, Mat, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TaoDefaultComputeHessianMFFD(arg1, arg2, arg3, arg4, arg5)
    ccall((:TaoDefaultComputeHessianMFFD, $petsc_library), PetscErrorCode, (Tao, Vec, Mat, Mat, Ptr{Cvoid}), arg1, arg2, arg3, arg4, arg5)
end

function TaoComputeDualVariables(arg1, arg2, arg3)
    ccall((:TaoComputeDualVariables, $petsc_library), PetscErrorCode, (Tao, Vec, Vec), arg1, arg2, arg3)
end

function TaoSetVariableBounds(arg1, arg2, arg3)
    ccall((:TaoSetVariableBounds, $petsc_library), PetscErrorCode, (Tao, Vec, Vec), arg1, arg2, arg3)
end

function TaoGetVariableBounds(arg1, arg2, arg3)
    ccall((:TaoGetVariableBounds, $petsc_library), PetscErrorCode, (Tao, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3)
end

function TaoGetDualVariables(arg1, arg2, arg3)
    ccall((:TaoGetDualVariables, $petsc_library), PetscErrorCode, (Tao, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3)
end

function TaoSetInequalityBounds(arg1, arg2, arg3)
    ccall((:TaoSetInequalityBounds, $petsc_library), PetscErrorCode, (Tao, Vec, Vec), arg1, arg2, arg3)
end

function TaoGetInequalityBounds(arg1, arg2, arg3)
    ccall((:TaoGetInequalityBounds, $petsc_library), PetscErrorCode, (Tao, Ptr{Vec}, Ptr{Vec}), arg1, arg2, arg3)
end

function TaoSetVariableBoundsRoutine(arg1, arg2, arg3)
    ccall((:TaoSetVariableBoundsRoutine, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TaoComputeVariableBounds(arg1)
    ccall((:TaoComputeVariableBounds, $petsc_library), PetscErrorCode, (Tao,), arg1)
end

function TaoGetTolerances(arg1, arg2, arg3, arg4)
    ccall((:TaoGetTolerances, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function TaoSetTolerances(arg1, arg2, arg3, arg4)
    ccall((:TaoSetTolerances, $petsc_library), PetscErrorCode, (Tao, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4)
end

function TaoGetConstraintTolerances(arg1, arg2, arg3)
    ccall((:TaoGetConstraintTolerances, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3)
end

function TaoSetConstraintTolerances(arg1, arg2, arg3)
    ccall((:TaoSetConstraintTolerances, $petsc_library), PetscErrorCode, (Tao, PetscReal, PetscReal), arg1, arg2, arg3)
end

function TaoSetFunctionLowerBound(arg1, arg2)
    ccall((:TaoSetFunctionLowerBound, $petsc_library), PetscErrorCode, (Tao, PetscReal), arg1, arg2)
end

function TaoSetInitialTrustRegionRadius(arg1, arg2)
    ccall((:TaoSetInitialTrustRegionRadius, $petsc_library), PetscErrorCode, (Tao, PetscReal), arg1, arg2)
end

function TaoSetMaximumIterations(arg1, arg2)
    ccall((:TaoSetMaximumIterations, $petsc_library), PetscErrorCode, (Tao, PetscInt), arg1, arg2)
end

function TaoSetMaximumFunctionEvaluations(arg1, arg2)
    ccall((:TaoSetMaximumFunctionEvaluations, $petsc_library), PetscErrorCode, (Tao, PetscInt), arg1, arg2)
end

function TaoGetFunctionLowerBound(arg1, arg2)
    ccall((:TaoGetFunctionLowerBound, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscReal}), arg1, arg2)
end

function TaoGetInitialTrustRegionRadius(arg1, arg2)
    ccall((:TaoGetInitialTrustRegionRadius, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscReal}), arg1, arg2)
end

function TaoGetCurrentTrustRegionRadius(arg1, arg2)
    ccall((:TaoGetCurrentTrustRegionRadius, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscReal}), arg1, arg2)
end

function TaoGetMaximumIterations(arg1, arg2)
    ccall((:TaoGetMaximumIterations, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscInt}), arg1, arg2)
end

function TaoGetCurrentFunctionEvaluations(arg1, arg2)
    ccall((:TaoGetCurrentFunctionEvaluations, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscInt}), arg1, arg2)
end

function TaoGetMaximumFunctionEvaluations(arg1, arg2)
    ccall((:TaoGetMaximumFunctionEvaluations, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscInt}), arg1, arg2)
end

function TaoGetIterationNumber(arg1, arg2)
    ccall((:TaoGetIterationNumber, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscInt}), arg1, arg2)
end

function TaoSetIterationNumber(arg1, arg2)
    ccall((:TaoSetIterationNumber, $petsc_library), PetscErrorCode, (Tao, PetscInt), arg1, arg2)
end

function TaoGetTotalIterationNumber(arg1, arg2)
    ccall((:TaoGetTotalIterationNumber, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscInt}), arg1, arg2)
end

function TaoSetTotalIterationNumber(arg1, arg2)
    ccall((:TaoSetTotalIterationNumber, $petsc_library), PetscErrorCode, (Tao, PetscInt), arg1, arg2)
end

function TaoGetResidualNorm(arg1, arg2)
    ccall((:TaoGetResidualNorm, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscReal}), arg1, arg2)
end

function TaoAppendOptionsPrefix(arg1, arg2)
    ccall((:TaoAppendOptionsPrefix, $petsc_library), PetscErrorCode, (Tao, Ptr{Cchar}), arg1, arg2)
end

function TaoGetOptionsPrefix(arg1, arg2)
    ccall((:TaoGetOptionsPrefix, $petsc_library), PetscErrorCode, (Tao, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function TaoResetStatistics(arg1)
    ccall((:TaoResetStatistics, $petsc_library), PetscErrorCode, (Tao,), arg1)
end

function TaoSetUpdate(arg1, arg2, arg3)
    ccall((:TaoSetUpdate, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TaoGetKSP(arg1, arg2)
    ccall((:TaoGetKSP, $petsc_library), PetscErrorCode, (Tao, Ptr{KSP}), arg1, arg2)
end

function TaoGetLinearSolveIterations(arg1, arg2)
    ccall((:TaoGetLinearSolveIterations, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscInt}), arg1, arg2)
end

function TaoKSPSetUseEW(arg1, arg2)
    ccall((:TaoKSPSetUseEW, $petsc_library), PetscErrorCode, (Tao, PetscBool), arg1, arg2)
end

mutable struct _p_TaoLineSearch end

const TaoLineSearch = Ptr{_p_TaoLineSearch}

@enum TaoLineSearchConvergedReason::Int32 begin
    TAOLINESEARCH_FAILED_INFORNAN = -1
    TAOLINESEARCH_FAILED_BADPARAMETER = -2
    TAOLINESEARCH_FAILED_ASCENT = -3
    TAOLINESEARCH_CONTINUE_ITERATING = 0
    TAOLINESEARCH_SUCCESS = 1
    TAOLINESEARCH_SUCCESS_USER = 2
    TAOLINESEARCH_HALTED_OTHER = 3
    TAOLINESEARCH_HALTED_MAXFCN = 4
    TAOLINESEARCH_HALTED_UPPERBOUND = 5
    TAOLINESEARCH_HALTED_LOWERBOUND = 6
    TAOLINESEARCH_HALTED_RTOL = 7
    TAOLINESEARCH_HALTED_USER = 8
end

const TaoLineSearchType = Ptr{Cchar}

function TaoLineSearchCreate(arg1, arg2)
    ccall((:TaoLineSearchCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{TaoLineSearch}), arg1, arg2)
end

function TaoLineSearchSetFromOptions(arg1)
    ccall((:TaoLineSearchSetFromOptions, $petsc_library), PetscErrorCode, (TaoLineSearch,), arg1)
end

function TaoLineSearchSetUp(arg1)
    ccall((:TaoLineSearchSetUp, $petsc_library), PetscErrorCode, (TaoLineSearch,), arg1)
end

function TaoLineSearchDestroy(arg1)
    ccall((:TaoLineSearchDestroy, $petsc_library), PetscErrorCode, (Ptr{TaoLineSearch},), arg1)
end

function TaoLineSearchMonitor(arg1, arg2, arg3, arg4)
    ccall((:TaoLineSearchMonitor, $petsc_library), PetscErrorCode, (TaoLineSearch, PetscInt, PetscReal, PetscReal), arg1, arg2, arg3, arg4)
end

function TaoLineSearchView(arg1, arg2)
    ccall((:TaoLineSearchView, $petsc_library), PetscErrorCode, (TaoLineSearch, PetscViewer), arg1, arg2)
end

function TaoLineSearchViewFromOptions(arg1, arg2, arg3)
    ccall((:TaoLineSearchViewFromOptions, $petsc_library), PetscErrorCode, (TaoLineSearch, PetscObject, Ptr{Cchar}), arg1, arg2, arg3)
end

function TaoLineSearchSetOptionsPrefix(arg1, prefix)
    ccall((:TaoLineSearchSetOptionsPrefix, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{Cchar}), arg1, prefix)
end

function TaoLineSearchReset(arg1)
    ccall((:TaoLineSearchReset, $petsc_library), PetscErrorCode, (TaoLineSearch,), arg1)
end

function TaoLineSearchAppendOptionsPrefix(arg1, arg2)
    ccall((:TaoLineSearchAppendOptionsPrefix, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{Cchar}), arg1, arg2)
end

function TaoLineSearchGetOptionsPrefix(arg1, arg2)
    ccall((:TaoLineSearchGetOptionsPrefix, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{Ptr{Cchar}}), arg1, arg2)
end

function TaoLineSearchApply(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:TaoLineSearchApply, $petsc_library), PetscErrorCode, (TaoLineSearch, Vec, Ptr{PetscReal}, Vec, Vec, Ptr{PetscReal}, Ptr{TaoLineSearchConvergedReason}), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function TaoLineSearchGetStepLength(arg1, arg2)
    ccall((:TaoLineSearchGetStepLength, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{PetscReal}), arg1, arg2)
end

function TaoLineSearchGetStartingVector(arg1, arg2)
    ccall((:TaoLineSearchGetStartingVector, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{Vec}), arg1, arg2)
end

function TaoLineSearchGetStepDirection(arg1, arg2)
    ccall((:TaoLineSearchGetStepDirection, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{Vec}), arg1, arg2)
end

function TaoLineSearchSetInitialStepLength(arg1, arg2)
    ccall((:TaoLineSearchSetInitialStepLength, $petsc_library), PetscErrorCode, (TaoLineSearch, PetscReal), arg1, arg2)
end

function TaoLineSearchGetSolution(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TaoLineSearchGetSolution, $petsc_library), PetscErrorCode, (TaoLineSearch, Vec, Ptr{PetscReal}, Vec, Ptr{PetscReal}, Ptr{TaoLineSearchConvergedReason}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TaoLineSearchGetFullStepObjective(arg1, arg2)
    ccall((:TaoLineSearchGetFullStepObjective, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{PetscReal}), arg1, arg2)
end

function TaoLineSearchGetNumberFunctionEvaluations(arg1, arg2, arg3, arg4)
    ccall((:TaoLineSearchGetNumberFunctionEvaluations, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{PetscInt}, Ptr{PetscInt}, Ptr{PetscInt}), arg1, arg2, arg3, arg4)
end

function TaoLineSearchGetType(arg1, arg2)
    ccall((:TaoLineSearchGetType, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{TaoLineSearchType}), arg1, arg2)
end

function TaoLineSearchSetType(arg1, arg2)
    ccall((:TaoLineSearchSetType, $petsc_library), PetscErrorCode, (TaoLineSearch, TaoLineSearchType), arg1, arg2)
end

function TaoLineSearchIsUsingTaoRoutines(arg1, arg2)
    ccall((:TaoLineSearchIsUsingTaoRoutines, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{PetscBool}), arg1, arg2)
end

function TaoLineSearchSetObjectiveAndGTSRoutine(arg1, arg2, arg3)
    ccall((:TaoLineSearchSetObjectiveAndGTSRoutine, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TaoLineSearchSetObjectiveRoutine(arg1, arg2, arg3)
    ccall((:TaoLineSearchSetObjectiveRoutine, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TaoLineSearchSetGradientRoutine(arg1, arg2, arg3)
    ccall((:TaoLineSearchSetGradientRoutine, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TaoLineSearchSetObjectiveAndGradientRoutine(arg1, arg2, arg3)
    ccall((:TaoLineSearchSetObjectiveAndGradientRoutine, $petsc_library), PetscErrorCode, (TaoLineSearch, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TaoLineSearchComputeObjective(arg1, arg2, arg3)
    ccall((:TaoLineSearchComputeObjective, $petsc_library), PetscErrorCode, (TaoLineSearch, Vec, Ptr{PetscReal}), arg1, arg2, arg3)
end

function TaoLineSearchComputeGradient(arg1, arg2, arg3)
    ccall((:TaoLineSearchComputeGradient, $petsc_library), PetscErrorCode, (TaoLineSearch, Vec, Vec), arg1, arg2, arg3)
end

function TaoLineSearchComputeObjectiveAndGradient(arg1, arg2, arg3, arg4)
    ccall((:TaoLineSearchComputeObjectiveAndGradient, $petsc_library), PetscErrorCode, (TaoLineSearch, Vec, Ptr{PetscReal}, Vec), arg1, arg2, arg3, arg4)
end

function TaoLineSearchComputeObjectiveAndGTS(arg1, arg2, arg3, arg4)
    ccall((:TaoLineSearchComputeObjectiveAndGTS, $petsc_library), PetscErrorCode, (TaoLineSearch, Vec, Ptr{PetscReal}, Ptr{PetscReal}), arg1, arg2, arg3, arg4)
end

function TaoLineSearchSetVariableBounds(arg1, arg2, arg3)
    ccall((:TaoLineSearchSetVariableBounds, $petsc_library), PetscErrorCode, (TaoLineSearch, Vec, Vec), arg1, arg2, arg3)
end

function TaoLineSearchInitializePackage()
    ccall((:TaoLineSearchInitializePackage, $petsc_library), PetscErrorCode, ())
end

function TaoLineSearchFinalizePackage()
    ccall((:TaoLineSearchFinalizePackage, $petsc_library), PetscErrorCode, ())
end

function TaoLineSearchRegister(arg1, arg2)
    ccall((:TaoLineSearchRegister, $petsc_library), PetscErrorCode, (Ptr{Cchar}, Ptr{Cvoid}), arg1, arg2)
end

function TaoLineSearchUseTaoRoutines(arg1, arg2)
    ccall((:TaoLineSearchUseTaoRoutines, $petsc_library), PetscErrorCode, (TaoLineSearch, Tao), arg1, arg2)
end

function TaoGetLineSearch(arg1, arg2)
    ccall((:TaoGetLineSearch, $petsc_library), PetscErrorCode, (Tao, Ptr{TaoLineSearch}), arg1, arg2)
end

function TaoSetConvergenceHistory(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    ccall((:TaoSetConvergenceHistory, $petsc_library), PetscErrorCode, (Tao, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscReal}, Ptr{PetscInt}, PetscInt, PetscBool), arg1, arg2, arg3, arg4, arg5, arg6, arg7)
end

function TaoGetConvergenceHistory(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TaoGetConvergenceHistory, $petsc_library), PetscErrorCode, (Tao, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscReal}}, Ptr{Ptr{PetscInt}}, Ptr{PetscInt}), arg1, arg2, arg3, arg4, arg5, arg6)
end

function TaoMonitorSet(arg1, arg2, arg3, arg4)
    ccall((:TaoMonitorSet, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3, arg4)
end

function TaoMonitorCancel(arg1)
    ccall((:TaoMonitorCancel, $petsc_library), PetscErrorCode, (Tao,), arg1)
end

function TaoMonitorDefault(arg1, arg2)
    ccall((:TaoMonitorDefault, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoMonitorGlobalization(arg1, arg2)
    ccall((:TaoMonitorGlobalization, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoMonitorDefaultShort(arg1, arg2)
    ccall((:TaoMonitorDefaultShort, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoMonitorConstraintNorm(arg1, arg2)
    ccall((:TaoMonitorConstraintNorm, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoMonitorSolution(arg1, arg2)
    ccall((:TaoMonitorSolution, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoMonitorResidual(arg1, arg2)
    ccall((:TaoMonitorResidual, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoMonitorGradient(arg1, arg2)
    ccall((:TaoMonitorGradient, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoMonitorStep(arg1, arg2)
    ccall((:TaoMonitorStep, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoMonitorSolutionDraw(arg1, arg2)
    ccall((:TaoMonitorSolutionDraw, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoMonitorStepDraw(arg1, arg2)
    ccall((:TaoMonitorStepDraw, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoMonitorGradientDraw(arg1, arg2)
    ccall((:TaoMonitorGradientDraw, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoAddLineSearchCounts(arg1)
    ccall((:TaoAddLineSearchCounts, $petsc_library), PetscErrorCode, (Tao,), arg1)
end

function TaoDefaultConvergenceTest(arg1, arg2)
    ccall((:TaoDefaultConvergenceTest, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}), arg1, arg2)
end

function TaoSetConvergenceTest(arg1, arg2, arg3)
    ccall((:TaoSetConvergenceTest, $petsc_library), PetscErrorCode, (Tao, Ptr{Cvoid}, Ptr{Cvoid}), arg1, arg2, arg3)
end

function TaoLCLSetStateDesignIS(arg1, arg2, arg3)
    ccall((:TaoLCLSetStateDesignIS, $petsc_library), PetscErrorCode, (Tao, IS, IS), arg1, arg2, arg3)
end

function TaoMonitor(arg1, arg2, arg3, arg4, arg5, arg6)
    ccall((:TaoMonitor, $petsc_library), PetscErrorCode, (Tao, PetscInt, PetscReal, PetscReal, PetscReal, PetscReal), arg1, arg2, arg3, arg4, arg5, arg6)
end

mutable struct _n_TaoMonitorDrawCtx end

const TaoMonitorDrawCtx = Ptr{_n_TaoMonitorDrawCtx}

function TaoMonitorDrawCtxCreate(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    ccall((:TaoMonitorDrawCtxCreate, $petsc_library), PetscErrorCode, (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, Cint, Cint, Cint, Cint, PetscInt, Ptr{TaoMonitorDrawCtx}), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
end

function TaoMonitorDrawCtxDestroy(arg1)
    ccall((:TaoMonitorDrawCtxDestroy, $petsc_library), PetscErrorCode, (Ptr{TaoMonitorDrawCtx},), arg1)
end

function TaoBRGNGetSubsolver(arg1